
Nucleo_funtimes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fdc  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08006274  08006274  00016274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062b8  080062b8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080062b8  080062b8  000162b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062c0  080062c0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062c0  080062c0  000162c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062c4  080062c4  000162c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080062c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  24000010  080062d8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240000bc  080062d8  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013998  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023e0  00000000  00000000  000339d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a38  00000000  00000000  00035db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000950  00000000  00000000  000367f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035481  00000000  00000000  00037140  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aaf2  00000000  00000000  0006c5c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001525b3  00000000  00000000  000770b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c9666  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028d8  00000000  00000000  001c96e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800625c 	.word	0x0800625c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800625c 	.word	0x0800625c

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b972 	b.w	80005e4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	4688      	mov	r8, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14b      	bne.n	80003be <__udivmoddi4+0xa6>
 8000326:	428a      	cmp	r2, r1
 8000328:	4615      	mov	r5, r2
 800032a:	d967      	bls.n	80003fc <__udivmoddi4+0xe4>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0720 	rsb	r7, r2, #32
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	fa20 f707 	lsr.w	r7, r0, r7
 800033e:	4095      	lsls	r5, r2
 8000340:	ea47 0803 	orr.w	r8, r7, r3
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000350:	fa1f fc85 	uxth.w	ip, r5
 8000354:	fb0e 8817 	mls	r8, lr, r7, r8
 8000358:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035c:	fb07 f10c 	mul.w	r1, r7, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f107 30ff 	add.w	r0, r7, #4294967295
 800036a:	f080 811b 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8118 	bls.w	80005a4 <__udivmoddi4+0x28c>
 8000374:	3f02      	subs	r7, #2
 8000376:	442b      	add	r3, r5
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000380:	fb0e 3310 	mls	r3, lr, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fc0c 	mul.w	ip, r0, ip
 800038c:	45a4      	cmp	ip, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	192c      	adds	r4, r5, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8107 	bcs.w	80005a8 <__udivmoddi4+0x290>
 800039a:	45a4      	cmp	ip, r4
 800039c:	f240 8104 	bls.w	80005a8 <__udivmoddi4+0x290>
 80003a0:	3802      	subs	r0, #2
 80003a2:	442c      	add	r4, r5
 80003a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a8:	eba4 040c 	sub.w	r4, r4, ip
 80003ac:	2700      	movs	r7, #0
 80003ae:	b11e      	cbz	r6, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c6 4300 	strd	r4, r3, [r6]
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d909      	bls.n	80003d6 <__udivmoddi4+0xbe>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80eb 	beq.w	800059e <__udivmoddi4+0x286>
 80003c8:	2700      	movs	r7, #0
 80003ca:	e9c6 0100 	strd	r0, r1, [r6]
 80003ce:	4638      	mov	r0, r7
 80003d0:	4639      	mov	r1, r7
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	fab3 f783 	clz	r7, r3
 80003da:	2f00      	cmp	r7, #0
 80003dc:	d147      	bne.n	800046e <__udivmoddi4+0x156>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xd0>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 80fa 	bhi.w	80005dc <__udivmoddi4+0x2c4>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb61 0303 	sbc.w	r3, r1, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4698      	mov	r8, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d0e0      	beq.n	80003b8 <__udivmoddi4+0xa0>
 80003f6:	e9c6 4800 	strd	r4, r8, [r6]
 80003fa:	e7dd      	b.n	80003b8 <__udivmoddi4+0xa0>
 80003fc:	b902      	cbnz	r2, 8000400 <__udivmoddi4+0xe8>
 80003fe:	deff      	udf	#255	; 0xff
 8000400:	fab2 f282 	clz	r2, r2
 8000404:	2a00      	cmp	r2, #0
 8000406:	f040 808f 	bne.w	8000528 <__udivmoddi4+0x210>
 800040a:	1b49      	subs	r1, r1, r5
 800040c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000410:	fa1f f885 	uxth.w	r8, r5
 8000414:	2701      	movs	r7, #1
 8000416:	fbb1 fcfe 	udiv	ip, r1, lr
 800041a:	0c23      	lsrs	r3, r4, #16
 800041c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb08 f10c 	mul.w	r1, r8, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x124>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4299      	cmp	r1, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 800043a:	4684      	mov	ip, r0
 800043c:	1a59      	subs	r1, r3, r1
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb1 f0fe 	udiv	r0, r1, lr
 8000444:	fb0e 1410 	mls	r4, lr, r0, r1
 8000448:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800044c:	fb08 f800 	mul.w	r8, r8, r0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x14c>
 8000454:	192c      	adds	r4, r5, r4
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x14a>
 800045c:	45a0      	cmp	r8, r4
 800045e:	f200 80b6 	bhi.w	80005ce <__udivmoddi4+0x2b6>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 0408 	sub.w	r4, r4, r8
 8000468:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800046c:	e79f      	b.n	80003ae <__udivmoddi4+0x96>
 800046e:	f1c7 0c20 	rsb	ip, r7, #32
 8000472:	40bb      	lsls	r3, r7
 8000474:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000478:	ea4e 0e03 	orr.w	lr, lr, r3
 800047c:	fa01 f407 	lsl.w	r4, r1, r7
 8000480:	fa20 f50c 	lsr.w	r5, r0, ip
 8000484:	fa21 f30c 	lsr.w	r3, r1, ip
 8000488:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800048c:	4325      	orrs	r5, r4
 800048e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000492:	0c2c      	lsrs	r4, r5, #16
 8000494:	fb08 3319 	mls	r3, r8, r9, r3
 8000498:	fa1f fa8e 	uxth.w	sl, lr
 800049c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a0:	fb09 f40a 	mul.w	r4, r9, sl
 80004a4:	429c      	cmp	r4, r3
 80004a6:	fa02 f207 	lsl.w	r2, r2, r7
 80004aa:	fa00 f107 	lsl.w	r1, r0, r7
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1e 0303 	adds.w	r3, lr, r3
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	f080 8087 	bcs.w	80005ca <__udivmoddi4+0x2b2>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f240 8084 	bls.w	80005ca <__udivmoddi4+0x2b2>
 80004c2:	f1a9 0902 	sub.w	r9, r9, #2
 80004c6:	4473      	add	r3, lr
 80004c8:	1b1b      	subs	r3, r3, r4
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3310 	mls	r3, r8, r0, r3
 80004d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004dc:	45a2      	cmp	sl, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1e 0404 	adds.w	r4, lr, r4
 80004e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e8:	d26b      	bcs.n	80005c2 <__udivmoddi4+0x2aa>
 80004ea:	45a2      	cmp	sl, r4
 80004ec:	d969      	bls.n	80005c2 <__udivmoddi4+0x2aa>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4474      	add	r4, lr
 80004f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	eba4 040a 	sub.w	r4, r4, sl
 80004fe:	454c      	cmp	r4, r9
 8000500:	46c2      	mov	sl, r8
 8000502:	464b      	mov	r3, r9
 8000504:	d354      	bcc.n	80005b0 <__udivmoddi4+0x298>
 8000506:	d051      	beq.n	80005ac <__udivmoddi4+0x294>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d069      	beq.n	80005e0 <__udivmoddi4+0x2c8>
 800050c:	ebb1 050a 	subs.w	r5, r1, sl
 8000510:	eb64 0403 	sbc.w	r4, r4, r3
 8000514:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000518:	40fd      	lsrs	r5, r7
 800051a:	40fc      	lsrs	r4, r7
 800051c:	ea4c 0505 	orr.w	r5, ip, r5
 8000520:	e9c6 5400 	strd	r5, r4, [r6]
 8000524:	2700      	movs	r7, #0
 8000526:	e747      	b.n	80003b8 <__udivmoddi4+0xa0>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f703 	lsr.w	r7, r0, r3
 8000530:	4095      	lsls	r5, r2
 8000532:	fa01 f002 	lsl.w	r0, r1, r2
 8000536:	fa21 f303 	lsr.w	r3, r1, r3
 800053a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800053e:	4338      	orrs	r0, r7
 8000540:	0c01      	lsrs	r1, r0, #16
 8000542:	fbb3 f7fe 	udiv	r7, r3, lr
 8000546:	fa1f f885 	uxth.w	r8, r5
 800054a:	fb0e 3317 	mls	r3, lr, r7, r3
 800054e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000552:	fb07 f308 	mul.w	r3, r7, r8
 8000556:	428b      	cmp	r3, r1
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x256>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f107 3cff 	add.w	ip, r7, #4294967295
 8000564:	d22f      	bcs.n	80005c6 <__udivmoddi4+0x2ae>
 8000566:	428b      	cmp	r3, r1
 8000568:	d92d      	bls.n	80005c6 <__udivmoddi4+0x2ae>
 800056a:	3f02      	subs	r7, #2
 800056c:	4429      	add	r1, r5
 800056e:	1acb      	subs	r3, r1, r3
 8000570:	b281      	uxth	r1, r0
 8000572:	fbb3 f0fe 	udiv	r0, r3, lr
 8000576:	fb0e 3310 	mls	r3, lr, r0, r3
 800057a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057e:	fb00 f308 	mul.w	r3, r0, r8
 8000582:	428b      	cmp	r3, r1
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x27e>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f100 3cff 	add.w	ip, r0, #4294967295
 800058c:	d217      	bcs.n	80005be <__udivmoddi4+0x2a6>
 800058e:	428b      	cmp	r3, r1
 8000590:	d915      	bls.n	80005be <__udivmoddi4+0x2a6>
 8000592:	3802      	subs	r0, #2
 8000594:	4429      	add	r1, r5
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800059c:	e73b      	b.n	8000416 <__udivmoddi4+0xfe>
 800059e:	4637      	mov	r7, r6
 80005a0:	4630      	mov	r0, r6
 80005a2:	e709      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a4:	4607      	mov	r7, r0
 80005a6:	e6e7      	b.n	8000378 <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fb      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005ac:	4541      	cmp	r1, r8
 80005ae:	d2ab      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b4:	eb69 020e 	sbc.w	r2, r9, lr
 80005b8:	3801      	subs	r0, #1
 80005ba:	4613      	mov	r3, r2
 80005bc:	e7a4      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005be:	4660      	mov	r0, ip
 80005c0:	e7e9      	b.n	8000596 <__udivmoddi4+0x27e>
 80005c2:	4618      	mov	r0, r3
 80005c4:	e795      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c6:	4667      	mov	r7, ip
 80005c8:	e7d1      	b.n	800056e <__udivmoddi4+0x256>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e77c      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005ce:	3802      	subs	r0, #2
 80005d0:	442c      	add	r4, r5
 80005d2:	e747      	b.n	8000464 <__udivmoddi4+0x14c>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	442b      	add	r3, r5
 80005da:	e72f      	b.n	800043c <__udivmoddi4+0x124>
 80005dc:	4638      	mov	r0, r7
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xda>
 80005e0:	4637      	mov	r7, r6
 80005e2:	e6e9      	b.n	80003b8 <__udivmoddi4+0xa0>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <new_gc>:
        arr[i] = temp;
    }
}


void new_gc(Gamecube *gc){
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	gc->A = false;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
	gc->B = false;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	705a      	strb	r2, [r3, #1]
	gc->X = false;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2200      	movs	r2, #0
 8000600:	709a      	strb	r2, [r3, #2]
	gc->Y = false;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2200      	movs	r2, #0
 8000606:	70da      	strb	r2, [r3, #3]
	gc->START = false;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2200      	movs	r2, #0
 800060c:	711a      	strb	r2, [r3, #4]
	gc->L = false;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2200      	movs	r2, #0
 8000612:	715a      	strb	r2, [r3, #5]
	gc->R = false;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2200      	movs	r2, #0
 8000618:	719a      	strb	r2, [r3, #6]
	gc->Z = false;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2200      	movs	r2, #0
 800061e:	71da      	strb	r2, [r3, #7]
	gc->D_UP = false;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2200      	movs	r2, #0
 8000624:	721a      	strb	r2, [r3, #8]
	gc->D_LEFT = false;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2200      	movs	r2, #0
 800062a:	729a      	strb	r2, [r3, #10]
	gc->D_RIGHT = false;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2200      	movs	r2, #0
 8000630:	72da      	strb	r2, [r3, #11]
	gc->D_UP = false;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2200      	movs	r2, #0
 8000636:	721a      	strb	r2, [r3, #8]

	gc->JOYSTICK_X = 0;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
	gc->JOYSTICK_Y = 0;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
	gc->C_STICK_X = 0;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
	gc->C_STICK_Y = 0;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
	gc->LEFT_TRIGGER = 0;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
	gc->RIGHT_TRIGGER = 0;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

	gc->data_pin = 0;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2200      	movs	r2, #0
 8000660:	625a      	str	r2, [r3, #36]	; 0x24
	gc->_rumble = false;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2200      	movs	r2, #0
 8000666:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
	...

08000678 <print_id>:
int get_device_id(Gamecube *gc){
	return 0x0900;
}


void print_id(Gamecube *gc){
 8000678:	b5b0      	push	{r4, r5, r7, lr}
 800067a:	b090      	sub	sp, #64	; 0x40
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	char dev_id[50];
	sprintf(dev_id, "This device has an ID of 0900");
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	4a08      	ldr	r2, [pc, #32]	; (80006a8 <print_id+0x30>)
 8000686:	461c      	mov	r4, r3
 8000688:	4615      	mov	r5, r2
 800068a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000692:	c407      	stmia	r4!, {r0, r1, r2}
 8000694:	8023      	strh	r3, [r4, #0]
	TX4_print(dev_id);
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	4618      	mov	r0, r3
 800069c:	f000 f992 	bl	80009c4 <TX4_print>
}
 80006a0:	bf00      	nop
 80006a2:	3740      	adds	r7, #64	; 0x40
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bdb0      	pop	{r4, r5, r7, pc}
 80006a8:	08006274 	.word	0x08006274

080006ac <main_fn>:
#include "main.h"
#include "app.h"



void main_fn(void){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08c      	sub	sp, #48	; 0x30
 80006b0:	af00      	add	r7, sp, #0
	Gamecube gc;
	new_gc(&gc);
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ff97 	bl	80005e8 <new_gc>
	while (1){

		  // HAL_UART_Transmit(&huart4, (uint8_t*)msg, strlen(msg), 0xFFFF);
		  // TX4_print("Nyanpasu!");
		  print_id(&gc);
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ffdb 	bl	8000678 <print_id>
		  HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 80006c2:	2101      	movs	r1, #1
 80006c4:	4803      	ldr	r0, [pc, #12]	; (80006d4 <main_fn+0x28>)
 80006c6:	f000 fe2a 	bl	800131e <HAL_GPIO_TogglePin>
		  // HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
		  // HAL_GPIO_TogglePin(LED_Y_GPIO_Port, LED_Y_Pin);
		  HAL_Delay(100);
 80006ca:	2064      	movs	r0, #100	; 0x64
 80006cc:	f000 fb4c 	bl	8000d68 <HAL_Delay>
		  print_id(&gc);
 80006d0:	e7f3      	b.n	80006ba <main_fn+0xe>
 80006d2:	bf00      	nop
 80006d4:	58020400 	.word	0x58020400

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006dc:	f000 fab6 	bl	8000c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e0:	f000 f80a 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e4:	f000 f8ec 	bl	80008c0 <MX_GPIO_Init>
  MX_UART4_Init();
 80006e8:	f000 f89e 	bl	8000828 <MX_UART4_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  main_fn();
 80006ec:	f7ff ffde 	bl	80006ac <main_fn>
 80006f0:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b0cc      	sub	sp, #304	; 0x130
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000702:	224c      	movs	r2, #76	; 0x4c
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f005 fda0 	bl	800624c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000710:	2220      	movs	r2, #32
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f005 fd99 	bl	800624c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800071a:	f107 0308 	add.w	r3, r7, #8
 800071e:	4618      	mov	r0, r3
 8000720:	23bc      	movs	r3, #188	; 0xbc
 8000722:	461a      	mov	r2, r3
 8000724:	2100      	movs	r1, #0
 8000726:	f005 fd91 	bl	800624c <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800072a:	2002      	movs	r0, #2
 800072c:	f000 fe12 	bl	8001354 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	4b3a      	ldr	r3, [pc, #232]	; (8000820 <SystemClock_Config+0x128>)
 8000738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800073a:	4a39      	ldr	r2, [pc, #228]	; (8000820 <SystemClock_Config+0x128>)
 800073c:	f023 0301 	bic.w	r3, r3, #1
 8000740:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000742:	4b37      	ldr	r3, [pc, #220]	; (8000820 <SystemClock_Config+0x128>)
 8000744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000746:	f003 0201 	and.w	r2, r3, #1
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	4b35      	ldr	r3, [pc, #212]	; (8000824 <SystemClock_Config+0x12c>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000756:	4a33      	ldr	r2, [pc, #204]	; (8000824 <SystemClock_Config+0x12c>)
 8000758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075c:	6193      	str	r3, [r2, #24]
 800075e:	4b31      	ldr	r3, [pc, #196]	; (8000824 <SystemClock_Config+0x12c>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800076e:	bf00      	nop
 8000770:	4b2c      	ldr	r3, [pc, #176]	; (8000824 <SystemClock_Config+0x12c>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800077c:	d1f8      	bne.n	8000770 <SystemClock_Config+0x78>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077e:	2302      	movs	r3, #2
 8000780:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000784:	2301      	movs	r3, #1
 8000786:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078a:	2320      	movs	r3, #32
 800078c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000790:	2300      	movs	r3, #0
 8000792:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000796:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fe12 	bl	80013c4 <HAL_RCC_OscConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80007a6:	f000 f92b 	bl	8000a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007aa:	233f      	movs	r3, #63	; 0x3f
 80007ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007b0:	2300      	movs	r3, #0
 80007b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007da:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007de:	2100      	movs	r1, #0
 80007e0:	4618      	mov	r0, r3
 80007e2:	f001 f9a7 	bl	8001b34 <HAL_RCC_ClockConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80007ec:	f000 f908 	bl	8000a00 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80007f0:	f107 0308 	add.w	r3, r7, #8
 80007f4:	2202      	movs	r2, #2
 80007f6:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	2200      	movs	r2, #0
 80007fe:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000800:	f107 0308 	add.w	r3, r7, #8
 8000804:	4618      	mov	r0, r3
 8000806:	f001 fcf3 	bl	80021f0 <HAL_RCCEx_PeriphCLKConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000810:	f000 f8f6 	bl	8000a00 <Error_Handler>
  }
}
 8000814:	bf00      	nop
 8000816:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	58000400 	.word	0x58000400
 8000824:	58024800 	.word	0x58024800

08000828 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800082c:	4b22      	ldr	r3, [pc, #136]	; (80008b8 <MX_UART4_Init+0x90>)
 800082e:	4a23      	ldr	r2, [pc, #140]	; (80008bc <MX_UART4_Init+0x94>)
 8000830:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000832:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <MX_UART4_Init+0x90>)
 8000834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000838:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <MX_UART4_Init+0x90>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <MX_UART4_Init+0x90>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <MX_UART4_Init+0x90>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <MX_UART4_Init+0x90>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <MX_UART4_Init+0x90>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MX_UART4_Init+0x90>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085e:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <MX_UART4_Init+0x90>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_UART4_Init+0x90>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <MX_UART4_Init+0x90>)
 800086c:	2200      	movs	r2, #0
 800086e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000870:	4811      	ldr	r0, [pc, #68]	; (80008b8 <MX_UART4_Init+0x90>)
 8000872:	f002 ffdb 	bl	800382c <HAL_UART_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800087c:	f000 f8c0 	bl	8000a00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000880:	2100      	movs	r1, #0
 8000882:	480d      	ldr	r0, [pc, #52]	; (80008b8 <MX_UART4_Init+0x90>)
 8000884:	f005 fbd9 	bl	800603a <HAL_UARTEx_SetTxFifoThreshold>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800088e:	f000 f8b7 	bl	8000a00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000892:	2100      	movs	r1, #0
 8000894:	4808      	ldr	r0, [pc, #32]	; (80008b8 <MX_UART4_Init+0x90>)
 8000896:	f005 fc0e 	bl	80060b6 <HAL_UARTEx_SetRxFifoThreshold>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80008a0:	f000 f8ae 	bl	8000a00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80008a4:	4804      	ldr	r0, [pc, #16]	; (80008b8 <MX_UART4_Init+0x90>)
 80008a6:	f005 fb8f 	bl	8005fc8 <HAL_UARTEx_DisableFifoMode>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80008b0:	f000 f8a6 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	2400002c 	.word	0x2400002c
 80008bc:	40004c00 	.word	0x40004c00

080008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	4b37      	ldr	r3, [pc, #220]	; (80009b4 <MX_GPIO_Init+0xf4>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008dc:	4a35      	ldr	r2, [pc, #212]	; (80009b4 <MX_GPIO_Init+0xf4>)
 80008de:	f043 0302 	orr.w	r3, r3, #2
 80008e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e6:	4b33      	ldr	r3, [pc, #204]	; (80009b4 <MX_GPIO_Init+0xf4>)
 80008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ec:	f003 0302 	and.w	r3, r3, #2
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f4:	4b2f      	ldr	r3, [pc, #188]	; (80009b4 <MX_GPIO_Init+0xf4>)
 80008f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fa:	4a2e      	ldr	r2, [pc, #184]	; (80009b4 <MX_GPIO_Init+0xf4>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000904:	4b2b      	ldr	r3, [pc, #172]	; (80009b4 <MX_GPIO_Init+0xf4>)
 8000906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000912:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <MX_GPIO_Init+0xf4>)
 8000914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000918:	4a26      	ldr	r2, [pc, #152]	; (80009b4 <MX_GPIO_Init+0xf4>)
 800091a:	f043 0310 	orr.w	r3, r3, #16
 800091e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000922:	4b24      	ldr	r3, [pc, #144]	; (80009b4 <MX_GPIO_Init+0xf4>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000928:	f003 0310 	and.w	r3, r3, #16
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f244 0101 	movw	r1, #16385	; 0x4001
 8000936:	4820      	ldr	r0, [pc, #128]	; (80009b8 <MX_GPIO_Init+0xf8>)
 8000938:	f000 fcd8 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIG_GC_GPIO_Port, DIG_GC_Pin, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000942:	481e      	ldr	r0, [pc, #120]	; (80009bc <MX_GPIO_Init+0xfc>)
 8000944:	f000 fcd2 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	2102      	movs	r1, #2
 800094c:	481c      	ldr	r0, [pc, #112]	; (80009c0 <MX_GPIO_Init+0x100>)
 800094e:	f000 fccd 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8000952:	f244 0301 	movw	r3, #16385	; 0x4001
 8000956:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	4619      	mov	r1, r3
 800096a:	4813      	ldr	r0, [pc, #76]	; (80009b8 <MX_GPIO_Init+0xf8>)
 800096c:	f000 fb0e 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIG_GC_Pin */
  GPIO_InitStruct.Pin = DIG_GC_Pin;
 8000970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000974:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIG_GC_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	4619      	mov	r1, r3
 8000988:	480c      	ldr	r0, [pc, #48]	; (80009bc <MX_GPIO_Init+0xfc>)
 800098a:	f000 faff 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Y_Pin */
  GPIO_InitStruct.Pin = LED_Y_Pin;
 800098e:	2302      	movs	r3, #2
 8000990:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_Y_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	4619      	mov	r1, r3
 80009a4:	4806      	ldr	r0, [pc, #24]	; (80009c0 <MX_GPIO_Init+0x100>)
 80009a6:	f000 faf1 	bl	8000f8c <HAL_GPIO_Init>

}
 80009aa:	bf00      	nop
 80009ac:	3720      	adds	r7, #32
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	58024400 	.word	0x58024400
 80009b8:	58020400 	.word	0x58020400
 80009bc:	58020800 	.word	0x58020800
 80009c0:	58021000 	.word	0x58021000

080009c4 <TX4_print>:

/* USER CODE BEGIN 4 */
void TX4_print(char* msg){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*)msg, strlen(msg), 0xFFFF);
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f7ff fc83 	bl	80002d8 <strlen>
 80009d2:	4603      	mov	r3, r0
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	4806      	ldr	r0, [pc, #24]	; (80009f8 <TX4_print+0x34>)
 80009de:	f002 ff75 	bl	80038cc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*)"\r\n", strlen("\r\n"), 0xFFFF);
 80009e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009e6:	2202      	movs	r2, #2
 80009e8:	4904      	ldr	r1, [pc, #16]	; (80009fc <TX4_print+0x38>)
 80009ea:	4803      	ldr	r0, [pc, #12]	; (80009f8 <TX4_print+0x34>)
 80009ec:	f002 ff6e 	bl	80038cc <HAL_UART_Transmit>
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	2400002c 	.word	0x2400002c
 80009fc:	08006294 	.word	0x08006294

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
	...

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <HAL_MspInit+0x30>)
 8000a18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a1c:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <HAL_MspInit+0x30>)
 8000a1e:	f043 0302 	orr.w	r3, r3, #2
 8000a22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_MspInit+0x30>)
 8000a28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a2c:	f003 0302 	and.w	r3, r3, #2
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	58024400 	.word	0x58024400

08000a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a1a      	ldr	r2, [pc, #104]	; (8000acc <HAL_UART_MspInit+0x88>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d12e      	bne.n	8000ac4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000a66:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <HAL_UART_MspInit+0x8c>)
 8000a68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a6c:	4a18      	ldr	r2, [pc, #96]	; (8000ad0 <HAL_UART_MspInit+0x8c>)
 8000a6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000a76:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <HAL_UART_MspInit+0x8c>)
 8000a78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_UART_MspInit+0x8c>)
 8000a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8a:	4a11      	ldr	r2, [pc, #68]	; (8000ad0 <HAL_UART_MspInit+0x8c>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <HAL_UART_MspInit+0x8c>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = TX_4_Pin|RX_4_Pin;
 8000aa2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ab4:	2308      	movs	r3, #8
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <HAL_UART_MspInit+0x90>)
 8000ac0:	f000 fa64 	bl	8000f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000ac4:	bf00      	nop
 8000ac6:	3728      	adds	r7, #40	; 0x28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40004c00 	.word	0x40004c00
 8000ad0:	58024400 	.word	0x58024400
 8000ad4:	58020800 	.word	0x58020800

08000ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <HardFault_Handler+0x4>

08000aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <MemManage_Handler+0x4>

08000af2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <BusFault_Handler+0x4>

08000af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <UsageFault_Handler+0x4>

08000afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2c:	f000 f8fc 	bl	8000d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b38:	4b29      	ldr	r3, [pc, #164]	; (8000be0 <SystemInit+0xac>)
 8000b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b3e:	4a28      	ldr	r2, [pc, #160]	; (8000be0 <SystemInit+0xac>)
 8000b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b48:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <SystemInit+0xb0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a25      	ldr	r2, [pc, #148]	; (8000be4 <SystemInit+0xb0>)
 8000b4e:	f043 0301 	orr.w	r3, r3, #1
 8000b52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b54:	4b23      	ldr	r3, [pc, #140]	; (8000be4 <SystemInit+0xb0>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b5a:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <SystemInit+0xb0>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	4921      	ldr	r1, [pc, #132]	; (8000be4 <SystemInit+0xb0>)
 8000b60:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <SystemInit+0xb4>)
 8000b62:	4013      	ands	r3, r2
 8000b64:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b66:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <SystemInit+0xb0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b6c:	4b1d      	ldr	r3, [pc, #116]	; (8000be4 <SystemInit+0xb0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b72:	4b1c      	ldr	r3, [pc, #112]	; (8000be4 <SystemInit+0xb0>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000b78:	4b1a      	ldr	r3, [pc, #104]	; (8000be4 <SystemInit+0xb0>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8000b7e:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <SystemInit+0xb0>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000b84:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <SystemInit+0xb0>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b8a:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <SystemInit+0xb0>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <SystemInit+0xb0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b96:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <SystemInit+0xb0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <SystemInit+0xb0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <SystemInit+0xb0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <SystemInit+0xb0>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <SystemInit+0xb0>)
 8000bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bb2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <SystemInit+0xb0>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <SystemInit+0xb8>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <SystemInit+0xbc>)
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000bc6:	d202      	bcs.n	8000bce <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <SystemInit+0xc0>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bce:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <SystemInit+0xac>)
 8000bd0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bd4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00
 8000be4:	58024400 	.word	0x58024400
 8000be8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000bec:	5c001000 	.word	0x5c001000
 8000bf0:	ffff0000 	.word	0xffff0000
 8000bf4:	51008108 	.word	0x51008108

08000bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000bfc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bfe:	e003      	b.n	8000c08 <LoopCopyDataInit>

08000c00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c06:	3104      	adds	r1, #4

08000c08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c08:	480b      	ldr	r0, [pc, #44]	; (8000c38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c10:	d3f6      	bcc.n	8000c00 <CopyDataInit>
  ldr  r2, =_sbss
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c14:	e002      	b.n	8000c1c <LoopFillZerobss>

08000c16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c18:	f842 3b04 	str.w	r3, [r2], #4

08000c1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c20:	d3f9      	bcc.n	8000c16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c22:	f7ff ff87 	bl	8000b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c26:	f005 faed 	bl	8006204 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2a:	f7ff fd55 	bl	80006d8 <main>
  bx  lr    
 8000c2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c30:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000c34:	080062c8 	.word	0x080062c8
  ldr  r0, =_sdata
 8000c38:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000c3c:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8000c40:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 8000c44:	240000bc 	.word	0x240000bc

08000c48 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC3_IRQHandler>
	...

08000c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c50:	2003      	movs	r0, #3
 8000c52:	f000 f969 	bl	8000f28 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c56:	f001 f911 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8000c5a:	4601      	mov	r1, r0
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <HAL_Init+0x60>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	f003 030f 	and.w	r3, r3, #15
 8000c66:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <HAL_Init+0x64>)
 8000c68:	5cd3      	ldrb	r3, [r2, r3]
 8000c6a:	f003 031f 	and.w	r3, r3, #31
 8000c6e:	fa21 f303 	lsr.w	r3, r1, r3
 8000c72:	4a10      	ldr	r2, [pc, #64]	; (8000cb4 <HAL_Init+0x68>)
 8000c74:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <HAL_Init+0x68>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <HAL_Init+0x60>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	490b      	ldr	r1, [pc, #44]	; (8000cb0 <HAL_Init+0x64>)
 8000c84:	5ccb      	ldrb	r3, [r1, r3]
 8000c86:	f003 031f 	and.w	r3, r3, #31
 8000c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <HAL_Init+0x6c>)
 8000c90:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c92:	2000      	movs	r0, #0
 8000c94:	f000 f812 	bl	8000cbc <HAL_InitTick>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e002      	b.n	8000ca8 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca2:	f7ff feb5 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca6:	2300      	movs	r3, #0
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	58024400 	.word	0x58024400
 8000cb0:	080062a8 	.word	0x080062a8
 8000cb4:	24000000 	.word	0x24000000
 8000cb8:	24000004 	.word	0x24000004

08000cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <HAL_InitTick+0x60>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d101      	bne.n	8000cd0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e021      	b.n	8000d14 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000cd0:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <HAL_InitTick+0x64>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <HAL_InitTick+0x60>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 f943 	bl	8000f72 <HAL_SYSTICK_Config>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e00e      	b.n	8000d14 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d80a      	bhi.n	8000d12 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f000 f91b 	bl	8000f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d08:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <HAL_InitTick+0x68>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e000      	b.n	8000d14 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	2400000c 	.word	0x2400000c
 8000d20:	24000000 	.word	0x24000000
 8000d24:	24000008 	.word	0x24000008

08000d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x20>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x24>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <HAL_IncTick+0x24>)
 8000d3a:	6013      	str	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	2400000c 	.word	0x2400000c
 8000d4c:	240000b8 	.word	0x240000b8

08000d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return uwTick;
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <HAL_GetTick+0x14>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	240000b8 	.word	0x240000b8

08000d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d70:	f7ff ffee 	bl	8000d50 <HAL_GetTick>
 8000d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d80:	d005      	beq.n	8000d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <HAL_Delay+0x40>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d8e:	bf00      	nop
 8000d90:	f7ff ffde 	bl	8000d50 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d8f7      	bhi.n	8000d90 <HAL_Delay+0x28>
  {
  }
}
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	2400000c 	.word	0x2400000c

08000dac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <HAL_GetREVID+0x14>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	0c1b      	lsrs	r3, r3, #16
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	5c001000 	.word	0x5c001000

08000dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <__NVIC_SetPriorityGrouping+0x40>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dee:	4313      	orrs	r3, r2
 8000df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df2:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <__NVIC_SetPriorityGrouping+0x40>)
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	60d3      	str	r3, [r2, #12]
}
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00
 8000e08:	05fa0000 	.word	0x05fa0000

08000e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db0a      	blt.n	8000e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	490c      	ldr	r1, [pc, #48]	; (8000e74 <__NVIC_SetPriority+0x4c>)
 8000e42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e50:	e00a      	b.n	8000e68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4908      	ldr	r1, [pc, #32]	; (8000e78 <__NVIC_SetPriority+0x50>)
 8000e58:	88fb      	ldrh	r3, [r7, #6]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	0112      	lsls	r2, r2, #4
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	440b      	add	r3, r1
 8000e66:	761a      	strb	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f1c3 0307 	rsb	r3, r3, #7
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	bf28      	it	cs
 8000e9a:	2304      	movcs	r3, #4
 8000e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d902      	bls.n	8000eac <NVIC_EncodePriority+0x30>
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3b03      	subs	r3, #3
 8000eaa:	e000      	b.n	8000eae <NVIC_EncodePriority+0x32>
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43d9      	mvns	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	4313      	orrs	r3, r2
         );
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	; 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef4:	d301      	bcc.n	8000efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00f      	b.n	8000f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <SysTick_Config+0x40>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f02:	210f      	movs	r1, #15
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f7ff ff8e 	bl	8000e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <SysTick_Config+0x40>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f12:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <SysTick_Config+0x40>)
 8000f14:	2207      	movs	r2, #7
 8000f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	e000e010 	.word	0xe000e010

08000f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ff47 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f4c:	f7ff ff5e 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8000f50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	68b9      	ldr	r1, [r7, #8]
 8000f56:	6978      	ldr	r0, [r7, #20]
 8000f58:	f7ff ff90 	bl	8000e7c <NVIC_EncodePriority>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f62:	4611      	mov	r1, r2
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff5f 	bl	8000e28 <__NVIC_SetPriority>
}
 8000f6a:	bf00      	nop
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ffb2 	bl	8000ee4 <SysTick_Config>
 8000f80:	4603      	mov	r3, r0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b089      	sub	sp, #36	; 0x24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f9a:	4b89      	ldr	r3, [pc, #548]	; (80011c0 <HAL_GPIO_Init+0x234>)
 8000f9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f9e:	e194      	b.n	80012ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 8186 	beq.w	80012c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x3c>
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b12      	cmp	r3, #18
 8000fc6:	d123      	bne.n	8001010 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	08da      	lsrs	r2, r3, #3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3208      	adds	r2, #8
 8000fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	220f      	movs	r2, #15
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	691a      	ldr	r2, [r3, #16]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	08da      	lsrs	r2, r3, #3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3208      	adds	r2, #8
 800100a:	69b9      	ldr	r1, [r7, #24]
 800100c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0203 	and.w	r2, r3, #3
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d00b      	beq.n	8001064 <HAL_GPIO_Init+0xd8>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d007      	beq.n	8001064 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001058:	2b11      	cmp	r3, #17
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b12      	cmp	r3, #18
 8001062:	d130      	bne.n	80010c6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	2203      	movs	r2, #3
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	68da      	ldr	r2, [r3, #12]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800109a:	2201      	movs	r2, #1
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	091b      	lsrs	r3, r3, #4
 80010b0:	f003 0201 	and.w	r2, r3, #1
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 80e0 	beq.w	80012c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001104:	4b2f      	ldr	r3, [pc, #188]	; (80011c4 <HAL_GPIO_Init+0x238>)
 8001106:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800110a:	4a2e      	ldr	r2, [pc, #184]	; (80011c4 <HAL_GPIO_Init+0x238>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001114:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <HAL_GPIO_Init+0x238>)
 8001116:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001122:	4a29      	ldr	r2, [pc, #164]	; (80011c8 <HAL_GPIO_Init+0x23c>)
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	3302      	adds	r3, #2
 800112a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	220f      	movs	r2, #15
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a20      	ldr	r2, [pc, #128]	; (80011cc <HAL_GPIO_Init+0x240>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d052      	beq.n	80011f4 <HAL_GPIO_Init+0x268>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a1f      	ldr	r2, [pc, #124]	; (80011d0 <HAL_GPIO_Init+0x244>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d031      	beq.n	80011ba <HAL_GPIO_Init+0x22e>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a1e      	ldr	r2, [pc, #120]	; (80011d4 <HAL_GPIO_Init+0x248>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d02b      	beq.n	80011b6 <HAL_GPIO_Init+0x22a>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a1d      	ldr	r2, [pc, #116]	; (80011d8 <HAL_GPIO_Init+0x24c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d025      	beq.n	80011b2 <HAL_GPIO_Init+0x226>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a1c      	ldr	r2, [pc, #112]	; (80011dc <HAL_GPIO_Init+0x250>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d01f      	beq.n	80011ae <HAL_GPIO_Init+0x222>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a1b      	ldr	r2, [pc, #108]	; (80011e0 <HAL_GPIO_Init+0x254>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d019      	beq.n	80011aa <HAL_GPIO_Init+0x21e>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a1a      	ldr	r2, [pc, #104]	; (80011e4 <HAL_GPIO_Init+0x258>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d013      	beq.n	80011a6 <HAL_GPIO_Init+0x21a>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a19      	ldr	r2, [pc, #100]	; (80011e8 <HAL_GPIO_Init+0x25c>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d00d      	beq.n	80011a2 <HAL_GPIO_Init+0x216>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a18      	ldr	r2, [pc, #96]	; (80011ec <HAL_GPIO_Init+0x260>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d007      	beq.n	800119e <HAL_GPIO_Init+0x212>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <HAL_GPIO_Init+0x264>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d101      	bne.n	800119a <HAL_GPIO_Init+0x20e>
 8001196:	2309      	movs	r3, #9
 8001198:	e02d      	b.n	80011f6 <HAL_GPIO_Init+0x26a>
 800119a:	230a      	movs	r3, #10
 800119c:	e02b      	b.n	80011f6 <HAL_GPIO_Init+0x26a>
 800119e:	2308      	movs	r3, #8
 80011a0:	e029      	b.n	80011f6 <HAL_GPIO_Init+0x26a>
 80011a2:	2307      	movs	r3, #7
 80011a4:	e027      	b.n	80011f6 <HAL_GPIO_Init+0x26a>
 80011a6:	2306      	movs	r3, #6
 80011a8:	e025      	b.n	80011f6 <HAL_GPIO_Init+0x26a>
 80011aa:	2305      	movs	r3, #5
 80011ac:	e023      	b.n	80011f6 <HAL_GPIO_Init+0x26a>
 80011ae:	2304      	movs	r3, #4
 80011b0:	e021      	b.n	80011f6 <HAL_GPIO_Init+0x26a>
 80011b2:	2303      	movs	r3, #3
 80011b4:	e01f      	b.n	80011f6 <HAL_GPIO_Init+0x26a>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e01d      	b.n	80011f6 <HAL_GPIO_Init+0x26a>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e01b      	b.n	80011f6 <HAL_GPIO_Init+0x26a>
 80011be:	bf00      	nop
 80011c0:	58000080 	.word	0x58000080
 80011c4:	58024400 	.word	0x58024400
 80011c8:	58000400 	.word	0x58000400
 80011cc:	58020000 	.word	0x58020000
 80011d0:	58020400 	.word	0x58020400
 80011d4:	58020800 	.word	0x58020800
 80011d8:	58020c00 	.word	0x58020c00
 80011dc:	58021000 	.word	0x58021000
 80011e0:	58021400 	.word	0x58021400
 80011e4:	58021800 	.word	0x58021800
 80011e8:	58021c00 	.word	0x58021c00
 80011ec:	58022000 	.word	0x58022000
 80011f0:	58022400 	.word	0x58022400
 80011f4:	2300      	movs	r3, #0
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	f002 0203 	and.w	r2, r2, #3
 80011fc:	0092      	lsls	r2, r2, #2
 80011fe:	4093      	lsls	r3, r2
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001206:	4938      	ldr	r1, [pc, #224]	; (80012e8 <HAL_GPIO_Init+0x35c>)
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	3302      	adds	r3, #2
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800128e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80012bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	3301      	adds	r3, #1
 80012c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	fa22 f303 	lsr.w	r3, r2, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f47f ae63 	bne.w	8000fa0 <HAL_GPIO_Init+0x14>
  }
}
 80012da:	bf00      	nop
 80012dc:	3724      	adds	r7, #36	; 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	58000400 	.word	0x58000400

080012ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]
 80012f8:	4613      	mov	r3, r2
 80012fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012fc:	787b      	ldrb	r3, [r7, #1]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001308:	e003      	b.n	8001312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	041a      	lsls	r2, r3, #16
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	619a      	str	r2, [r3, #24]
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	460b      	mov	r3, r1
 8001328:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	695a      	ldr	r2, [r3, #20]
 800132e:	887b      	ldrh	r3, [r7, #2]
 8001330:	401a      	ands	r2, r3
 8001332:	887b      	ldrh	r3, [r7, #2]
 8001334:	429a      	cmp	r2, r3
 8001336:	d104      	bne.n	8001342 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001338:	887b      	ldrh	r3, [r7, #2]
 800133a:	041a      	lsls	r2, r3, #16
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001340:	e002      	b.n	8001348 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001342:	887a      	ldrh	r2, [r7, #2]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	619a      	str	r2, [r3, #24]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 800135c:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <HAL_PWREx_ConfigSupply+0x6c>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	2b04      	cmp	r3, #4
 8001366:	d008      	beq.n	800137a <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001368:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_PWREx_ConfigSupply+0x6c>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	429a      	cmp	r2, r3
 8001374:	d001      	beq.n	800137a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e01d      	b.n	80013b6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <HAL_PWREx_ConfigSupply+0x6c>)
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	f023 0207 	bic.w	r2, r3, #7
 8001382:	490f      	ldr	r1, [pc, #60]	; (80013c0 <HAL_PWREx_ConfigSupply+0x6c>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4313      	orrs	r3, r2
 8001388:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800138a:	f7ff fce1 	bl	8000d50 <HAL_GetTick>
 800138e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8001390:	e009      	b.n	80013a6 <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8001392:	f7ff fcdd 	bl	8000d50 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013a0:	d901      	bls.n	80013a6 <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e007      	b.n	80013b6 <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_PWREx_ConfigSupply+0x6c>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013b2:	d1ee      	bne.n	8001392 <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	58024800 	.word	0x58024800

080013c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e3a4      	b.n	8001b20 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f000 8087 	beq.w	80014f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013e4:	4b9a      	ldr	r3, [pc, #616]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013ee:	4b98      	ldr	r3, [pc, #608]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 80013f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f2:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80013f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f6:	2b10      	cmp	r3, #16
 80013f8:	d007      	beq.n	800140a <HAL_RCC_OscConfig+0x46>
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	2b18      	cmp	r3, #24
 80013fe:	d110      	bne.n	8001422 <HAL_RCC_OscConfig+0x5e>
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d10b      	bne.n	8001422 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140a:	4b91      	ldr	r3, [pc, #580]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d06c      	beq.n	80014f0 <HAL_RCC_OscConfig+0x12c>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d168      	bne.n	80014f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e37e      	b.n	8001b20 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800142a:	d106      	bne.n	800143a <HAL_RCC_OscConfig+0x76>
 800142c:	4b88      	ldr	r3, [pc, #544]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a87      	ldr	r2, [pc, #540]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 8001432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	e02e      	b.n	8001498 <HAL_RCC_OscConfig+0xd4>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10c      	bne.n	800145c <HAL_RCC_OscConfig+0x98>
 8001442:	4b83      	ldr	r3, [pc, #524]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a82      	ldr	r2, [pc, #520]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 8001448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	4b80      	ldr	r3, [pc, #512]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a7f      	ldr	r2, [pc, #508]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 8001454:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	e01d      	b.n	8001498 <HAL_RCC_OscConfig+0xd4>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001464:	d10c      	bne.n	8001480 <HAL_RCC_OscConfig+0xbc>
 8001466:	4b7a      	ldr	r3, [pc, #488]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a79      	ldr	r2, [pc, #484]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 800146c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	4b77      	ldr	r3, [pc, #476]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a76      	ldr	r2, [pc, #472]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 8001478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	e00b      	b.n	8001498 <HAL_RCC_OscConfig+0xd4>
 8001480:	4b73      	ldr	r3, [pc, #460]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a72      	ldr	r2, [pc, #456]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 8001486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b70      	ldr	r3, [pc, #448]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a6f      	ldr	r2, [pc, #444]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 8001492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d013      	beq.n	80014c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a0:	f7ff fc56 	bl	8000d50 <HAL_GetTick>
 80014a4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014a8:	f7ff fc52 	bl	8000d50 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b64      	cmp	r3, #100	; 0x64
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e332      	b.n	8001b20 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014ba:	4b65      	ldr	r3, [pc, #404]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCC_OscConfig+0xe4>
 80014c6:	e014      	b.n	80014f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c8:	f7ff fc42 	bl	8000d50 <HAL_GetTick>
 80014cc:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014d0:	f7ff fc3e 	bl	8000d50 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b64      	cmp	r3, #100	; 0x64
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e31e      	b.n	8001b20 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014e2:	4b5b      	ldr	r3, [pc, #364]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0x10c>
 80014ee:	e000      	b.n	80014f2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 80b0 	beq.w	8001660 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001500:	4b53      	ldr	r3, [pc, #332]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001508:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800150a:	4b51      	ldr	r3, [pc, #324]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 800150c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d007      	beq.n	8001526 <HAL_RCC_OscConfig+0x162>
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	2b18      	cmp	r3, #24
 800151a:	d149      	bne.n	80015b0 <HAL_RCC_OscConfig+0x1ec>
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d144      	bne.n	80015b0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001526:	4b4a      	ldr	r3, [pc, #296]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	2b00      	cmp	r3, #0
 8001530:	d005      	beq.n	800153e <HAL_RCC_OscConfig+0x17a>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e2f0      	b.n	8001b20 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800153e:	4b44      	ldr	r3, [pc, #272]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 0219 	bic.w	r2, r3, #25
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	4941      	ldr	r1, [pc, #260]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 800154c:	4313      	orrs	r3, r2
 800154e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001550:	f7ff fbfe 	bl	8000d50 <HAL_GetTick>
 8001554:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001558:	f7ff fbfa 	bl	8000d50 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e2da      	b.n	8001b20 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800156a:	4b39      	ldr	r3, [pc, #228]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f0      	beq.n	8001558 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001576:	f7ff fc19 	bl	8000dac <HAL_GetREVID>
 800157a:	4602      	mov	r2, r0
 800157c:	f241 0303 	movw	r3, #4099	; 0x1003
 8001580:	429a      	cmp	r2, r3
 8001582:	d80a      	bhi.n	800159a <HAL_RCC_OscConfig+0x1d6>
 8001584:	4b32      	ldr	r3, [pc, #200]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	031b      	lsls	r3, r3, #12
 8001592:	492f      	ldr	r1, [pc, #188]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 8001594:	4313      	orrs	r3, r2
 8001596:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001598:	e062      	b.n	8001660 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159a:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	061b      	lsls	r3, r3, #24
 80015a8:	4929      	ldr	r1, [pc, #164]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015ae:	e057      	b.n	8001660 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d038      	beq.n	800162a <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015b8:	4b25      	ldr	r3, [pc, #148]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f023 0219 	bic.w	r2, r3, #25
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	4922      	ldr	r1, [pc, #136]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ca:	f7ff fbc1 	bl	8000d50 <HAL_GetTick>
 80015ce:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015d2:	f7ff fbbd 	bl	8000d50 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e29d      	b.n	8001b20 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0f0      	beq.n	80015d2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f0:	f7ff fbdc 	bl	8000dac <HAL_GetREVID>
 80015f4:	4602      	mov	r2, r0
 80015f6:	f241 0303 	movw	r3, #4099	; 0x1003
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d80a      	bhi.n	8001614 <HAL_RCC_OscConfig+0x250>
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	031b      	lsls	r3, r3, #12
 800160c:	4910      	ldr	r1, [pc, #64]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 800160e:	4313      	orrs	r3, r2
 8001610:	604b      	str	r3, [r1, #4]
 8001612:	e025      	b.n	8001660 <HAL_RCC_OscConfig+0x29c>
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	061b      	lsls	r3, r3, #24
 8001622:	490b      	ldr	r1, [pc, #44]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
 8001628:	e01a      	b.n	8001660 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a08      	ldr	r2, [pc, #32]	; (8001650 <HAL_RCC_OscConfig+0x28c>)
 8001630:	f023 0301 	bic.w	r3, r3, #1
 8001634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001636:	f7ff fb8b 	bl	8000d50 <HAL_GetTick>
 800163a:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800163c:	e00a      	b.n	8001654 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800163e:	f7ff fb87 	bl	8000d50 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d903      	bls.n	8001654 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e267      	b.n	8001b20 <HAL_RCC_OscConfig+0x75c>
 8001650:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001654:	4ba0      	ldr	r3, [pc, #640]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1ee      	bne.n	800163e <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0310 	and.w	r3, r3, #16
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 808f 	beq.w	800178c <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800166e:	4b9a      	ldr	r3, [pc, #616]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001676:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001678:	4b97      	ldr	r3, [pc, #604]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	2b08      	cmp	r3, #8
 8001682:	d007      	beq.n	8001694 <HAL_RCC_OscConfig+0x2d0>
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	2b18      	cmp	r3, #24
 8001688:	d12d      	bne.n	80016e6 <HAL_RCC_OscConfig+0x322>
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	2b01      	cmp	r3, #1
 8001692:	d128      	bne.n	80016e6 <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001694:	4b90      	ldr	r3, [pc, #576]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <HAL_RCC_OscConfig+0x2e8>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	2b80      	cmp	r3, #128	; 0x80
 80016a6:	d001      	beq.n	80016ac <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e239      	b.n	8001b20 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016ac:	f7ff fb7e 	bl	8000dac <HAL_GetREVID>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f241 0303 	movw	r3, #4099	; 0x1003
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d80a      	bhi.n	80016d0 <HAL_RCC_OscConfig+0x30c>
 80016ba:	4b87      	ldr	r3, [pc, #540]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	069b      	lsls	r3, r3, #26
 80016c8:	4983      	ldr	r1, [pc, #524]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016ce:	e05d      	b.n	800178c <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016d0:	4b81      	ldr	r3, [pc, #516]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	061b      	lsls	r3, r3, #24
 80016de:	497e      	ldr	r1, [pc, #504]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016e4:	e052      	b.n	800178c <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d035      	beq.n	800175a <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80016ee:	4b7a      	ldr	r3, [pc, #488]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a79      	ldr	r2, [pc, #484]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 80016f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fa:	f7ff fb29 	bl	8000d50 <HAL_GetTick>
 80016fe:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001702:	f7ff fb25 	bl	8000d50 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e205      	b.n	8001b20 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001714:	4b70      	ldr	r3, [pc, #448]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001720:	f7ff fb44 	bl	8000dac <HAL_GetREVID>
 8001724:	4602      	mov	r2, r0
 8001726:	f241 0303 	movw	r3, #4099	; 0x1003
 800172a:	429a      	cmp	r2, r3
 800172c:	d80a      	bhi.n	8001744 <HAL_RCC_OscConfig+0x380>
 800172e:	4b6a      	ldr	r3, [pc, #424]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	069b      	lsls	r3, r3, #26
 800173c:	4966      	ldr	r1, [pc, #408]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 800173e:	4313      	orrs	r3, r2
 8001740:	604b      	str	r3, [r1, #4]
 8001742:	e023      	b.n	800178c <HAL_RCC_OscConfig+0x3c8>
 8001744:	4b64      	ldr	r3, [pc, #400]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	061b      	lsls	r3, r3, #24
 8001752:	4961      	ldr	r1, [pc, #388]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 8001754:	4313      	orrs	r3, r2
 8001756:	60cb      	str	r3, [r1, #12]
 8001758:	e018      	b.n	800178c <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800175a:	4b5f      	ldr	r3, [pc, #380]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a5e      	ldr	r2, [pc, #376]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 8001760:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001766:	f7ff faf3 	bl	8000d50 <HAL_GetTick>
 800176a:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800176e:	f7ff faef 	bl	8000d50 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e1cf      	b.n	8001b20 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001780:	4b55      	ldr	r3, [pc, #340]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1f0      	bne.n	800176e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	2b00      	cmp	r3, #0
 8001796:	d036      	beq.n	8001806 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d019      	beq.n	80017d4 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a0:	4b4d      	ldr	r3, [pc, #308]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 80017a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017a4:	4a4c      	ldr	r2, [pc, #304]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ac:	f7ff fad0 	bl	8000d50 <HAL_GetTick>
 80017b0:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b4:	f7ff facc 	bl	8000d50 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e1ac      	b.n	8001b20 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017c6:	4b44      	ldr	r3, [pc, #272]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 80017c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0x3f0>
 80017d2:	e018      	b.n	8001806 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d4:	4b40      	ldr	r3, [pc, #256]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 80017d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017d8:	4a3f      	ldr	r2, [pc, #252]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 80017da:	f023 0301 	bic.w	r3, r3, #1
 80017de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e0:	f7ff fab6 	bl	8000d50 <HAL_GetTick>
 80017e4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e8:	f7ff fab2 	bl	8000d50 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e192      	b.n	8001b20 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017fa:	4b37      	ldr	r3, [pc, #220]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 80017fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0320 	and.w	r3, r3, #32
 800180e:	2b00      	cmp	r3, #0
 8001810:	d036      	beq.n	8001880 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d019      	beq.n	800184e <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800181a:	4b2f      	ldr	r3, [pc, #188]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a2e      	ldr	r2, [pc, #184]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 8001820:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001824:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001826:	f7ff fa93 	bl	8000d50 <HAL_GetTick>
 800182a:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800182e:	f7ff fa8f 	bl	8000d50 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e16f      	b.n	8001b20 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001840:	4b25      	ldr	r3, [pc, #148]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x46a>
 800184c:	e018      	b.n	8001880 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800184e:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a21      	ldr	r2, [pc, #132]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 8001854:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001858:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800185a:	f7ff fa79 	bl	8000d50 <HAL_GetTick>
 800185e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001862:	f7ff fa75 	bl	8000d50 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e155      	b.n	8001b20 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001874:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f0      	bne.n	8001862 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 8086 	beq.w	800199a <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800188e:	4b13      	ldr	r3, [pc, #76]	; (80018dc <HAL_RCC_OscConfig+0x518>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a12      	ldr	r2, [pc, #72]	; (80018dc <HAL_RCC_OscConfig+0x518>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800189a:	f7ff fa59 	bl	8000d50 <HAL_GetTick>
 800189e:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80018a2:	f7ff fa55 	bl	8000d50 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b64      	cmp	r3, #100	; 0x64
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e135      	b.n	8001b20 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_RCC_OscConfig+0x518>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d10b      	bne.n	80018e0 <HAL_RCC_OscConfig+0x51c>
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 80018ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018cc:	4a02      	ldr	r2, [pc, #8]	; (80018d8 <HAL_RCC_OscConfig+0x514>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6713      	str	r3, [r2, #112]	; 0x70
 80018d4:	e032      	b.n	800193c <HAL_RCC_OscConfig+0x578>
 80018d6:	bf00      	nop
 80018d8:	58024400 	.word	0x58024400
 80018dc:	58024800 	.word	0x58024800
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d10c      	bne.n	8001902 <HAL_RCC_OscConfig+0x53e>
 80018e8:	4b8f      	ldr	r3, [pc, #572]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 80018ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ec:	4a8e      	ldr	r2, [pc, #568]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	6713      	str	r3, [r2, #112]	; 0x70
 80018f4:	4b8c      	ldr	r3, [pc, #560]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 80018f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f8:	4a8b      	ldr	r2, [pc, #556]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 80018fa:	f023 0304 	bic.w	r3, r3, #4
 80018fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001900:	e01c      	b.n	800193c <HAL_RCC_OscConfig+0x578>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2b05      	cmp	r3, #5
 8001908:	d10c      	bne.n	8001924 <HAL_RCC_OscConfig+0x560>
 800190a:	4b87      	ldr	r3, [pc, #540]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 800190c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190e:	4a86      	ldr	r2, [pc, #536]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	6713      	str	r3, [r2, #112]	; 0x70
 8001916:	4b84      	ldr	r3, [pc, #528]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191a:	4a83      	ldr	r2, [pc, #524]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6713      	str	r3, [r2, #112]	; 0x70
 8001922:	e00b      	b.n	800193c <HAL_RCC_OscConfig+0x578>
 8001924:	4b80      	ldr	r3, [pc, #512]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001928:	4a7f      	ldr	r2, [pc, #508]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 800192a:	f023 0301 	bic.w	r3, r3, #1
 800192e:	6713      	str	r3, [r2, #112]	; 0x70
 8001930:	4b7d      	ldr	r3, [pc, #500]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001934:	4a7c      	ldr	r2, [pc, #496]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001936:	f023 0304 	bic.w	r3, r3, #4
 800193a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d015      	beq.n	8001970 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001944:	f7ff fa04 	bl	8000d50 <HAL_GetTick>
 8001948:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800194a:	e00a      	b.n	8001962 <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800194c:	f7ff fa00 	bl	8000d50 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	; 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e0de      	b.n	8001b20 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001962:	4b71      	ldr	r3, [pc, #452]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0ee      	beq.n	800194c <HAL_RCC_OscConfig+0x588>
 800196e:	e014      	b.n	800199a <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001970:	f7ff f9ee 	bl	8000d50 <HAL_GetTick>
 8001974:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001976:	e00a      	b.n	800198e <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001978:	f7ff f9ea 	bl	8000d50 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	f241 3288 	movw	r2, #5000	; 0x1388
 8001986:	4293      	cmp	r3, r2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e0c8      	b.n	8001b20 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800198e:	4b66      	ldr	r3, [pc, #408]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1ee      	bne.n	8001978 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 80bd 	beq.w	8001b1e <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80019a4:	4b60      	ldr	r3, [pc, #384]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019ac:	2b18      	cmp	r3, #24
 80019ae:	f000 80b4 	beq.w	8001b1a <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	f040 8095 	bne.w	8001ae6 <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019bc:	4b5a      	ldr	r3, [pc, #360]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a59      	ldr	r2, [pc, #356]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 80019c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c8:	f7ff f9c2 	bl	8000d50 <HAL_GetTick>
 80019cc:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d0:	f7ff f9be 	bl	8000d50 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e09e      	b.n	8001b20 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019e2:	4b51      	ldr	r3, [pc, #324]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ee:	4b4e      	ldr	r3, [pc, #312]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 80019f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019f2:	4b4e      	ldr	r3, [pc, #312]	; (8001b2c <HAL_RCC_OscConfig+0x768>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019fe:	0112      	lsls	r2, r2, #4
 8001a00:	430a      	orrs	r2, r1
 8001a02:	4949      	ldr	r1, [pc, #292]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	628b      	str	r3, [r1, #40]	; 0x28
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a16:	3b01      	subs	r3, #1
 8001a18:	025b      	lsls	r3, r3, #9
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a22:	3b01      	subs	r3, #1
 8001a24:	041b      	lsls	r3, r3, #16
 8001a26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a30:	3b01      	subs	r3, #1
 8001a32:	061b      	lsls	r3, r3, #24
 8001a34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001a38:	493b      	ldr	r1, [pc, #236]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001a3e:	4b3a      	ldr	r3, [pc, #232]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a42:	4a39      	ldr	r2, [pc, #228]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001a44:	f023 0301 	bic.w	r3, r3, #1
 8001a48:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a4a:	4b37      	ldr	r3, [pc, #220]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a4e:	4b38      	ldr	r3, [pc, #224]	; (8001b30 <HAL_RCC_OscConfig+0x76c>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a56:	00d2      	lsls	r2, r2, #3
 8001a58:	4933      	ldr	r1, [pc, #204]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001a5e:	4b32      	ldr	r3, [pc, #200]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a62:	f023 020c 	bic.w	r2, r3, #12
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	492f      	ldr	r1, [pc, #188]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001a70:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	f023 0202 	bic.w	r2, r3, #2
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7c:	492a      	ldr	r1, [pc, #168]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a82:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	4a28      	ldr	r2, [pc, #160]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a8e:	4b26      	ldr	r3, [pc, #152]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a92:	4a25      	ldr	r2, [pc, #148]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001a9a:	4b23      	ldr	r3, [pc, #140]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9e:	4a22      	ldr	r2, [pc, #136]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001aa6:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	4a1f      	ldr	r2, [pc, #124]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ab2:	4b1d      	ldr	r3, [pc, #116]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a1c      	ldr	r2, [pc, #112]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001ab8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abe:	f7ff f947 	bl	8000d50 <HAL_GetTick>
 8001ac2:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac6:	f7ff f943 	bl	8000d50 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e023      	b.n	8001b20 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ad8:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0f0      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x702>
 8001ae4:	e01b      	b.n	8001b1e <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a0f      	ldr	r2, [pc, #60]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001aec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001af0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af2:	f7ff f92d 	bl	8000d50 <HAL_GetTick>
 8001af6:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001afa:	f7ff f929 	bl	8000d50 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e009      	b.n	8001b20 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_RCC_OscConfig+0x764>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1f0      	bne.n	8001afa <HAL_RCC_OscConfig+0x736>
 8001b18:	e001      	b.n	8001b1e <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3728      	adds	r7, #40	; 0x28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	58024400 	.word	0x58024400
 8001b2c:	fffffc0c 	.word	0xfffffc0c
 8001b30:	ffff0007 	.word	0xffff0007

08001b34 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e18d      	b.n	8001e64 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b48:	4b8a      	ldr	r3, [pc, #552]	; (8001d74 <HAL_RCC_ClockConfig+0x240>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 030f 	and.w	r3, r3, #15
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d910      	bls.n	8001b78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b87      	ldr	r3, [pc, #540]	; (8001d74 <HAL_RCC_ClockConfig+0x240>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 020f 	bic.w	r2, r3, #15
 8001b5e:	4985      	ldr	r1, [pc, #532]	; (8001d74 <HAL_RCC_ClockConfig+0x240>)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b66:	4b83      	ldr	r3, [pc, #524]	; (8001d74 <HAL_RCC_ClockConfig+0x240>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d001      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e175      	b.n	8001e64 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d010      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	4b7b      	ldr	r3, [pc, #492]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d908      	bls.n	8001ba6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b94:	4b78      	ldr	r3, [pc, #480]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	4975      	ldr	r1, [pc, #468]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d010      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695a      	ldr	r2, [r3, #20]
 8001bb6:	4b70      	ldr	r3, [pc, #448]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d908      	bls.n	8001bd4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001bc2:	4b6d      	ldr	r3, [pc, #436]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	496a      	ldr	r1, [pc, #424]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d010      	beq.n	8001c02 <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	699a      	ldr	r2, [r3, #24]
 8001be4:	4b64      	ldr	r3, [pc, #400]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d908      	bls.n	8001c02 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001bf0:	4b61      	ldr	r3, [pc, #388]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	495e      	ldr	r1, [pc, #376]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0320 	and.w	r3, r3, #32
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d010      	beq.n	8001c30 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69da      	ldr	r2, [r3, #28]
 8001c12:	4b59      	ldr	r3, [pc, #356]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d908      	bls.n	8001c30 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001c1e:	4b56      	ldr	r3, [pc, #344]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	4953      	ldr	r1, [pc, #332]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d010      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	4b4d      	ldr	r3, [pc, #308]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d908      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c4c:	4b4a      	ldr	r3, [pc, #296]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f023 020f 	bic.w	r2, r3, #15
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	4947      	ldr	r1, [pc, #284]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d055      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001c6a:	4b43      	ldr	r3, [pc, #268]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	4940      	ldr	r1, [pc, #256]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d107      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c84:	4b3c      	ldr	r3, [pc, #240]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d121      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0e7      	b.n	8001e64 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d107      	bne.n	8001cac <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c9c:	4b36      	ldr	r3, [pc, #216]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d115      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0db      	b.n	8001e64 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d107      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cb4:	4b30      	ldr	r3, [pc, #192]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d109      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0cf      	b.n	8001e64 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cc4:	4b2c      	ldr	r3, [pc, #176]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0c7      	b.n	8001e64 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cd4:	4b28      	ldr	r3, [pc, #160]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	f023 0207 	bic.w	r2, r3, #7
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	4925      	ldr	r1, [pc, #148]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce6:	f7ff f833 	bl	8000d50 <HAL_GetTick>
 8001cea:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cec:	e00a      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cee:	f7ff f82f 	bl	8000d50 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e0af      	b.n	8001e64 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d04:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d1eb      	bne.n	8001cee <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d010      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d208      	bcs.n	8001d44 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	f023 020f 	bic.w	r2, r3, #15
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	490e      	ldr	r1, [pc, #56]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <HAL_RCC_ClockConfig+0x240>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d214      	bcs.n	8001d7c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d52:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <HAL_RCC_ClockConfig+0x240>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 020f 	bic.w	r2, r3, #15
 8001d5a:	4906      	ldr	r1, [pc, #24]	; (8001d74 <HAL_RCC_ClockConfig+0x240>)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d62:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <HAL_RCC_ClockConfig+0x240>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d005      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e077      	b.n	8001e64 <HAL_RCC_ClockConfig+0x330>
 8001d74:	52002000 	.word	0x52002000
 8001d78:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d010      	beq.n	8001daa <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691a      	ldr	r2, [r3, #16]
 8001d8c:	4b37      	ldr	r3, [pc, #220]	; (8001e6c <HAL_RCC_ClockConfig+0x338>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d208      	bcs.n	8001daa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d98:	4b34      	ldr	r3, [pc, #208]	; (8001e6c <HAL_RCC_ClockConfig+0x338>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	4931      	ldr	r1, [pc, #196]	; (8001e6c <HAL_RCC_ClockConfig+0x338>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d010      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	695a      	ldr	r2, [r3, #20]
 8001dba:	4b2c      	ldr	r3, [pc, #176]	; (8001e6c <HAL_RCC_ClockConfig+0x338>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d208      	bcs.n	8001dd8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001dc6:	4b29      	ldr	r3, [pc, #164]	; (8001e6c <HAL_RCC_ClockConfig+0x338>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	4926      	ldr	r1, [pc, #152]	; (8001e6c <HAL_RCC_ClockConfig+0x338>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d010      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	699a      	ldr	r2, [r3, #24]
 8001de8:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <HAL_RCC_ClockConfig+0x338>)
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d208      	bcs.n	8001e06 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001df4:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <HAL_RCC_ClockConfig+0x338>)
 8001df6:	69db      	ldr	r3, [r3, #28]
 8001df8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	491a      	ldr	r1, [pc, #104]	; (8001e6c <HAL_RCC_ClockConfig+0x338>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0320 	and.w	r3, r3, #32
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d010      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69da      	ldr	r2, [r3, #28]
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <HAL_RCC_ClockConfig+0x338>)
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d208      	bcs.n	8001e34 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001e22:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_RCC_ClockConfig+0x338>)
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	490f      	ldr	r1, [pc, #60]	; (8001e6c <HAL_RCC_ClockConfig+0x338>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e34:	f000 f822 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8001e38:	4601      	mov	r1, r0
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <HAL_RCC_ClockConfig+0x338>)
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	0a1b      	lsrs	r3, r3, #8
 8001e40:	f003 030f 	and.w	r3, r3, #15
 8001e44:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <HAL_RCC_ClockConfig+0x33c>)
 8001e46:	5cd3      	ldrb	r3, [r2, r3]
 8001e48:	f003 031f 	and.w	r3, r3, #31
 8001e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8001e50:	4a08      	ldr	r2, [pc, #32]	; (8001e74 <HAL_RCC_ClockConfig+0x340>)
 8001e52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001e54:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <HAL_RCC_ClockConfig+0x344>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe ff2f 	bl	8000cbc <HAL_InitTick>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8001e62:	7afb      	ldrb	r3, [r7, #11]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	58024400 	.word	0x58024400
 8001e70:	080062a8 	.word	0x080062a8
 8001e74:	24000000 	.word	0x24000000
 8001e78:	24000008 	.word	0x24000008

08001e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b089      	sub	sp, #36	; 0x24
 8001e80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e82:	4baf      	ldr	r3, [pc, #700]	; (8002140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e8a:	2b18      	cmp	r3, #24
 8001e8c:	f200 814e 	bhi.w	800212c <HAL_RCC_GetSysClockFreq+0x2b0>
 8001e90:	a201      	add	r2, pc, #4	; (adr r2, 8001e98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e96:	bf00      	nop
 8001e98:	08001efd 	.word	0x08001efd
 8001e9c:	0800212d 	.word	0x0800212d
 8001ea0:	0800212d 	.word	0x0800212d
 8001ea4:	0800212d 	.word	0x0800212d
 8001ea8:	0800212d 	.word	0x0800212d
 8001eac:	0800212d 	.word	0x0800212d
 8001eb0:	0800212d 	.word	0x0800212d
 8001eb4:	0800212d 	.word	0x0800212d
 8001eb8:	08001f23 	.word	0x08001f23
 8001ebc:	0800212d 	.word	0x0800212d
 8001ec0:	0800212d 	.word	0x0800212d
 8001ec4:	0800212d 	.word	0x0800212d
 8001ec8:	0800212d 	.word	0x0800212d
 8001ecc:	0800212d 	.word	0x0800212d
 8001ed0:	0800212d 	.word	0x0800212d
 8001ed4:	0800212d 	.word	0x0800212d
 8001ed8:	08001f29 	.word	0x08001f29
 8001edc:	0800212d 	.word	0x0800212d
 8001ee0:	0800212d 	.word	0x0800212d
 8001ee4:	0800212d 	.word	0x0800212d
 8001ee8:	0800212d 	.word	0x0800212d
 8001eec:	0800212d 	.word	0x0800212d
 8001ef0:	0800212d 	.word	0x0800212d
 8001ef4:	0800212d 	.word	0x0800212d
 8001ef8:	08001f2f 	.word	0x08001f2f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001efc:	4b90      	ldr	r3, [pc, #576]	; (8002140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0320 	and.w	r3, r3, #32
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d009      	beq.n	8001f1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001f08:	4b8d      	ldr	r3, [pc, #564]	; (8002140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	4a8c      	ldr	r2, [pc, #560]	; (8002144 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001f14:	fa22 f303 	lsr.w	r3, r2, r3
 8001f18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001f1a:	e10a      	b.n	8002132 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001f1c:	4b89      	ldr	r3, [pc, #548]	; (8002144 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001f1e:	61bb      	str	r3, [r7, #24]
    break;
 8001f20:	e107      	b.n	8002132 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001f22:	4b89      	ldr	r3, [pc, #548]	; (8002148 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001f24:	61bb      	str	r3, [r7, #24]
    break;
 8001f26:	e104      	b.n	8002132 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001f28:	4b88      	ldr	r3, [pc, #544]	; (800214c <HAL_RCC_GetSysClockFreq+0x2d0>)
 8001f2a:	61bb      	str	r3, [r7, #24]
    break;
 8001f2c:	e101      	b.n	8002132 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001f2e:	4b84      	ldr	r3, [pc, #528]	; (8002140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001f38:	4b81      	ldr	r3, [pc, #516]	; (8002140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f42:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001f44:	4b7e      	ldr	r3, [pc, #504]	; (8002140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001f4e:	4b7c      	ldr	r3, [pc, #496]	; (8002140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f52:	08db      	lsrs	r3, r3, #3
 8001f54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	fb02 f303 	mul.w	r3, r2, r3
 8001f5e:	ee07 3a90 	vmov	s15, r3
 8001f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f66:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 80da 	beq.w	8002126 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d05a      	beq.n	800202e <HAL_RCC_GetSysClockFreq+0x1b2>
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d302      	bcc.n	8001f82 <HAL_RCC_GetSysClockFreq+0x106>
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d078      	beq.n	8002072 <HAL_RCC_GetSysClockFreq+0x1f6>
 8001f80:	e099      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f82:	4b6f      	ldr	r3, [pc, #444]	; (8002140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d02d      	beq.n	8001fea <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001f8e:	4b6c      	ldr	r3, [pc, #432]	; (8002140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	08db      	lsrs	r3, r3, #3
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	4a6a      	ldr	r2, [pc, #424]	; (8002144 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	ee07 3a90 	vmov	s15, r3
 8001fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	ee07 3a90 	vmov	s15, r3
 8001fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fb8:	4b61      	ldr	r3, [pc, #388]	; (8002140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc0:	ee07 3a90 	vmov	s15, r3
 8001fc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fc8:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fcc:	eddf 5a60 	vldr	s11, [pc, #384]	; 8002150 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001fd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001fe8:	e087      	b.n	80020fa <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	ee07 3a90 	vmov	s15, r3
 8001ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ff4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002154 <HAL_RCC_GetSysClockFreq+0x2d8>
 8001ff8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ffc:	4b50      	ldr	r3, [pc, #320]	; (8002140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002004:	ee07 3a90 	vmov	s15, r3
 8002008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800200c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002010:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002150 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002014:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002018:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800201c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002020:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002028:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800202c:	e065      	b.n	80020fa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	ee07 3a90 	vmov	s15, r3
 8002034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002038:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002158 <HAL_RCC_GetSysClockFreq+0x2dc>
 800203c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002040:	4b3f      	ldr	r3, [pc, #252]	; (8002140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002048:	ee07 3a90 	vmov	s15, r3
 800204c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002050:	ed97 6a02 	vldr	s12, [r7, #8]
 8002054:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002150 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002058:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800205c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002060:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002064:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800206c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002070:	e043      	b.n	80020fa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	ee07 3a90 	vmov	s15, r3
 8002078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800207c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800215c <HAL_RCC_GetSysClockFreq+0x2e0>
 8002080:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002084:	4b2e      	ldr	r3, [pc, #184]	; (8002140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800208c:	ee07 3a90 	vmov	s15, r3
 8002090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002094:	ed97 6a02 	vldr	s12, [r7, #8]
 8002098:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002150 <HAL_RCC_GetSysClockFreq+0x2d4>
 800209c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80020b4:	e021      	b.n	80020fa <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	ee07 3a90 	vmov	s15, r3
 80020bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020c0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002158 <HAL_RCC_GetSysClockFreq+0x2dc>
 80020c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020c8:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80020ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020d0:	ee07 3a90 	vmov	s15, r3
 80020d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80020dc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002150 <HAL_RCC_GetSysClockFreq+0x2d4>
 80020e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80020f8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80020fa:	4b11      	ldr	r3, [pc, #68]	; (8002140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	0a5b      	lsrs	r3, r3, #9
 8002100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002104:	3301      	adds	r3, #1
 8002106:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	ee07 3a90 	vmov	s15, r3
 800210e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002112:	edd7 6a07 	vldr	s13, [r7, #28]
 8002116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800211a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800211e:	ee17 3a90 	vmov	r3, s15
 8002122:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002124:	e005      	b.n	8002132 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	61bb      	str	r3, [r7, #24]
    break;
 800212a:	e002      	b.n	8002132 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800212e:	61bb      	str	r3, [r7, #24]
    break;
 8002130:	bf00      	nop
  }

  return sysclockfreq;
 8002132:	69bb      	ldr	r3, [r7, #24]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3724      	adds	r7, #36	; 0x24
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	58024400 	.word	0x58024400
 8002144:	03d09000 	.word	0x03d09000
 8002148:	003d0900 	.word	0x003d0900
 800214c:	017d7840 	.word	0x017d7840
 8002150:	46000000 	.word	0x46000000
 8002154:	4c742400 	.word	0x4c742400
 8002158:	4a742400 	.word	0x4a742400
 800215c:	4bbebc20 	.word	0x4bbebc20

08002160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002164:	f001 f9e2 	bl	800352c <HAL_RCCEx_GetD1SysClockFreq>
 8002168:	4601      	mov	r1, r0
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <HAL_RCC_GetHCLKFreq+0x2c>)
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	4a07      	ldr	r2, [pc, #28]	; (8002190 <HAL_RCC_GetHCLKFreq+0x30>)
 8002174:	5cd3      	ldrb	r3, [r2, r3]
 8002176:	f003 031f 	and.w	r3, r3, #31
 800217a:	fa21 f303 	lsr.w	r3, r1, r3
 800217e:	4a05      	ldr	r2, [pc, #20]	; (8002194 <HAL_RCC_GetHCLKFreq+0x34>)
 8002180:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <HAL_RCC_GetHCLKFreq+0x34>)
 8002184:	681b      	ldr	r3, [r3, #0]
}
 8002186:	4618      	mov	r0, r3
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	58024400 	.word	0x58024400
 8002190:	080062a8 	.word	0x080062a8
 8002194:	24000004 	.word	0x24000004

08002198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800219c:	f7ff ffe0 	bl	8002160 <HAL_RCC_GetHCLKFreq>
 80021a0:	4601      	mov	r1, r0
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	091b      	lsrs	r3, r3, #4
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021ae:	5cd3      	ldrb	r3, [r2, r3]
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	58024400 	.word	0x58024400
 80021c0:	080062a8 	.word	0x080062a8

080021c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80021c8:	f7ff ffca 	bl	8002160 <HAL_RCC_GetHCLKFreq>
 80021cc:	4601      	mov	r1, r0
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	0a1b      	lsrs	r3, r3, #8
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	4a04      	ldr	r2, [pc, #16]	; (80021ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80021da:	5cd3      	ldrb	r3, [r2, r3]
 80021dc:	f003 031f 	and.w	r3, r3, #31
 80021e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	58024400 	.word	0x58024400
 80021ec:	080062a8 	.word	0x080062a8

080021f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021f8:	2300      	movs	r3, #0
 80021fa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021fc:	2300      	movs	r3, #0
 80021fe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d03d      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002210:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002214:	d013      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800221a:	d802      	bhi.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800221c:	2b00      	cmp	r3, #0
 800221e:	d007      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002220:	e01f      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002222:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002226:	d013      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002228:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800222c:	d01c      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800222e:	e018      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002230:	4baf      	ldr	r3, [pc, #700]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002234:	4aae      	ldr	r2, [pc, #696]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800223a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800223c:	e015      	b.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3304      	adds	r3, #4
 8002242:	2102      	movs	r1, #2
 8002244:	4618      	mov	r0, r3
 8002246:	f001 f98d 	bl	8003564 <RCCEx_PLL2_Config>
 800224a:	4603      	mov	r3, r0
 800224c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800224e:	e00c      	b.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3324      	adds	r3, #36	; 0x24
 8002254:	2102      	movs	r1, #2
 8002256:	4618      	mov	r0, r3
 8002258:	f001 fa36 	bl	80036c8 <RCCEx_PLL3_Config>
 800225c:	4603      	mov	r3, r0
 800225e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002260:	e003      	b.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	75fb      	strb	r3, [r7, #23]
      break;
 8002266:	e000      	b.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002268:	bf00      	nop
    }

    if(ret == HAL_OK)
 800226a:	7dfb      	ldrb	r3, [r7, #23]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d109      	bne.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002270:	4b9f      	ldr	r3, [pc, #636]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002274:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800227c:	499c      	ldr	r1, [pc, #624]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800227e:	4313      	orrs	r3, r2
 8002280:	650b      	str	r3, [r1, #80]	; 0x50
 8002282:	e001      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002284:	7dfb      	ldrb	r3, [r7, #23]
 8002286:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002290:	2b00      	cmp	r3, #0
 8002292:	d03d      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002298:	2b04      	cmp	r3, #4
 800229a:	d826      	bhi.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800229c:	a201      	add	r2, pc, #4	; (adr r2, 80022a4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800229e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a2:	bf00      	nop
 80022a4:	080022b9 	.word	0x080022b9
 80022a8:	080022c7 	.word	0x080022c7
 80022ac:	080022d9 	.word	0x080022d9
 80022b0:	080022f1 	.word	0x080022f1
 80022b4:	080022f1 	.word	0x080022f1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022b8:	4b8d      	ldr	r3, [pc, #564]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	4a8c      	ldr	r2, [pc, #560]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80022be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80022c4:	e015      	b.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3304      	adds	r3, #4
 80022ca:	2100      	movs	r1, #0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f001 f949 	bl	8003564 <RCCEx_PLL2_Config>
 80022d2:	4603      	mov	r3, r0
 80022d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80022d6:	e00c      	b.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3324      	adds	r3, #36	; 0x24
 80022dc:	2100      	movs	r1, #0
 80022de:	4618      	mov	r0, r3
 80022e0:	f001 f9f2 	bl	80036c8 <RCCEx_PLL3_Config>
 80022e4:	4603      	mov	r3, r0
 80022e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80022e8:	e003      	b.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	75fb      	strb	r3, [r7, #23]
      break;
 80022ee:	e000      	b.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80022f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022f2:	7dfb      	ldrb	r3, [r7, #23]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d109      	bne.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022f8:	4b7d      	ldr	r3, [pc, #500]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80022fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022fc:	f023 0207 	bic.w	r2, r3, #7
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002304:	497a      	ldr	r1, [pc, #488]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002306:	4313      	orrs	r3, r2
 8002308:	650b      	str	r3, [r1, #80]	; 0x50
 800230a:	e001      	b.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800230c:	7dfb      	ldrb	r3, [r7, #23]
 800230e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002318:	2b00      	cmp	r3, #0
 800231a:	d03e      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002320:	2b80      	cmp	r3, #128	; 0x80
 8002322:	d01c      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002324:	2b80      	cmp	r3, #128	; 0x80
 8002326:	d804      	bhi.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800232c:	2b40      	cmp	r3, #64	; 0x40
 800232e:	d00d      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002330:	e01e      	b.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002332:	2bc0      	cmp	r3, #192	; 0xc0
 8002334:	d01f      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800233a:	d01e      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800233c:	e018      	b.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800233e:	4b6c      	ldr	r3, [pc, #432]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002342:	4a6b      	ldr	r2, [pc, #428]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002348:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800234a:	e017      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3304      	adds	r3, #4
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f001 f906 	bl	8003564 <RCCEx_PLL2_Config>
 8002358:	4603      	mov	r3, r0
 800235a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800235c:	e00e      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3324      	adds	r3, #36	; 0x24
 8002362:	2100      	movs	r1, #0
 8002364:	4618      	mov	r0, r3
 8002366:	f001 f9af 	bl	80036c8 <RCCEx_PLL3_Config>
 800236a:	4603      	mov	r3, r0
 800236c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800236e:	e005      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	75fb      	strb	r3, [r7, #23]
      break;
 8002374:	e002      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002376:	bf00      	nop
 8002378:	e000      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800237a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800237c:	7dfb      	ldrb	r3, [r7, #23]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d109      	bne.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002382:	4b5b      	ldr	r3, [pc, #364]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002386:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238e:	4958      	ldr	r1, [pc, #352]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002390:	4313      	orrs	r3, r2
 8002392:	650b      	str	r3, [r1, #80]	; 0x50
 8002394:	e001      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002396:	7dfb      	ldrb	r3, [r7, #23]
 8002398:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d044      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80023ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023b0:	d01f      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80023b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023b6:	d805      	bhi.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00a      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80023bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023c0:	d00e      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80023c2:	e01f      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80023c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80023c8:	d01f      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80023ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023ce:	d01e      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80023d0:	e018      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023d2:	4b47      	ldr	r3, [pc, #284]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80023d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d6:	4a46      	ldr	r2, [pc, #280]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80023d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80023de:	e017      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3304      	adds	r3, #4
 80023e4:	2100      	movs	r1, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f001 f8bc 	bl	8003564 <RCCEx_PLL2_Config>
 80023ec:	4603      	mov	r3, r0
 80023ee:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80023f0:	e00e      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3324      	adds	r3, #36	; 0x24
 80023f6:	2100      	movs	r1, #0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f001 f965 	bl	80036c8 <RCCEx_PLL3_Config>
 80023fe:	4603      	mov	r3, r0
 8002400:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002402:	e005      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	75fb      	strb	r3, [r7, #23]
      break;
 8002408:	e002      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800240a:	bf00      	nop
 800240c:	e000      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800240e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002410:	7dfb      	ldrb	r3, [r7, #23]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10a      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002416:	4b36      	ldr	r3, [pc, #216]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002424:	4932      	ldr	r1, [pc, #200]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002426:	4313      	orrs	r3, r2
 8002428:	658b      	str	r3, [r1, #88]	; 0x58
 800242a:	e001      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800242c:	7dfb      	ldrb	r3, [r7, #23]
 800242e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002438:	2b00      	cmp	r3, #0
 800243a:	d044      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002442:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002446:	d01f      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002448:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800244c:	d805      	bhi.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00a      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8002452:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002456:	d00e      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002458:	e01f      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800245a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800245e:	d01f      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002460:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002464:	d01e      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002466:	e018      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002468:	4b21      	ldr	r3, [pc, #132]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	4a20      	ldr	r2, [pc, #128]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800246e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002472:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002474:	e017      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3304      	adds	r3, #4
 800247a:	2100      	movs	r1, #0
 800247c:	4618      	mov	r0, r3
 800247e:	f001 f871 	bl	8003564 <RCCEx_PLL2_Config>
 8002482:	4603      	mov	r3, r0
 8002484:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002486:	e00e      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3324      	adds	r3, #36	; 0x24
 800248c:	2100      	movs	r1, #0
 800248e:	4618      	mov	r0, r3
 8002490:	f001 f91a 	bl	80036c8 <RCCEx_PLL3_Config>
 8002494:	4603      	mov	r3, r0
 8002496:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002498:	e005      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	75fb      	strb	r3, [r7, #23]
      break;
 800249e:	e002      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80024a0:	bf00      	nop
 80024a2:	e000      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80024a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024a6:	7dfb      	ldrb	r3, [r7, #23]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10a      	bne.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80024ac:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80024ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80024ba:	490d      	ldr	r1, [pc, #52]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	658b      	str	r3, [r1, #88]	; 0x58
 80024c0:	e001      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024c2:	7dfb      	ldrb	r3, [r7, #23]
 80024c4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d035      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d6:	2b10      	cmp	r3, #16
 80024d8:	d00c      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80024da:	2b10      	cmp	r3, #16
 80024dc:	d802      	bhi.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d01b      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80024e2:	e017      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	d00c      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80024e8:	2b30      	cmp	r3, #48	; 0x30
 80024ea:	d018      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80024ec:	e012      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80024ee:	bf00      	nop
 80024f0:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024f4:	4baf      	ldr	r3, [pc, #700]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f8:	4aae      	ldr	r2, [pc, #696]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80024fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002500:	e00e      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3304      	adds	r3, #4
 8002506:	2102      	movs	r1, #2
 8002508:	4618      	mov	r0, r3
 800250a:	f001 f82b 	bl	8003564 <RCCEx_PLL2_Config>
 800250e:	4603      	mov	r3, r0
 8002510:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002512:	e005      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	75fb      	strb	r3, [r7, #23]
      break;
 8002518:	e002      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800251a:	bf00      	nop
 800251c:	e000      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800251e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002520:	7dfb      	ldrb	r3, [r7, #23]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d109      	bne.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002526:	4ba3      	ldr	r3, [pc, #652]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002532:	49a0      	ldr	r1, [pc, #640]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002534:	4313      	orrs	r3, r2
 8002536:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002538:	e001      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800253a:	7dfb      	ldrb	r3, [r7, #23]
 800253c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d042      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002552:	d01f      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002558:	d805      	bhi.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800255e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002562:	d00e      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002564:	e01f      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8002566:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800256a:	d01f      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800256c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002570:	d01e      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8002572:	e018      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002574:	4b8f      	ldr	r3, [pc, #572]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	4a8e      	ldr	r2, [pc, #568]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800257a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002580:	e017      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3304      	adds	r3, #4
 8002586:	2100      	movs	r1, #0
 8002588:	4618      	mov	r0, r3
 800258a:	f000 ffeb 	bl	8003564 <RCCEx_PLL2_Config>
 800258e:	4603      	mov	r3, r0
 8002590:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002592:	e00e      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3324      	adds	r3, #36	; 0x24
 8002598:	2100      	movs	r1, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f001 f894 	bl	80036c8 <RCCEx_PLL3_Config>
 80025a0:	4603      	mov	r3, r0
 80025a2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80025a4:	e005      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	75fb      	strb	r3, [r7, #23]
      break;
 80025aa:	e002      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80025ac:	bf00      	nop
 80025ae:	e000      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80025b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025b2:	7dfb      	ldrb	r3, [r7, #23]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d109      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80025b8:	4b7e      	ldr	r3, [pc, #504]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80025ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025bc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c4:	497b      	ldr	r1, [pc, #492]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	650b      	str	r3, [r1, #80]	; 0x50
 80025ca:	e001      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025cc:	7dfb      	ldrb	r3, [r7, #23]
 80025ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d042      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025e4:	d01b      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80025e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025ea:	d805      	bhi.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d022      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80025f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f4:	d00a      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80025f6:	e01b      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80025f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025fc:	d01d      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80025fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002602:	d01c      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002604:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002608:	d01b      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800260a:	e011      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3304      	adds	r3, #4
 8002610:	2101      	movs	r1, #1
 8002612:	4618      	mov	r0, r3
 8002614:	f000 ffa6 	bl	8003564 <RCCEx_PLL2_Config>
 8002618:	4603      	mov	r3, r0
 800261a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800261c:	e012      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3324      	adds	r3, #36	; 0x24
 8002622:	2101      	movs	r1, #1
 8002624:	4618      	mov	r0, r3
 8002626:	f001 f84f 	bl	80036c8 <RCCEx_PLL3_Config>
 800262a:	4603      	mov	r3, r0
 800262c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800262e:	e009      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	75fb      	strb	r3, [r7, #23]
      break;
 8002634:	e006      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002636:	bf00      	nop
 8002638:	e004      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800263a:	bf00      	nop
 800263c:	e002      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800263e:	bf00      	nop
 8002640:	e000      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002642:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002644:	7dfb      	ldrb	r3, [r7, #23]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800264a:	4b5a      	ldr	r3, [pc, #360]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800264c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800264e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002656:	4957      	ldr	r1, [pc, #348]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002658:	4313      	orrs	r3, r2
 800265a:	650b      	str	r3, [r1, #80]	; 0x50
 800265c:	e001      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800265e:	7dfb      	ldrb	r3, [r7, #23]
 8002660:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d044      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002674:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002678:	d01b      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800267a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800267e:	d805      	bhi.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8002680:	2b00      	cmp	r3, #0
 8002682:	d022      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002684:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002688:	d00a      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800268a:	e01b      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800268c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002690:	d01d      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002692:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002696:	d01c      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002698:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800269c:	d01b      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800269e:	e011      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3304      	adds	r3, #4
 80026a4:	2101      	movs	r1, #1
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 ff5c 	bl	8003564 <RCCEx_PLL2_Config>
 80026ac:	4603      	mov	r3, r0
 80026ae:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80026b0:	e012      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3324      	adds	r3, #36	; 0x24
 80026b6:	2101      	movs	r1, #1
 80026b8:	4618      	mov	r0, r3
 80026ba:	f001 f805 	bl	80036c8 <RCCEx_PLL3_Config>
 80026be:	4603      	mov	r3, r0
 80026c0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80026c2:	e009      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	75fb      	strb	r3, [r7, #23]
      break;
 80026c8:	e006      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80026ca:	bf00      	nop
 80026cc:	e004      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80026ce:	bf00      	nop
 80026d0:	e002      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80026d2:	bf00      	nop
 80026d4:	e000      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80026d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026d8:	7dfb      	ldrb	r3, [r7, #23]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10a      	bne.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80026de:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80026ec:	4931      	ldr	r1, [pc, #196]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	658b      	str	r3, [r1, #88]	; 0x58
 80026f2:	e001      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f4:	7dfb      	ldrb	r3, [r7, #23]
 80026f6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d02d      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002708:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800270c:	d005      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800270e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002712:	d009      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8002714:	2b00      	cmp	r3, #0
 8002716:	d013      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002718:	e00f      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800271a:	4b26      	ldr	r3, [pc, #152]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271e:	4a25      	ldr	r2, [pc, #148]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002724:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002726:	e00c      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3304      	adds	r3, #4
 800272c:	2101      	movs	r1, #1
 800272e:	4618      	mov	r0, r3
 8002730:	f000 ff18 	bl	8003564 <RCCEx_PLL2_Config>
 8002734:	4603      	mov	r3, r0
 8002736:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002738:	e003      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	75fb      	strb	r3, [r7, #23]
      break;
 800273e:	e000      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8002740:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002742:	7dfb      	ldrb	r3, [r7, #23]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d109      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002748:	4b1a      	ldr	r3, [pc, #104]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800274a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800274c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002754:	4917      	ldr	r1, [pc, #92]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002756:	4313      	orrs	r3, r2
 8002758:	650b      	str	r3, [r1, #80]	; 0x50
 800275a:	e001      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800275c:	7dfb      	ldrb	r3, [r7, #23]
 800275e:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d035      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002770:	2b03      	cmp	r3, #3
 8002772:	d81b      	bhi.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002774:	a201      	add	r2, pc, #4	; (adr r2, 800277c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8002776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277a:	bf00      	nop
 800277c:	080027b9 	.word	0x080027b9
 8002780:	0800278d 	.word	0x0800278d
 8002784:	0800279b 	.word	0x0800279b
 8002788:	080027b9 	.word	0x080027b9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800278c:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	4a08      	ldr	r2, [pc, #32]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002796:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002798:	e00f      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3304      	adds	r3, #4
 800279e:	2102      	movs	r1, #2
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 fedf 	bl	8003564 <RCCEx_PLL2_Config>
 80027a6:	4603      	mov	r3, r0
 80027a8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80027aa:	e006      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	75fb      	strb	r3, [r7, #23]
      break;
 80027b0:	e003      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80027b2:	bf00      	nop
 80027b4:	58024400 	.word	0x58024400
      break;
 80027b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027ba:	7dfb      	ldrb	r3, [r7, #23]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d109      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80027c0:	4bba      	ldr	r3, [pc, #744]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80027c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c4:	f023 0203 	bic.w	r2, r3, #3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027cc:	49b7      	ldr	r1, [pc, #732]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80027d2:	e001      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d4:	7dfb      	ldrb	r3, [r7, #23]
 80027d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 8086 	beq.w	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027e6:	4bb2      	ldr	r3, [pc, #712]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4ab1      	ldr	r2, [pc, #708]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80027ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027f2:	f7fe faad 	bl	8000d50 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027f8:	e009      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027fa:	f7fe faa9 	bl	8000d50 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b64      	cmp	r3, #100	; 0x64
 8002806:	d902      	bls.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	75fb      	strb	r3, [r7, #23]
        break;
 800280c:	e005      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800280e:	4ba8      	ldr	r3, [pc, #672]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0ef      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800281a:	7dfb      	ldrb	r3, [r7, #23]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d166      	bne.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002820:	4ba2      	ldr	r3, [pc, #648]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002822:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800282a:	4053      	eors	r3, r2
 800282c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002830:	2b00      	cmp	r3, #0
 8002832:	d013      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002834:	4b9d      	ldr	r3, [pc, #628]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800283c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800283e:	4b9b      	ldr	r3, [pc, #620]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002842:	4a9a      	ldr	r2, [pc, #616]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002848:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800284a:	4b98      	ldr	r3, [pc, #608]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284e:	4a97      	ldr	r2, [pc, #604]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002854:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002856:	4a95      	ldr	r2, [pc, #596]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002866:	d115      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002868:	f7fe fa72 	bl	8000d50 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800286e:	e00b      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002870:	f7fe fa6e 	bl	8000d50 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	f241 3288 	movw	r2, #5000	; 0x1388
 800287e:	4293      	cmp	r3, r2
 8002880:	d902      	bls.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	75fb      	strb	r3, [r7, #23]
            break;
 8002886:	e005      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002888:	4b88      	ldr	r3, [pc, #544]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800288a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0ed      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8002894:	7dfb      	ldrb	r3, [r7, #23]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d126      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80028a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028a8:	d10d      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80028aa:	4b80      	ldr	r3, [pc, #512]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80028b8:	0919      	lsrs	r1, r3, #4
 80028ba:	4b7e      	ldr	r3, [pc, #504]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80028bc:	400b      	ands	r3, r1
 80028be:	497b      	ldr	r1, [pc, #492]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	610b      	str	r3, [r1, #16]
 80028c4:	e005      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80028c6:	4b79      	ldr	r3, [pc, #484]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	4a78      	ldr	r2, [pc, #480]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80028cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80028d0:	6113      	str	r3, [r2, #16]
 80028d2:	4b76      	ldr	r3, [pc, #472]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80028d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80028dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e0:	4972      	ldr	r1, [pc, #456]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	670b      	str	r3, [r1, #112]	; 0x70
 80028e6:	e004      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028e8:	7dfb      	ldrb	r3, [r7, #23]
 80028ea:	75bb      	strb	r3, [r7, #22]
 80028ec:	e001      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ee:	7dfb      	ldrb	r3, [r7, #23]
 80028f0:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d07d      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002902:	2b28      	cmp	r3, #40	; 0x28
 8002904:	d866      	bhi.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8002906:	a201      	add	r2, pc, #4	; (adr r2, 800290c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290c:	080029db 	.word	0x080029db
 8002910:	080029d5 	.word	0x080029d5
 8002914:	080029d5 	.word	0x080029d5
 8002918:	080029d5 	.word	0x080029d5
 800291c:	080029d5 	.word	0x080029d5
 8002920:	080029d5 	.word	0x080029d5
 8002924:	080029d5 	.word	0x080029d5
 8002928:	080029d5 	.word	0x080029d5
 800292c:	080029b1 	.word	0x080029b1
 8002930:	080029d5 	.word	0x080029d5
 8002934:	080029d5 	.word	0x080029d5
 8002938:	080029d5 	.word	0x080029d5
 800293c:	080029d5 	.word	0x080029d5
 8002940:	080029d5 	.word	0x080029d5
 8002944:	080029d5 	.word	0x080029d5
 8002948:	080029d5 	.word	0x080029d5
 800294c:	080029c3 	.word	0x080029c3
 8002950:	080029d5 	.word	0x080029d5
 8002954:	080029d5 	.word	0x080029d5
 8002958:	080029d5 	.word	0x080029d5
 800295c:	080029d5 	.word	0x080029d5
 8002960:	080029d5 	.word	0x080029d5
 8002964:	080029d5 	.word	0x080029d5
 8002968:	080029d5 	.word	0x080029d5
 800296c:	080029db 	.word	0x080029db
 8002970:	080029d5 	.word	0x080029d5
 8002974:	080029d5 	.word	0x080029d5
 8002978:	080029d5 	.word	0x080029d5
 800297c:	080029d5 	.word	0x080029d5
 8002980:	080029d5 	.word	0x080029d5
 8002984:	080029d5 	.word	0x080029d5
 8002988:	080029d5 	.word	0x080029d5
 800298c:	080029db 	.word	0x080029db
 8002990:	080029d5 	.word	0x080029d5
 8002994:	080029d5 	.word	0x080029d5
 8002998:	080029d5 	.word	0x080029d5
 800299c:	080029d5 	.word	0x080029d5
 80029a0:	080029d5 	.word	0x080029d5
 80029a4:	080029d5 	.word	0x080029d5
 80029a8:	080029d5 	.word	0x080029d5
 80029ac:	080029db 	.word	0x080029db
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3304      	adds	r3, #4
 80029b4:	2101      	movs	r1, #1
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fdd4 	bl	8003564 <RCCEx_PLL2_Config>
 80029bc:	4603      	mov	r3, r0
 80029be:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80029c0:	e00c      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3324      	adds	r3, #36	; 0x24
 80029c6:	2101      	movs	r1, #1
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 fe7d 	bl	80036c8 <RCCEx_PLL3_Config>
 80029ce:	4603      	mov	r3, r0
 80029d0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80029d2:	e003      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	75fb      	strb	r3, [r7, #23]
      break;
 80029d8:	e000      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80029da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029dc:	7dfb      	ldrb	r3, [r7, #23]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d109      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80029e2:	4b32      	ldr	r3, [pc, #200]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80029e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ee:	492f      	ldr	r1, [pc, #188]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	654b      	str	r3, [r1, #84]	; 0x54
 80029f4:	e001      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029f6:	7dfb      	ldrb	r3, [r7, #23]
 80029f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d037      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a0a:	2b05      	cmp	r3, #5
 8002a0c:	d820      	bhi.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8002a0e:	a201      	add	r2, pc, #4	; (adr r2, 8002a14 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8002a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a14:	08002a57 	.word	0x08002a57
 8002a18:	08002a2d 	.word	0x08002a2d
 8002a1c:	08002a3f 	.word	0x08002a3f
 8002a20:	08002a57 	.word	0x08002a57
 8002a24:	08002a57 	.word	0x08002a57
 8002a28:	08002a57 	.word	0x08002a57
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3304      	adds	r3, #4
 8002a30:	2101      	movs	r1, #1
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 fd96 	bl	8003564 <RCCEx_PLL2_Config>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002a3c:	e00c      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3324      	adds	r3, #36	; 0x24
 8002a42:	2101      	movs	r1, #1
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 fe3f 	bl	80036c8 <RCCEx_PLL3_Config>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002a4e:	e003      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	75fb      	strb	r3, [r7, #23]
      break;
 8002a54:	e000      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8002a56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a58:	7dfb      	ldrb	r3, [r7, #23]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002a5e:	4b13      	ldr	r3, [pc, #76]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a62:	f023 0207 	bic.w	r2, r3, #7
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a6a:	4910      	ldr	r1, [pc, #64]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	654b      	str	r3, [r1, #84]	; 0x54
 8002a70:	e001      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a72:	7dfb      	ldrb	r3, [r7, #23]
 8002a74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d040      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a88:	2b05      	cmp	r3, #5
 8002a8a:	d827      	bhi.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8002a8c:	a201      	add	r2, pc, #4	; (adr r2, 8002a94 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a92:	bf00      	nop
 8002a94:	08002ae3 	.word	0x08002ae3
 8002a98:	08002ab9 	.word	0x08002ab9
 8002a9c:	08002acb 	.word	0x08002acb
 8002aa0:	08002ae3 	.word	0x08002ae3
 8002aa4:	08002ae3 	.word	0x08002ae3
 8002aa8:	08002ae3 	.word	0x08002ae3
 8002aac:	58024400 	.word	0x58024400
 8002ab0:	58024800 	.word	0x58024800
 8002ab4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3304      	adds	r3, #4
 8002abc:	2101      	movs	r1, #1
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 fd50 	bl	8003564 <RCCEx_PLL2_Config>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002ac8:	e00c      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3324      	adds	r3, #36	; 0x24
 8002ace:	2101      	movs	r1, #1
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 fdf9 	bl	80036c8 <RCCEx_PLL3_Config>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002ada:	e003      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	75fb      	strb	r3, [r7, #23]
      break;
 8002ae0:	e000      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8002ae2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ae4:	7dfb      	ldrb	r3, [r7, #23]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10a      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002aea:	4bb3      	ldr	r3, [pc, #716]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aee:	f023 0207 	bic.w	r2, r3, #7
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af8:	49af      	ldr	r1, [pc, #700]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	658b      	str	r3, [r1, #88]	; 0x58
 8002afe:	e001      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b00:	7dfb      	ldrb	r3, [r7, #23]
 8002b02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0320 	and.w	r3, r3, #32
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d044      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b1a:	d01b      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8002b1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b20:	d805      	bhi.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d022      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8002b26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b2a:	d00a      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8002b2c:	e01b      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8002b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b32:	d01d      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8002b34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b38:	d01c      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8002b3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b3e:	d01b      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002b40:	e011      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3304      	adds	r3, #4
 8002b46:	2100      	movs	r1, #0
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 fd0b 	bl	8003564 <RCCEx_PLL2_Config>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002b52:	e012      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3324      	adds	r3, #36	; 0x24
 8002b58:	2102      	movs	r1, #2
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 fdb4 	bl	80036c8 <RCCEx_PLL3_Config>
 8002b60:	4603      	mov	r3, r0
 8002b62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002b64:	e009      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	75fb      	strb	r3, [r7, #23]
      break;
 8002b6a:	e006      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002b6c:	bf00      	nop
 8002b6e:	e004      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002b70:	bf00      	nop
 8002b72:	e002      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002b74:	bf00      	nop
 8002b76:	e000      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b7a:	7dfb      	ldrb	r3, [r7, #23]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10a      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b80:	4b8d      	ldr	r3, [pc, #564]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b84:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b8e:	498a      	ldr	r1, [pc, #552]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	654b      	str	r3, [r1, #84]	; 0x54
 8002b94:	e001      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b96:	7dfb      	ldrb	r3, [r7, #23]
 8002b98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d044      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bb0:	d01b      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8002bb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bb6:	d805      	bhi.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d022      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc0:	d00a      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8002bc2:	e01b      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8002bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc8:	d01d      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8002bca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002bce:	d01c      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8002bd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002bd4:	d01b      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8002bd6:	e011      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3304      	adds	r3, #4
 8002bdc:	2100      	movs	r1, #0
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fcc0 	bl	8003564 <RCCEx_PLL2_Config>
 8002be4:	4603      	mov	r3, r0
 8002be6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002be8:	e012      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3324      	adds	r3, #36	; 0x24
 8002bee:	2102      	movs	r1, #2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 fd69 	bl	80036c8 <RCCEx_PLL3_Config>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002bfa:	e009      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8002c00:	e006      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002c02:	bf00      	nop
 8002c04:	e004      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002c06:	bf00      	nop
 8002c08:	e002      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002c0a:	bf00      	nop
 8002c0c:	e000      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002c0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c10:	7dfb      	ldrb	r3, [r7, #23]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10a      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c16:	4b68      	ldr	r3, [pc, #416]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c24:	4964      	ldr	r1, [pc, #400]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	658b      	str	r3, [r1, #88]	; 0x58
 8002c2a:	e001      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c2c:	7dfb      	ldrb	r3, [r7, #23]
 8002c2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d044      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c46:	d01b      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8002c48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c4c:	d805      	bhi.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d022      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c56:	d00a      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002c58:	e01b      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8002c5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c5e:	d01d      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002c60:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002c64:	d01c      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8002c66:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002c6a:	d01b      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8002c6c:	e011      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	3304      	adds	r3, #4
 8002c72:	2100      	movs	r1, #0
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 fc75 	bl	8003564 <RCCEx_PLL2_Config>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002c7e:	e012      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3324      	adds	r3, #36	; 0x24
 8002c84:	2102      	movs	r1, #2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 fd1e 	bl	80036c8 <RCCEx_PLL3_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002c90:	e009      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	75fb      	strb	r3, [r7, #23]
      break;
 8002c96:	e006      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002c98:	bf00      	nop
 8002c9a:	e004      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002c9c:	bf00      	nop
 8002c9e:	e002      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002ca0:	bf00      	nop
 8002ca2:	e000      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002ca4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ca6:	7dfb      	ldrb	r3, [r7, #23]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10a      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002cac:	4b42      	ldr	r3, [pc, #264]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cba:	493f      	ldr	r1, [pc, #252]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	658b      	str	r3, [r1, #88]	; 0x58
 8002cc0:	e001      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc2:	7dfb      	ldrb	r3, [r7, #23]
 8002cc4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d01b      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cdc:	d10b      	bne.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3324      	adds	r3, #36	; 0x24
 8002ce2:	2102      	movs	r1, #2
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 fcef 	bl	80036c8 <RCCEx_PLL3_Config>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00c      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	75bb      	strb	r3, [r7, #22]
 8002cf4:	e009      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002cf6:	4b30      	ldr	r3, [pc, #192]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d04:	492c      	ldr	r1, [pc, #176]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d01b      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d20:	d10b      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3324      	adds	r3, #36	; 0x24
 8002d26:	2102      	movs	r1, #2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 fccd 	bl	80036c8 <RCCEx_PLL3_Config>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00c      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	75bb      	strb	r3, [r7, #22]
 8002d38:	e009      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d3a:	4b1f      	ldr	r3, [pc, #124]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d48:	491b      	ldr	r1, [pc, #108]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d032      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d64:	d00d      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xb92>
 8002d66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d6a:	d016      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d111      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3304      	adds	r3, #4
 8002d74:	2100      	movs	r1, #0
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 fbf4 	bl	8003564 <RCCEx_PLL2_Config>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002d80:	e00c      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3324      	adds	r3, #36	; 0x24
 8002d86:	2102      	movs	r1, #2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 fc9d 	bl	80036c8 <RCCEx_PLL3_Config>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002d92:	e003      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	75fb      	strb	r3, [r7, #23]
      break;
 8002d98:	e000      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 8002d9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d9c:	7dfb      	ldrb	r3, [r7, #23]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002da2:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002db0:	4901      	ldr	r1, [pc, #4]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	658b      	str	r3, [r1, #88]	; 0x58
 8002db6:	e003      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8002db8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dbc:	7dfb      	ldrb	r3, [r7, #23]
 8002dbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d02f      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dd6:	d00c      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8002dd8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ddc:	d015      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8002dde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002de2:	d10f      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002de4:	4b79      	ldr	r3, [pc, #484]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	4a78      	ldr	r2, [pc, #480]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002df0:	e00c      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3324      	adds	r3, #36	; 0x24
 8002df6:	2101      	movs	r1, #1
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 fc65 	bl	80036c8 <RCCEx_PLL3_Config>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002e02:	e003      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	75fb      	strb	r3, [r7, #23]
      break;
 8002e08:	e000      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8002e0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e0c:	7dfb      	ldrb	r3, [r7, #23]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10a      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e12:	4b6e      	ldr	r3, [pc, #440]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e20:	496a      	ldr	r1, [pc, #424]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	654b      	str	r3, [r1, #84]	; 0x54
 8002e26:	e001      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e28:	7dfb      	ldrb	r3, [r7, #23]
 8002e2a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d029      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 8002e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e44:	d007      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8002e46:	e00f      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e48:	4b60      	ldr	r3, [pc, #384]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	4a5f      	ldr	r2, [pc, #380]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002e54:	e00b      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	2102      	movs	r1, #2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 fb81 	bl	8003564 <RCCEx_PLL2_Config>
 8002e62:	4603      	mov	r3, r0
 8002e64:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002e66:	e002      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d109      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002e74:	4b55      	ldr	r3, [pc, #340]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e80:	4952      	ldr	r1, [pc, #328]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002e86:	e001      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e88:	7dfb      	ldrb	r3, [r7, #23]
 8002e8a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00a      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3324      	adds	r3, #36	; 0x24
 8002e9c:	2102      	movs	r1, #2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 fc12 	bl	80036c8 <RCCEx_PLL3_Config>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d02f      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec2:	d00c      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8002ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec8:	d802      	bhi.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0xce0>
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d011      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8002ece:	e00d      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 8002ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ed4:	d00f      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8002ed6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eda:	d00e      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8002edc:	e006      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ede:	4b3b      	ldr	r3, [pc, #236]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee2:	4a3a      	ldr	r2, [pc, #232]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ee8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8002eea:	e007      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	75fb      	strb	r3, [r7, #23]
      break;
 8002ef0:	e004      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8002ef2:	bf00      	nop
 8002ef4:	e002      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8002ef6:	bf00      	nop
 8002ef8:	e000      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8002efa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002efc:	7dfb      	ldrb	r3, [r7, #23]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d109      	bne.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f02:	4b32      	ldr	r3, [pc, #200]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f0e:	492f      	ldr	r1, [pc, #188]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	654b      	str	r3, [r1, #84]	; 0x54
 8002f14:	e001      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f16:	7dfb      	ldrb	r3, [r7, #23]
 8002f18:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d008      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f26:	4b29      	ldr	r3, [pc, #164]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f32:	4926      	ldr	r1, [pc, #152]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d009      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002f44:	4b21      	ldr	r3, [pc, #132]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f52:	491e      	ldr	r1, [pc, #120]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d008      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f64:	4b19      	ldr	r3, [pc, #100]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f68:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f70:	4916      	ldr	r1, [pc, #88]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00d      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f82:	4b12      	ldr	r3, [pc, #72]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	4a11      	ldr	r2, [pc, #68]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002f88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f8c:	6113      	str	r3, [r2, #16]
 8002f8e:	4b0f      	ldr	r3, [pc, #60]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002f90:	691a      	ldr	r2, [r3, #16]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002f98:	490c      	ldr	r1, [pc, #48]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	da08      	bge.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002fa6:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002faa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb2:	4906      	ldr	r1, [pc, #24]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8002fb8:	7dbb      	ldrb	r3, [r7, #22]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	e000      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	58024400 	.word	0x58024400

08002fd0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002fd4:	f7ff f8c4 	bl	8002160 <HAL_RCC_GetHCLKFreq>
 8002fd8:	4601      	mov	r1, r0
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	091b      	lsrs	r3, r3, #4
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	4a04      	ldr	r2, [pc, #16]	; (8002ff8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002fe6:	5cd3      	ldrb	r3, [r2, r3]
 8002fe8:	f003 031f 	and.w	r3, r3, #31
 8002fec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	58024400 	.word	0x58024400
 8002ff8:	080062a8 	.word	0x080062a8

08002ffc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b089      	sub	sp, #36	; 0x24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003004:	4b9d      	ldr	r3, [pc, #628]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003008:	f003 0303 	and.w	r3, r3, #3
 800300c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 800300e:	4b9b      	ldr	r3, [pc, #620]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	0b1b      	lsrs	r3, r3, #12
 8003014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003018:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 800301a:	4b98      	ldr	r3, [pc, #608]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	f003 0310 	and.w	r3, r3, #16
 8003022:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003024:	4b95      	ldr	r3, [pc, #596]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003028:	08db      	lsrs	r3, r3, #3
 800302a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	fb02 f303 	mul.w	r3, r2, r3
 8003034:	ee07 3a90 	vmov	s15, r3
 8003038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800303c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 810a 	beq.w	800325c <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d05a      	beq.n	8003104 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 800304e:	2b01      	cmp	r3, #1
 8003050:	d302      	bcc.n	8003058 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8003052:	2b02      	cmp	r3, #2
 8003054:	d078      	beq.n	8003148 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8003056:	e099      	b.n	800318c <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003058:	4b88      	ldr	r3, [pc, #544]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0320 	and.w	r3, r3, #32
 8003060:	2b00      	cmp	r3, #0
 8003062:	d02d      	beq.n	80030c0 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003064:	4b85      	ldr	r3, [pc, #532]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	08db      	lsrs	r3, r3, #3
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	4a84      	ldr	r2, [pc, #528]	; (8003280 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8003070:	fa22 f303 	lsr.w	r3, r2, r3
 8003074:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	ee07 3a90 	vmov	s15, r3
 800307c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	ee07 3a90 	vmov	s15, r3
 8003086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800308a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800308e:	4b7b      	ldr	r3, [pc, #492]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003096:	ee07 3a90 	vmov	s15, r3
 800309a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800309e:	ed97 6a03 	vldr	s12, [r7, #12]
 80030a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003284 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80030a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80030be:	e087      	b.n	80031d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	ee07 3a90 	vmov	s15, r3
 80030c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003288 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80030ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030d2:	4b6a      	ldr	r3, [pc, #424]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80030d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030da:	ee07 3a90 	vmov	s15, r3
 80030de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80030e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003284 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80030ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003102:	e065      	b.n	80031d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800310e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800328c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003116:	4b59      	ldr	r3, [pc, #356]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800311e:	ee07 3a90 	vmov	s15, r3
 8003122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003126:	ed97 6a03 	vldr	s12, [r7, #12]
 800312a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003284 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800312e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800313a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800313e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003142:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003146:	e043      	b.n	80031d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	ee07 3a90 	vmov	s15, r3
 800314e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003152:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003290 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8003156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800315a:	4b48      	ldr	r3, [pc, #288]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003162:	ee07 3a90 	vmov	s15, r3
 8003166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800316a:	ed97 6a03 	vldr	s12, [r7, #12]
 800316e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003284 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800317a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800317e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003186:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800318a:	e021      	b.n	80031d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	ee07 3a90 	vmov	s15, r3
 8003192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003196:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800328c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800319a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800319e:	4b37      	ldr	r3, [pc, #220]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80031a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a6:	ee07 3a90 	vmov	s15, r3
 80031aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80031b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003284 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80031b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80031ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80031d0:	4b2a      	ldr	r3, [pc, #168]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80031d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d4:	0a5b      	lsrs	r3, r3, #9
 80031d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031da:	ee07 3a90 	vmov	s15, r3
 80031de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80031ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80031ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031f6:	ee17 2a90 	vmov	r2, s15
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80031fe:	4b1f      	ldr	r3, [pc, #124]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003202:	0c1b      	lsrs	r3, r3, #16
 8003204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003208:	ee07 3a90 	vmov	s15, r3
 800320c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003210:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003214:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003218:	edd7 6a07 	vldr	s13, [r7, #28]
 800321c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003224:	ee17 2a90 	vmov	r2, s15
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800322c:	4b13      	ldr	r3, [pc, #76]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003230:	0e1b      	lsrs	r3, r3, #24
 8003232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003236:	ee07 3a90 	vmov	s15, r3
 800323a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800323e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003242:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003246:	edd7 6a07 	vldr	s13, [r7, #28]
 800324a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800324e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003252:	ee17 2a90 	vmov	r2, s15
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800325a:	e008      	b.n	800326e <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	609a      	str	r2, [r3, #8]
}
 800326e:	bf00      	nop
 8003270:	3724      	adds	r7, #36	; 0x24
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	58024400 	.word	0x58024400
 8003280:	03d09000 	.word	0x03d09000
 8003284:	46000000 	.word	0x46000000
 8003288:	4c742400 	.word	0x4c742400
 800328c:	4a742400 	.word	0x4a742400
 8003290:	4bbebc20 	.word	0x4bbebc20

08003294 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003294:	b480      	push	{r7}
 8003296:	b089      	sub	sp, #36	; 0x24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800329c:	4b9d      	ldr	r3, [pc, #628]	; (8003514 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	f003 0303 	and.w	r3, r3, #3
 80032a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80032a6:	4b9b      	ldr	r3, [pc, #620]	; (8003514 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80032a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032aa:	0d1b      	lsrs	r3, r3, #20
 80032ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032b0:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 80032b2:	4b98      	ldr	r3, [pc, #608]	; (8003514 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80032b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ba:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80032bc:	4b95      	ldr	r3, [pc, #596]	; (8003514 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80032be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c0:	08db      	lsrs	r3, r3, #3
 80032c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	fb02 f303 	mul.w	r3, r2, r3
 80032cc:	ee07 3a90 	vmov	s15, r3
 80032d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032d4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 810a 	beq.w	80034f4 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d05a      	beq.n	800339c <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d302      	bcc.n	80032f0 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d078      	beq.n	80033e0 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 80032ee:	e099      	b.n	8003424 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032f0:	4b88      	ldr	r3, [pc, #544]	; (8003514 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d02d      	beq.n	8003358 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032fc:	4b85      	ldr	r3, [pc, #532]	; (8003514 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	08db      	lsrs	r3, r3, #3
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	4a84      	ldr	r2, [pc, #528]	; (8003518 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8003308:	fa22 f303 	lsr.w	r3, r2, r3
 800330c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	ee07 3a90 	vmov	s15, r3
 8003314:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003326:	4b7b      	ldr	r3, [pc, #492]	; (8003514 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800332e:	ee07 3a90 	vmov	s15, r3
 8003332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003336:	ed97 6a03 	vldr	s12, [r7, #12]
 800333a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800351c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800333e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003346:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800334a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800334e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003352:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003356:	e087      	b.n	8003468 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	ee07 3a90 	vmov	s15, r3
 800335e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003362:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003520 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8003366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800336a:	4b6a      	ldr	r3, [pc, #424]	; (8003514 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800337a:	ed97 6a03 	vldr	s12, [r7, #12]
 800337e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800351c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800338a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800338e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003396:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800339a:	e065      	b.n	8003468 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	ee07 3a90 	vmov	s15, r3
 80033a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80033aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ae:	4b59      	ldr	r3, [pc, #356]	; (8003514 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033b6:	ee07 3a90 	vmov	s15, r3
 80033ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033be:	ed97 6a03 	vldr	s12, [r7, #12]
 80033c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800351c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80033c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80033de:	e043      	b.n	8003468 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	ee07 3a90 	vmov	s15, r3
 80033e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003528 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80033ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033f2:	4b48      	ldr	r3, [pc, #288]	; (8003514 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033fa:	ee07 3a90 	vmov	s15, r3
 80033fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003402:	ed97 6a03 	vldr	s12, [r7, #12]
 8003406:	eddf 5a45 	vldr	s11, [pc, #276]	; 800351c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800340a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800340e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800341a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800341e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003422:	e021      	b.n	8003468 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	ee07 3a90 	vmov	s15, r3
 800342a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800342e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003436:	4b37      	ldr	r3, [pc, #220]	; (8003514 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800343e:	ee07 3a90 	vmov	s15, r3
 8003442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003446:	ed97 6a03 	vldr	s12, [r7, #12]
 800344a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800351c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800344e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003456:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800345a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800345e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003462:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003466:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003468:	4b2a      	ldr	r3, [pc, #168]	; (8003514 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	0a5b      	lsrs	r3, r3, #9
 800346e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003472:	ee07 3a90 	vmov	s15, r3
 8003476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800347a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800347e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003482:	edd7 6a07 	vldr	s13, [r7, #28]
 8003486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800348a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800348e:	ee17 2a90 	vmov	r2, s15
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003496:	4b1f      	ldr	r3, [pc, #124]	; (8003514 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	0c1b      	lsrs	r3, r3, #16
 800349c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034a0:	ee07 3a90 	vmov	s15, r3
 80034a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80034b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034bc:	ee17 2a90 	vmov	r2, s15
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80034c4:	4b13      	ldr	r3, [pc, #76]	; (8003514 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c8:	0e1b      	lsrs	r3, r3, #24
 80034ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034de:	edd7 6a07 	vldr	s13, [r7, #28]
 80034e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034ea:	ee17 2a90 	vmov	r2, s15
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80034f2:	e008      	b.n	8003506 <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	609a      	str	r2, [r3, #8]
}
 8003506:	bf00      	nop
 8003508:	3724      	adds	r7, #36	; 0x24
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	58024400 	.word	0x58024400
 8003518:	03d09000 	.word	0x03d09000
 800351c:	46000000 	.word	0x46000000
 8003520:	4c742400 	.word	0x4c742400
 8003524:	4a742400 	.word	0x4a742400
 8003528:	4bbebc20 	.word	0x4bbebc20

0800352c <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003530:	f7fe fca4 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8003534:	4601      	mov	r1, r0
 8003536:	4b08      	ldr	r3, [pc, #32]	; (8003558 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	0a1b      	lsrs	r3, r3, #8
 800353c:	f003 030f 	and.w	r3, r3, #15
 8003540:	4a06      	ldr	r2, [pc, #24]	; (800355c <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8003542:	5cd3      	ldrb	r3, [r2, r3]
 8003544:	f003 031f 	and.w	r3, r3, #31
 8003548:	fa21 f303 	lsr.w	r3, r1, r3
 800354c:	4a04      	ldr	r2, [pc, #16]	; (8003560 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 800354e:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003550:	4b03      	ldr	r3, [pc, #12]	; (8003560 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8003552:	681b      	ldr	r3, [r3, #0]
}
 8003554:	4618      	mov	r0, r3
 8003556:	bd80      	pop	{r7, pc}
 8003558:	58024400 	.word	0x58024400
 800355c:	080062a8 	.word	0x080062a8
 8003560:	24000000 	.word	0x24000000

08003564 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003572:	4b53      	ldr	r3, [pc, #332]	; (80036c0 <RCCEx_PLL2_Config+0x15c>)
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	2b03      	cmp	r3, #3
 800357c:	d101      	bne.n	8003582 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e099      	b.n	80036b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003582:	4b4f      	ldr	r3, [pc, #316]	; (80036c0 <RCCEx_PLL2_Config+0x15c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a4e      	ldr	r2, [pc, #312]	; (80036c0 <RCCEx_PLL2_Config+0x15c>)
 8003588:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800358c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800358e:	f7fd fbdf 	bl	8000d50 <HAL_GetTick>
 8003592:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003594:	e008      	b.n	80035a8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003596:	f7fd fbdb 	bl	8000d50 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e086      	b.n	80036b6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80035a8:	4b45      	ldr	r3, [pc, #276]	; (80036c0 <RCCEx_PLL2_Config+0x15c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1f0      	bne.n	8003596 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80035b4:	4b42      	ldr	r3, [pc, #264]	; (80036c0 <RCCEx_PLL2_Config+0x15c>)
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	031b      	lsls	r3, r3, #12
 80035c2:	493f      	ldr	r1, [pc, #252]	; (80036c0 <RCCEx_PLL2_Config+0x15c>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	628b      	str	r3, [r1, #40]	; 0x28
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	025b      	lsls	r3, r3, #9
 80035da:	b29b      	uxth	r3, r3
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	041b      	lsls	r3, r3, #16
 80035e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	3b01      	subs	r3, #1
 80035f2:	061b      	lsls	r3, r3, #24
 80035f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80035f8:	4931      	ldr	r1, [pc, #196]	; (80036c0 <RCCEx_PLL2_Config+0x15c>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80035fe:	4b30      	ldr	r3, [pc, #192]	; (80036c0 <RCCEx_PLL2_Config+0x15c>)
 8003600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003602:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	492d      	ldr	r1, [pc, #180]	; (80036c0 <RCCEx_PLL2_Config+0x15c>)
 800360c:	4313      	orrs	r3, r2
 800360e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003610:	4b2b      	ldr	r3, [pc, #172]	; (80036c0 <RCCEx_PLL2_Config+0x15c>)
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	f023 0220 	bic.w	r2, r3, #32
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	4928      	ldr	r1, [pc, #160]	; (80036c0 <RCCEx_PLL2_Config+0x15c>)
 800361e:	4313      	orrs	r3, r2
 8003620:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003622:	4b27      	ldr	r3, [pc, #156]	; (80036c0 <RCCEx_PLL2_Config+0x15c>)
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	4a26      	ldr	r2, [pc, #152]	; (80036c0 <RCCEx_PLL2_Config+0x15c>)
 8003628:	f023 0310 	bic.w	r3, r3, #16
 800362c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800362e:	4b24      	ldr	r3, [pc, #144]	; (80036c0 <RCCEx_PLL2_Config+0x15c>)
 8003630:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003632:	4b24      	ldr	r3, [pc, #144]	; (80036c4 <RCCEx_PLL2_Config+0x160>)
 8003634:	4013      	ands	r3, r2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	69d2      	ldr	r2, [r2, #28]
 800363a:	00d2      	lsls	r2, r2, #3
 800363c:	4920      	ldr	r1, [pc, #128]	; (80036c0 <RCCEx_PLL2_Config+0x15c>)
 800363e:	4313      	orrs	r3, r2
 8003640:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003642:	4b1f      	ldr	r3, [pc, #124]	; (80036c0 <RCCEx_PLL2_Config+0x15c>)
 8003644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003646:	4a1e      	ldr	r2, [pc, #120]	; (80036c0 <RCCEx_PLL2_Config+0x15c>)
 8003648:	f043 0310 	orr.w	r3, r3, #16
 800364c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d106      	bne.n	8003662 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003654:	4b1a      	ldr	r3, [pc, #104]	; (80036c0 <RCCEx_PLL2_Config+0x15c>)
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	4a19      	ldr	r2, [pc, #100]	; (80036c0 <RCCEx_PLL2_Config+0x15c>)
 800365a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800365e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003660:	e00f      	b.n	8003682 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d106      	bne.n	8003676 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003668:	4b15      	ldr	r3, [pc, #84]	; (80036c0 <RCCEx_PLL2_Config+0x15c>)
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366c:	4a14      	ldr	r2, [pc, #80]	; (80036c0 <RCCEx_PLL2_Config+0x15c>)
 800366e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003672:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003674:	e005      	b.n	8003682 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003676:	4b12      	ldr	r3, [pc, #72]	; (80036c0 <RCCEx_PLL2_Config+0x15c>)
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	4a11      	ldr	r2, [pc, #68]	; (80036c0 <RCCEx_PLL2_Config+0x15c>)
 800367c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003680:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003682:	4b0f      	ldr	r3, [pc, #60]	; (80036c0 <RCCEx_PLL2_Config+0x15c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a0e      	ldr	r2, [pc, #56]	; (80036c0 <RCCEx_PLL2_Config+0x15c>)
 8003688:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800368c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800368e:	f7fd fb5f 	bl	8000d50 <HAL_GetTick>
 8003692:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003694:	e008      	b.n	80036a8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003696:	f7fd fb5b 	bl	8000d50 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e006      	b.n	80036b6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80036a8:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <RCCEx_PLL2_Config+0x15c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0f0      	beq.n	8003696 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	58024400 	.word	0x58024400
 80036c4:	ffff0007 	.word	0xffff0007

080036c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80036d6:	4b53      	ldr	r3, [pc, #332]	; (8003824 <RCCEx_PLL3_Config+0x15c>)
 80036d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	2b03      	cmp	r3, #3
 80036e0:	d101      	bne.n	80036e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e099      	b.n	800381a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80036e6:	4b4f      	ldr	r3, [pc, #316]	; (8003824 <RCCEx_PLL3_Config+0x15c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a4e      	ldr	r2, [pc, #312]	; (8003824 <RCCEx_PLL3_Config+0x15c>)
 80036ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036f2:	f7fd fb2d 	bl	8000d50 <HAL_GetTick>
 80036f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80036f8:	e008      	b.n	800370c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80036fa:	f7fd fb29 	bl	8000d50 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e086      	b.n	800381a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800370c:	4b45      	ldr	r3, [pc, #276]	; (8003824 <RCCEx_PLL3_Config+0x15c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1f0      	bne.n	80036fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003718:	4b42      	ldr	r3, [pc, #264]	; (8003824 <RCCEx_PLL3_Config+0x15c>)
 800371a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	051b      	lsls	r3, r3, #20
 8003726:	493f      	ldr	r1, [pc, #252]	; (8003824 <RCCEx_PLL3_Config+0x15c>)
 8003728:	4313      	orrs	r3, r2
 800372a:	628b      	str	r3, [r1, #40]	; 0x28
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	3b01      	subs	r3, #1
 8003732:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	3b01      	subs	r3, #1
 800373c:	025b      	lsls	r3, r3, #9
 800373e:	b29b      	uxth	r3, r3
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	3b01      	subs	r3, #1
 8003748:	041b      	lsls	r3, r3, #16
 800374a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	3b01      	subs	r3, #1
 8003756:	061b      	lsls	r3, r3, #24
 8003758:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800375c:	4931      	ldr	r1, [pc, #196]	; (8003824 <RCCEx_PLL3_Config+0x15c>)
 800375e:	4313      	orrs	r3, r2
 8003760:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003762:	4b30      	ldr	r3, [pc, #192]	; (8003824 <RCCEx_PLL3_Config+0x15c>)
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	492d      	ldr	r1, [pc, #180]	; (8003824 <RCCEx_PLL3_Config+0x15c>)
 8003770:	4313      	orrs	r3, r2
 8003772:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003774:	4b2b      	ldr	r3, [pc, #172]	; (8003824 <RCCEx_PLL3_Config+0x15c>)
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	4928      	ldr	r1, [pc, #160]	; (8003824 <RCCEx_PLL3_Config+0x15c>)
 8003782:	4313      	orrs	r3, r2
 8003784:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003786:	4b27      	ldr	r3, [pc, #156]	; (8003824 <RCCEx_PLL3_Config+0x15c>)
 8003788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378a:	4a26      	ldr	r2, [pc, #152]	; (8003824 <RCCEx_PLL3_Config+0x15c>)
 800378c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003790:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003792:	4b24      	ldr	r3, [pc, #144]	; (8003824 <RCCEx_PLL3_Config+0x15c>)
 8003794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003796:	4b24      	ldr	r3, [pc, #144]	; (8003828 <RCCEx_PLL3_Config+0x160>)
 8003798:	4013      	ands	r3, r2
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	69d2      	ldr	r2, [r2, #28]
 800379e:	00d2      	lsls	r2, r2, #3
 80037a0:	4920      	ldr	r1, [pc, #128]	; (8003824 <RCCEx_PLL3_Config+0x15c>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80037a6:	4b1f      	ldr	r3, [pc, #124]	; (8003824 <RCCEx_PLL3_Config+0x15c>)
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	4a1e      	ldr	r2, [pc, #120]	; (8003824 <RCCEx_PLL3_Config+0x15c>)
 80037ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d106      	bne.n	80037c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80037b8:	4b1a      	ldr	r3, [pc, #104]	; (8003824 <RCCEx_PLL3_Config+0x15c>)
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	4a19      	ldr	r2, [pc, #100]	; (8003824 <RCCEx_PLL3_Config+0x15c>)
 80037be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80037c4:	e00f      	b.n	80037e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d106      	bne.n	80037da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80037cc:	4b15      	ldr	r3, [pc, #84]	; (8003824 <RCCEx_PLL3_Config+0x15c>)
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	4a14      	ldr	r2, [pc, #80]	; (8003824 <RCCEx_PLL3_Config+0x15c>)
 80037d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80037d8:	e005      	b.n	80037e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80037da:	4b12      	ldr	r3, [pc, #72]	; (8003824 <RCCEx_PLL3_Config+0x15c>)
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	4a11      	ldr	r2, [pc, #68]	; (8003824 <RCCEx_PLL3_Config+0x15c>)
 80037e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80037e6:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <RCCEx_PLL3_Config+0x15c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a0e      	ldr	r2, [pc, #56]	; (8003824 <RCCEx_PLL3_Config+0x15c>)
 80037ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037f2:	f7fd faad 	bl	8000d50 <HAL_GetTick>
 80037f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80037f8:	e008      	b.n	800380c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80037fa:	f7fd faa9 	bl	8000d50 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e006      	b.n	800381a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800380c:	4b05      	ldr	r3, [pc, #20]	; (8003824 <RCCEx_PLL3_Config+0x15c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003818:	7bfb      	ldrb	r3, [r7, #15]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	58024400 	.word	0x58024400
 8003828:	ffff0007 	.word	0xffff0007

0800382c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e042      	b.n	80038c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003844:	2b00      	cmp	r3, #0
 8003846:	d106      	bne.n	8003856 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7fd f8f7 	bl	8000a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2224      	movs	r2, #36	; 0x24
 800385a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0201 	bic.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f8c2 	bl	80039f8 <UART_SetConfig>
 8003874:	4603      	mov	r3, r0
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e022      	b.n	80038c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f002 fa34 	bl	8005cf4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800389a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f002 fabb 	bl	8005e38 <UART_CheckIdleState>
 80038c2:	4603      	mov	r3, r0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08a      	sub	sp, #40	; 0x28
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	4613      	mov	r3, r2
 80038da:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	f040 8083 	bne.w	80039ee <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <HAL_UART_Transmit+0x28>
 80038ee:	88fb      	ldrh	r3, [r7, #6]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e07b      	b.n	80039f0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_UART_Transmit+0x3a>
 8003902:	2302      	movs	r3, #2
 8003904:	e074      	b.n	80039f0 <HAL_UART_Transmit+0x124>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2221      	movs	r2, #33	; 0x21
 800391a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800391e:	f7fd fa17 	bl	8000d50 <HAL_GetTick>
 8003922:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	88fa      	ldrh	r2, [r7, #6]
 8003928:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	88fa      	ldrh	r2, [r7, #6]
 8003930:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800393c:	d108      	bne.n	8003950 <HAL_UART_Transmit+0x84>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d104      	bne.n	8003950 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003946:	2300      	movs	r3, #0
 8003948:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	e003      	b.n	8003958 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003954:	2300      	movs	r3, #0
 8003956:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003958:	e02c      	b.n	80039b4 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2200      	movs	r2, #0
 8003962:	2180      	movs	r1, #128	; 0x80
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f002 faaf 	bl	8005ec8 <UART_WaitOnFlagUntilTimeout>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e03d      	b.n	80039f0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10b      	bne.n	8003992 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	461a      	mov	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003988:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	3302      	adds	r3, #2
 800398e:	61bb      	str	r3, [r7, #24]
 8003990:	e007      	b.n	80039a2 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	781a      	ldrb	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	3301      	adds	r3, #1
 80039a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	3b01      	subs	r3, #1
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1cc      	bne.n	800395a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2200      	movs	r2, #0
 80039c8:	2140      	movs	r1, #64	; 0x40
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f002 fa7c 	bl	8005ec8 <UART_WaitOnFlagUntilTimeout>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e00a      	b.n	80039f0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2220      	movs	r2, #32
 80039de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	e000      	b.n	80039f0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80039ee:	2302      	movs	r3, #2
  }
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3720      	adds	r7, #32
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039f8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80039fc:	b090      	sub	sp, #64	; 0x40
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	4bc1      	ldr	r3, [pc, #772]	; (8003d40 <UART_SetConfig+0x348>)
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6812      	ldr	r2, [r2, #0]
 8003a40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a42:	430b      	orrs	r3, r1
 8003a44:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68da      	ldr	r2, [r3, #12]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4ab7      	ldr	r2, [pc, #732]	; (8003d44 <UART_SetConfig+0x34c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d004      	beq.n	8003a76 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a72:	4313      	orrs	r3, r2
 8003a74:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	4bb2      	ldr	r3, [pc, #712]	; (8003d48 <UART_SetConfig+0x350>)
 8003a7e:	4013      	ands	r3, r2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6812      	ldr	r2, [r2, #0]
 8003a84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a86:	430b      	orrs	r3, r1
 8003a88:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	f023 010f 	bic.w	r1, r3, #15
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4aa9      	ldr	r2, [pc, #676]	; (8003d4c <UART_SetConfig+0x354>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d177      	bne.n	8003b9a <UART_SetConfig+0x1a2>
 8003aaa:	4ba9      	ldr	r3, [pc, #676]	; (8003d50 <UART_SetConfig+0x358>)
 8003aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ab2:	2b28      	cmp	r3, #40	; 0x28
 8003ab4:	d86c      	bhi.n	8003b90 <UART_SetConfig+0x198>
 8003ab6:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <UART_SetConfig+0xc4>)
 8003ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abc:	08003b61 	.word	0x08003b61
 8003ac0:	08003b91 	.word	0x08003b91
 8003ac4:	08003b91 	.word	0x08003b91
 8003ac8:	08003b91 	.word	0x08003b91
 8003acc:	08003b91 	.word	0x08003b91
 8003ad0:	08003b91 	.word	0x08003b91
 8003ad4:	08003b91 	.word	0x08003b91
 8003ad8:	08003b91 	.word	0x08003b91
 8003adc:	08003b69 	.word	0x08003b69
 8003ae0:	08003b91 	.word	0x08003b91
 8003ae4:	08003b91 	.word	0x08003b91
 8003ae8:	08003b91 	.word	0x08003b91
 8003aec:	08003b91 	.word	0x08003b91
 8003af0:	08003b91 	.word	0x08003b91
 8003af4:	08003b91 	.word	0x08003b91
 8003af8:	08003b91 	.word	0x08003b91
 8003afc:	08003b71 	.word	0x08003b71
 8003b00:	08003b91 	.word	0x08003b91
 8003b04:	08003b91 	.word	0x08003b91
 8003b08:	08003b91 	.word	0x08003b91
 8003b0c:	08003b91 	.word	0x08003b91
 8003b10:	08003b91 	.word	0x08003b91
 8003b14:	08003b91 	.word	0x08003b91
 8003b18:	08003b91 	.word	0x08003b91
 8003b1c:	08003b79 	.word	0x08003b79
 8003b20:	08003b91 	.word	0x08003b91
 8003b24:	08003b91 	.word	0x08003b91
 8003b28:	08003b91 	.word	0x08003b91
 8003b2c:	08003b91 	.word	0x08003b91
 8003b30:	08003b91 	.word	0x08003b91
 8003b34:	08003b91 	.word	0x08003b91
 8003b38:	08003b91 	.word	0x08003b91
 8003b3c:	08003b81 	.word	0x08003b81
 8003b40:	08003b91 	.word	0x08003b91
 8003b44:	08003b91 	.word	0x08003b91
 8003b48:	08003b91 	.word	0x08003b91
 8003b4c:	08003b91 	.word	0x08003b91
 8003b50:	08003b91 	.word	0x08003b91
 8003b54:	08003b91 	.word	0x08003b91
 8003b58:	08003b91 	.word	0x08003b91
 8003b5c:	08003b89 	.word	0x08003b89
 8003b60:	2301      	movs	r3, #1
 8003b62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003b66:	e233      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003b68:	2304      	movs	r3, #4
 8003b6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003b6e:	e22f      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003b70:	2308      	movs	r3, #8
 8003b72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003b76:	e22b      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003b78:	2310      	movs	r3, #16
 8003b7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003b7e:	e227      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003b80:	2320      	movs	r3, #32
 8003b82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003b86:	e223      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003b88:	2340      	movs	r3, #64	; 0x40
 8003b8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003b8e:	e21f      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003b90:	2380      	movs	r3, #128	; 0x80
 8003b92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003b96:	bf00      	nop
 8003b98:	e21a      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a6d      	ldr	r2, [pc, #436]	; (8003d54 <UART_SetConfig+0x35c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d132      	bne.n	8003c0a <UART_SetConfig+0x212>
 8003ba4:	4b6a      	ldr	r3, [pc, #424]	; (8003d50 <UART_SetConfig+0x358>)
 8003ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	2b05      	cmp	r3, #5
 8003bae:	d827      	bhi.n	8003c00 <UART_SetConfig+0x208>
 8003bb0:	a201      	add	r2, pc, #4	; (adr r2, 8003bb8 <UART_SetConfig+0x1c0>)
 8003bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb6:	bf00      	nop
 8003bb8:	08003bd1 	.word	0x08003bd1
 8003bbc:	08003bd9 	.word	0x08003bd9
 8003bc0:	08003be1 	.word	0x08003be1
 8003bc4:	08003be9 	.word	0x08003be9
 8003bc8:	08003bf1 	.word	0x08003bf1
 8003bcc:	08003bf9 	.word	0x08003bf9
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003bd6:	e1fb      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003bd8:	2304      	movs	r3, #4
 8003bda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003bde:	e1f7      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003be0:	2308      	movs	r3, #8
 8003be2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003be6:	e1f3      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003be8:	2310      	movs	r3, #16
 8003bea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003bee:	e1ef      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003bf0:	2320      	movs	r3, #32
 8003bf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003bf6:	e1eb      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003bf8:	2340      	movs	r3, #64	; 0x40
 8003bfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003bfe:	e1e7      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003c00:	2380      	movs	r3, #128	; 0x80
 8003c02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003c06:	bf00      	nop
 8003c08:	e1e2      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a52      	ldr	r2, [pc, #328]	; (8003d58 <UART_SetConfig+0x360>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d132      	bne.n	8003c7a <UART_SetConfig+0x282>
 8003c14:	4b4e      	ldr	r3, [pc, #312]	; (8003d50 <UART_SetConfig+0x358>)
 8003c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	2b05      	cmp	r3, #5
 8003c1e:	d827      	bhi.n	8003c70 <UART_SetConfig+0x278>
 8003c20:	a201      	add	r2, pc, #4	; (adr r2, 8003c28 <UART_SetConfig+0x230>)
 8003c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c26:	bf00      	nop
 8003c28:	08003c41 	.word	0x08003c41
 8003c2c:	08003c49 	.word	0x08003c49
 8003c30:	08003c51 	.word	0x08003c51
 8003c34:	08003c59 	.word	0x08003c59
 8003c38:	08003c61 	.word	0x08003c61
 8003c3c:	08003c69 	.word	0x08003c69
 8003c40:	2300      	movs	r3, #0
 8003c42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003c46:	e1c3      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003c48:	2304      	movs	r3, #4
 8003c4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003c4e:	e1bf      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003c50:	2308      	movs	r3, #8
 8003c52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003c56:	e1bb      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003c58:	2310      	movs	r3, #16
 8003c5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003c5e:	e1b7      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003c60:	2320      	movs	r3, #32
 8003c62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003c66:	e1b3      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003c68:	2340      	movs	r3, #64	; 0x40
 8003c6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003c6e:	e1af      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003c70:	2380      	movs	r3, #128	; 0x80
 8003c72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003c76:	bf00      	nop
 8003c78:	e1aa      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a37      	ldr	r2, [pc, #220]	; (8003d5c <UART_SetConfig+0x364>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d132      	bne.n	8003cea <UART_SetConfig+0x2f2>
 8003c84:	4b32      	ldr	r3, [pc, #200]	; (8003d50 <UART_SetConfig+0x358>)
 8003c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	2b05      	cmp	r3, #5
 8003c8e:	d827      	bhi.n	8003ce0 <UART_SetConfig+0x2e8>
 8003c90:	a201      	add	r2, pc, #4	; (adr r2, 8003c98 <UART_SetConfig+0x2a0>)
 8003c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c96:	bf00      	nop
 8003c98:	08003cb1 	.word	0x08003cb1
 8003c9c:	08003cb9 	.word	0x08003cb9
 8003ca0:	08003cc1 	.word	0x08003cc1
 8003ca4:	08003cc9 	.word	0x08003cc9
 8003ca8:	08003cd1 	.word	0x08003cd1
 8003cac:	08003cd9 	.word	0x08003cd9
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003cb6:	e18b      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003cb8:	2304      	movs	r3, #4
 8003cba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003cbe:	e187      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003cc0:	2308      	movs	r3, #8
 8003cc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003cc6:	e183      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003cc8:	2310      	movs	r3, #16
 8003cca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003cce:	e17f      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003cd0:	2320      	movs	r3, #32
 8003cd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003cd6:	e17b      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003cd8:	2340      	movs	r3, #64	; 0x40
 8003cda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003cde:	e177      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003ce0:	2380      	movs	r3, #128	; 0x80
 8003ce2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003ce6:	bf00      	nop
 8003ce8:	e172      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a1c      	ldr	r2, [pc, #112]	; (8003d60 <UART_SetConfig+0x368>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d144      	bne.n	8003d7e <UART_SetConfig+0x386>
 8003cf4:	4b16      	ldr	r3, [pc, #88]	; (8003d50 <UART_SetConfig+0x358>)
 8003cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	2b05      	cmp	r3, #5
 8003cfe:	d839      	bhi.n	8003d74 <UART_SetConfig+0x37c>
 8003d00:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <UART_SetConfig+0x310>)
 8003d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d06:	bf00      	nop
 8003d08:	08003d21 	.word	0x08003d21
 8003d0c:	08003d29 	.word	0x08003d29
 8003d10:	08003d31 	.word	0x08003d31
 8003d14:	08003d39 	.word	0x08003d39
 8003d18:	08003d65 	.word	0x08003d65
 8003d1c:	08003d6d 	.word	0x08003d6d
 8003d20:	2300      	movs	r3, #0
 8003d22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003d26:	e153      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003d28:	2304      	movs	r3, #4
 8003d2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003d2e:	e14f      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003d30:	2308      	movs	r3, #8
 8003d32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003d36:	e14b      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003d38:	2310      	movs	r3, #16
 8003d3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003d3e:	e147      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003d40:	cfff69f3 	.word	0xcfff69f3
 8003d44:	58000c00 	.word	0x58000c00
 8003d48:	11fff4ff 	.word	0x11fff4ff
 8003d4c:	40011000 	.word	0x40011000
 8003d50:	58024400 	.word	0x58024400
 8003d54:	40004400 	.word	0x40004400
 8003d58:	40004800 	.word	0x40004800
 8003d5c:	40004c00 	.word	0x40004c00
 8003d60:	40005000 	.word	0x40005000
 8003d64:	2320      	movs	r3, #32
 8003d66:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003d6a:	e131      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003d6c:	2340      	movs	r3, #64	; 0x40
 8003d6e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003d72:	e12d      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003d74:	2380      	movs	r3, #128	; 0x80
 8003d76:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003d7a:	bf00      	nop
 8003d7c:	e128      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4ac3      	ldr	r2, [pc, #780]	; (8004090 <UART_SetConfig+0x698>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d178      	bne.n	8003e7a <UART_SetConfig+0x482>
 8003d88:	4bc2      	ldr	r3, [pc, #776]	; (8004094 <UART_SetConfig+0x69c>)
 8003d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d90:	2b28      	cmp	r3, #40	; 0x28
 8003d92:	d86d      	bhi.n	8003e70 <UART_SetConfig+0x478>
 8003d94:	a201      	add	r2, pc, #4	; (adr r2, 8003d9c <UART_SetConfig+0x3a4>)
 8003d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9a:	bf00      	nop
 8003d9c:	08003e41 	.word	0x08003e41
 8003da0:	08003e71 	.word	0x08003e71
 8003da4:	08003e71 	.word	0x08003e71
 8003da8:	08003e71 	.word	0x08003e71
 8003dac:	08003e71 	.word	0x08003e71
 8003db0:	08003e71 	.word	0x08003e71
 8003db4:	08003e71 	.word	0x08003e71
 8003db8:	08003e71 	.word	0x08003e71
 8003dbc:	08003e49 	.word	0x08003e49
 8003dc0:	08003e71 	.word	0x08003e71
 8003dc4:	08003e71 	.word	0x08003e71
 8003dc8:	08003e71 	.word	0x08003e71
 8003dcc:	08003e71 	.word	0x08003e71
 8003dd0:	08003e71 	.word	0x08003e71
 8003dd4:	08003e71 	.word	0x08003e71
 8003dd8:	08003e71 	.word	0x08003e71
 8003ddc:	08003e51 	.word	0x08003e51
 8003de0:	08003e71 	.word	0x08003e71
 8003de4:	08003e71 	.word	0x08003e71
 8003de8:	08003e71 	.word	0x08003e71
 8003dec:	08003e71 	.word	0x08003e71
 8003df0:	08003e71 	.word	0x08003e71
 8003df4:	08003e71 	.word	0x08003e71
 8003df8:	08003e71 	.word	0x08003e71
 8003dfc:	08003e59 	.word	0x08003e59
 8003e00:	08003e71 	.word	0x08003e71
 8003e04:	08003e71 	.word	0x08003e71
 8003e08:	08003e71 	.word	0x08003e71
 8003e0c:	08003e71 	.word	0x08003e71
 8003e10:	08003e71 	.word	0x08003e71
 8003e14:	08003e71 	.word	0x08003e71
 8003e18:	08003e71 	.word	0x08003e71
 8003e1c:	08003e61 	.word	0x08003e61
 8003e20:	08003e71 	.word	0x08003e71
 8003e24:	08003e71 	.word	0x08003e71
 8003e28:	08003e71 	.word	0x08003e71
 8003e2c:	08003e71 	.word	0x08003e71
 8003e30:	08003e71 	.word	0x08003e71
 8003e34:	08003e71 	.word	0x08003e71
 8003e38:	08003e71 	.word	0x08003e71
 8003e3c:	08003e69 	.word	0x08003e69
 8003e40:	2301      	movs	r3, #1
 8003e42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003e46:	e0c3      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003e48:	2304      	movs	r3, #4
 8003e4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003e4e:	e0bf      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003e50:	2308      	movs	r3, #8
 8003e52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003e56:	e0bb      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003e58:	2310      	movs	r3, #16
 8003e5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003e5e:	e0b7      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003e60:	2320      	movs	r3, #32
 8003e62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003e66:	e0b3      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003e68:	2340      	movs	r3, #64	; 0x40
 8003e6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003e6e:	e0af      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003e70:	2380      	movs	r3, #128	; 0x80
 8003e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003e76:	bf00      	nop
 8003e78:	e0aa      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a86      	ldr	r2, [pc, #536]	; (8004098 <UART_SetConfig+0x6a0>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d132      	bne.n	8003eea <UART_SetConfig+0x4f2>
 8003e84:	4b83      	ldr	r3, [pc, #524]	; (8004094 <UART_SetConfig+0x69c>)
 8003e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	2b05      	cmp	r3, #5
 8003e8e:	d827      	bhi.n	8003ee0 <UART_SetConfig+0x4e8>
 8003e90:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <UART_SetConfig+0x4a0>)
 8003e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e96:	bf00      	nop
 8003e98:	08003eb1 	.word	0x08003eb1
 8003e9c:	08003eb9 	.word	0x08003eb9
 8003ea0:	08003ec1 	.word	0x08003ec1
 8003ea4:	08003ec9 	.word	0x08003ec9
 8003ea8:	08003ed1 	.word	0x08003ed1
 8003eac:	08003ed9 	.word	0x08003ed9
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003eb6:	e08b      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003eb8:	2304      	movs	r3, #4
 8003eba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003ebe:	e087      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003ec0:	2308      	movs	r3, #8
 8003ec2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003ec6:	e083      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003ec8:	2310      	movs	r3, #16
 8003eca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003ece:	e07f      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003ed0:	2320      	movs	r3, #32
 8003ed2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003ed6:	e07b      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003ed8:	2340      	movs	r3, #64	; 0x40
 8003eda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003ede:	e077      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003ee0:	2380      	movs	r3, #128	; 0x80
 8003ee2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003ee6:	bf00      	nop
 8003ee8:	e072      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a6b      	ldr	r2, [pc, #428]	; (800409c <UART_SetConfig+0x6a4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d132      	bne.n	8003f5a <UART_SetConfig+0x562>
 8003ef4:	4b67      	ldr	r3, [pc, #412]	; (8004094 <UART_SetConfig+0x69c>)
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	2b05      	cmp	r3, #5
 8003efe:	d827      	bhi.n	8003f50 <UART_SetConfig+0x558>
 8003f00:	a201      	add	r2, pc, #4	; (adr r2, 8003f08 <UART_SetConfig+0x510>)
 8003f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f06:	bf00      	nop
 8003f08:	08003f21 	.word	0x08003f21
 8003f0c:	08003f29 	.word	0x08003f29
 8003f10:	08003f31 	.word	0x08003f31
 8003f14:	08003f39 	.word	0x08003f39
 8003f18:	08003f41 	.word	0x08003f41
 8003f1c:	08003f49 	.word	0x08003f49
 8003f20:	2300      	movs	r3, #0
 8003f22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003f26:	e053      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003f28:	2304      	movs	r3, #4
 8003f2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003f2e:	e04f      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003f30:	2308      	movs	r3, #8
 8003f32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003f36:	e04b      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003f38:	2310      	movs	r3, #16
 8003f3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003f3e:	e047      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003f40:	2320      	movs	r3, #32
 8003f42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003f46:	e043      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003f48:	2340      	movs	r3, #64	; 0x40
 8003f4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003f4e:	e03f      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003f50:	2380      	movs	r3, #128	; 0x80
 8003f52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003f56:	bf00      	nop
 8003f58:	e03a      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a50      	ldr	r2, [pc, #320]	; (80040a0 <UART_SetConfig+0x6a8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d132      	bne.n	8003fca <UART_SetConfig+0x5d2>
 8003f64:	4b4b      	ldr	r3, [pc, #300]	; (8004094 <UART_SetConfig+0x69c>)
 8003f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	2b05      	cmp	r3, #5
 8003f6e:	d827      	bhi.n	8003fc0 <UART_SetConfig+0x5c8>
 8003f70:	a201      	add	r2, pc, #4	; (adr r2, 8003f78 <UART_SetConfig+0x580>)
 8003f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f76:	bf00      	nop
 8003f78:	08003f91 	.word	0x08003f91
 8003f7c:	08003f99 	.word	0x08003f99
 8003f80:	08003fa1 	.word	0x08003fa1
 8003f84:	08003fa9 	.word	0x08003fa9
 8003f88:	08003fb1 	.word	0x08003fb1
 8003f8c:	08003fb9 	.word	0x08003fb9
 8003f90:	2302      	movs	r3, #2
 8003f92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003f96:	e01b      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003f98:	2304      	movs	r3, #4
 8003f9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003f9e:	e017      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003fa0:	2308      	movs	r3, #8
 8003fa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003fa6:	e013      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003fa8:	2310      	movs	r3, #16
 8003faa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003fae:	e00f      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003fb0:	2320      	movs	r3, #32
 8003fb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003fb6:	e00b      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003fb8:	2340      	movs	r3, #64	; 0x40
 8003fba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003fbe:	e007      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003fc0:	2380      	movs	r3, #128	; 0x80
 8003fc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003fc6:	bf00      	nop
 8003fc8:	e002      	b.n	8003fd0 <UART_SetConfig+0x5d8>
 8003fca:	2380      	movs	r3, #128	; 0x80
 8003fcc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a32      	ldr	r2, [pc, #200]	; (80040a0 <UART_SetConfig+0x6a8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	f040 86f7 	bne.w	8004dca <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fdc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	f000 80c0 	beq.w	8004166 <UART_SetConfig+0x76e>
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	dc04      	bgt.n	8003ff4 <UART_SetConfig+0x5fc>
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d00c      	beq.n	8004008 <UART_SetConfig+0x610>
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d065      	beq.n	80040be <UART_SetConfig+0x6c6>
 8003ff2:	e27a      	b.n	80044ea <UART_SetConfig+0xaf2>
 8003ff4:	2b20      	cmp	r3, #32
 8003ff6:	f000 81b0 	beq.w	800435a <UART_SetConfig+0x962>
 8003ffa:	2b40      	cmp	r3, #64	; 0x40
 8003ffc:	f000 821e 	beq.w	800443c <UART_SetConfig+0xa44>
 8004000:	2b10      	cmp	r3, #16
 8004002:	f000 8104 	beq.w	800420e <UART_SetConfig+0x816>
 8004006:	e270      	b.n	80044ea <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004008:	f7fe ffe2 	bl	8002fd0 <HAL_RCCEx_GetD3PCLK1Freq>
 800400c:	4602      	mov	r2, r0
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	2b00      	cmp	r3, #0
 8004014:	d04e      	beq.n	80040b4 <UART_SetConfig+0x6bc>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	2b01      	cmp	r3, #1
 800401c:	d048      	beq.n	80040b0 <UART_SetConfig+0x6b8>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	2b02      	cmp	r3, #2
 8004024:	d042      	beq.n	80040ac <UART_SetConfig+0x6b4>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	2b03      	cmp	r3, #3
 800402c:	d03c      	beq.n	80040a8 <UART_SetConfig+0x6b0>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	2b04      	cmp	r3, #4
 8004034:	d036      	beq.n	80040a4 <UART_SetConfig+0x6ac>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	2b05      	cmp	r3, #5
 800403c:	d026      	beq.n	800408c <UART_SetConfig+0x694>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	2b06      	cmp	r3, #6
 8004044:	d020      	beq.n	8004088 <UART_SetConfig+0x690>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	2b07      	cmp	r3, #7
 800404c:	d01a      	beq.n	8004084 <UART_SetConfig+0x68c>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	2b08      	cmp	r3, #8
 8004054:	d014      	beq.n	8004080 <UART_SetConfig+0x688>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	2b09      	cmp	r3, #9
 800405c:	d00e      	beq.n	800407c <UART_SetConfig+0x684>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	2b0a      	cmp	r3, #10
 8004064:	d008      	beq.n	8004078 <UART_SetConfig+0x680>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	2b0b      	cmp	r3, #11
 800406c:	d102      	bne.n	8004074 <UART_SetConfig+0x67c>
 800406e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004072:	e020      	b.n	80040b6 <UART_SetConfig+0x6be>
 8004074:	2301      	movs	r3, #1
 8004076:	e01e      	b.n	80040b6 <UART_SetConfig+0x6be>
 8004078:	2380      	movs	r3, #128	; 0x80
 800407a:	e01c      	b.n	80040b6 <UART_SetConfig+0x6be>
 800407c:	2340      	movs	r3, #64	; 0x40
 800407e:	e01a      	b.n	80040b6 <UART_SetConfig+0x6be>
 8004080:	2320      	movs	r3, #32
 8004082:	e018      	b.n	80040b6 <UART_SetConfig+0x6be>
 8004084:	2310      	movs	r3, #16
 8004086:	e016      	b.n	80040b6 <UART_SetConfig+0x6be>
 8004088:	230c      	movs	r3, #12
 800408a:	e014      	b.n	80040b6 <UART_SetConfig+0x6be>
 800408c:	230a      	movs	r3, #10
 800408e:	e012      	b.n	80040b6 <UART_SetConfig+0x6be>
 8004090:	40011400 	.word	0x40011400
 8004094:	58024400 	.word	0x58024400
 8004098:	40007800 	.word	0x40007800
 800409c:	40007c00 	.word	0x40007c00
 80040a0:	58000c00 	.word	0x58000c00
 80040a4:	2308      	movs	r3, #8
 80040a6:	e006      	b.n	80040b6 <UART_SetConfig+0x6be>
 80040a8:	2306      	movs	r3, #6
 80040aa:	e004      	b.n	80040b6 <UART_SetConfig+0x6be>
 80040ac:	2304      	movs	r3, #4
 80040ae:	e002      	b.n	80040b6 <UART_SetConfig+0x6be>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e000      	b.n	80040b6 <UART_SetConfig+0x6be>
 80040b4:	2301      	movs	r3, #1
 80040b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80040bc:	e219      	b.n	80044f2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80040be:	f107 0318 	add.w	r3, r7, #24
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fe ff9a 	bl	8002ffc <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80040c8:	69fa      	ldr	r2, [r7, #28]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d044      	beq.n	800415c <UART_SetConfig+0x764>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d03e      	beq.n	8004158 <UART_SetConfig+0x760>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d038      	beq.n	8004154 <UART_SetConfig+0x75c>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	2b03      	cmp	r3, #3
 80040e8:	d032      	beq.n	8004150 <UART_SetConfig+0x758>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d02c      	beq.n	800414c <UART_SetConfig+0x754>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	2b05      	cmp	r3, #5
 80040f8:	d026      	beq.n	8004148 <UART_SetConfig+0x750>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	2b06      	cmp	r3, #6
 8004100:	d020      	beq.n	8004144 <UART_SetConfig+0x74c>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	2b07      	cmp	r3, #7
 8004108:	d01a      	beq.n	8004140 <UART_SetConfig+0x748>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	2b08      	cmp	r3, #8
 8004110:	d014      	beq.n	800413c <UART_SetConfig+0x744>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	2b09      	cmp	r3, #9
 8004118:	d00e      	beq.n	8004138 <UART_SetConfig+0x740>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	2b0a      	cmp	r3, #10
 8004120:	d008      	beq.n	8004134 <UART_SetConfig+0x73c>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	2b0b      	cmp	r3, #11
 8004128:	d102      	bne.n	8004130 <UART_SetConfig+0x738>
 800412a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800412e:	e016      	b.n	800415e <UART_SetConfig+0x766>
 8004130:	2301      	movs	r3, #1
 8004132:	e014      	b.n	800415e <UART_SetConfig+0x766>
 8004134:	2380      	movs	r3, #128	; 0x80
 8004136:	e012      	b.n	800415e <UART_SetConfig+0x766>
 8004138:	2340      	movs	r3, #64	; 0x40
 800413a:	e010      	b.n	800415e <UART_SetConfig+0x766>
 800413c:	2320      	movs	r3, #32
 800413e:	e00e      	b.n	800415e <UART_SetConfig+0x766>
 8004140:	2310      	movs	r3, #16
 8004142:	e00c      	b.n	800415e <UART_SetConfig+0x766>
 8004144:	230c      	movs	r3, #12
 8004146:	e00a      	b.n	800415e <UART_SetConfig+0x766>
 8004148:	230a      	movs	r3, #10
 800414a:	e008      	b.n	800415e <UART_SetConfig+0x766>
 800414c:	2308      	movs	r3, #8
 800414e:	e006      	b.n	800415e <UART_SetConfig+0x766>
 8004150:	2306      	movs	r3, #6
 8004152:	e004      	b.n	800415e <UART_SetConfig+0x766>
 8004154:	2304      	movs	r3, #4
 8004156:	e002      	b.n	800415e <UART_SetConfig+0x766>
 8004158:	2302      	movs	r3, #2
 800415a:	e000      	b.n	800415e <UART_SetConfig+0x766>
 800415c:	2301      	movs	r3, #1
 800415e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004162:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004164:	e1c5      	b.n	80044f2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004166:	f107 030c 	add.w	r3, r7, #12
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff f892 	bl	8003294 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	2b00      	cmp	r3, #0
 8004178:	d044      	beq.n	8004204 <UART_SetConfig+0x80c>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	2b01      	cmp	r3, #1
 8004180:	d03e      	beq.n	8004200 <UART_SetConfig+0x808>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	2b02      	cmp	r3, #2
 8004188:	d038      	beq.n	80041fc <UART_SetConfig+0x804>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	2b03      	cmp	r3, #3
 8004190:	d032      	beq.n	80041f8 <UART_SetConfig+0x800>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	2b04      	cmp	r3, #4
 8004198:	d02c      	beq.n	80041f4 <UART_SetConfig+0x7fc>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	2b05      	cmp	r3, #5
 80041a0:	d026      	beq.n	80041f0 <UART_SetConfig+0x7f8>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	2b06      	cmp	r3, #6
 80041a8:	d020      	beq.n	80041ec <UART_SetConfig+0x7f4>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	2b07      	cmp	r3, #7
 80041b0:	d01a      	beq.n	80041e8 <UART_SetConfig+0x7f0>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d014      	beq.n	80041e4 <UART_SetConfig+0x7ec>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	2b09      	cmp	r3, #9
 80041c0:	d00e      	beq.n	80041e0 <UART_SetConfig+0x7e8>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	2b0a      	cmp	r3, #10
 80041c8:	d008      	beq.n	80041dc <UART_SetConfig+0x7e4>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	2b0b      	cmp	r3, #11
 80041d0:	d102      	bne.n	80041d8 <UART_SetConfig+0x7e0>
 80041d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041d6:	e016      	b.n	8004206 <UART_SetConfig+0x80e>
 80041d8:	2301      	movs	r3, #1
 80041da:	e014      	b.n	8004206 <UART_SetConfig+0x80e>
 80041dc:	2380      	movs	r3, #128	; 0x80
 80041de:	e012      	b.n	8004206 <UART_SetConfig+0x80e>
 80041e0:	2340      	movs	r3, #64	; 0x40
 80041e2:	e010      	b.n	8004206 <UART_SetConfig+0x80e>
 80041e4:	2320      	movs	r3, #32
 80041e6:	e00e      	b.n	8004206 <UART_SetConfig+0x80e>
 80041e8:	2310      	movs	r3, #16
 80041ea:	e00c      	b.n	8004206 <UART_SetConfig+0x80e>
 80041ec:	230c      	movs	r3, #12
 80041ee:	e00a      	b.n	8004206 <UART_SetConfig+0x80e>
 80041f0:	230a      	movs	r3, #10
 80041f2:	e008      	b.n	8004206 <UART_SetConfig+0x80e>
 80041f4:	2308      	movs	r3, #8
 80041f6:	e006      	b.n	8004206 <UART_SetConfig+0x80e>
 80041f8:	2306      	movs	r3, #6
 80041fa:	e004      	b.n	8004206 <UART_SetConfig+0x80e>
 80041fc:	2304      	movs	r3, #4
 80041fe:	e002      	b.n	8004206 <UART_SetConfig+0x80e>
 8004200:	2302      	movs	r3, #2
 8004202:	e000      	b.n	8004206 <UART_SetConfig+0x80e>
 8004204:	2301      	movs	r3, #1
 8004206:	fbb2 f3f3 	udiv	r3, r2, r3
 800420a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800420c:	e171      	b.n	80044f2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800420e:	4b7a      	ldr	r3, [pc, #488]	; (80043f8 <UART_SetConfig+0xa00>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0320 	and.w	r3, r3, #32
 8004216:	2b00      	cmp	r3, #0
 8004218:	d054      	beq.n	80042c4 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800421a:	4b77      	ldr	r3, [pc, #476]	; (80043f8 <UART_SetConfig+0xa00>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	08db      	lsrs	r3, r3, #3
 8004220:	f003 0303 	and.w	r3, r3, #3
 8004224:	4a75      	ldr	r2, [pc, #468]	; (80043fc <UART_SetConfig+0xa04>)
 8004226:	40da      	lsrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	2b00      	cmp	r3, #0
 800422e:	d044      	beq.n	80042ba <UART_SetConfig+0x8c2>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	2b01      	cmp	r3, #1
 8004236:	d03e      	beq.n	80042b6 <UART_SetConfig+0x8be>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	2b02      	cmp	r3, #2
 800423e:	d038      	beq.n	80042b2 <UART_SetConfig+0x8ba>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	2b03      	cmp	r3, #3
 8004246:	d032      	beq.n	80042ae <UART_SetConfig+0x8b6>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	2b04      	cmp	r3, #4
 800424e:	d02c      	beq.n	80042aa <UART_SetConfig+0x8b2>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	2b05      	cmp	r3, #5
 8004256:	d026      	beq.n	80042a6 <UART_SetConfig+0x8ae>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	2b06      	cmp	r3, #6
 800425e:	d020      	beq.n	80042a2 <UART_SetConfig+0x8aa>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	2b07      	cmp	r3, #7
 8004266:	d01a      	beq.n	800429e <UART_SetConfig+0x8a6>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	2b08      	cmp	r3, #8
 800426e:	d014      	beq.n	800429a <UART_SetConfig+0x8a2>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	2b09      	cmp	r3, #9
 8004276:	d00e      	beq.n	8004296 <UART_SetConfig+0x89e>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	2b0a      	cmp	r3, #10
 800427e:	d008      	beq.n	8004292 <UART_SetConfig+0x89a>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	2b0b      	cmp	r3, #11
 8004286:	d102      	bne.n	800428e <UART_SetConfig+0x896>
 8004288:	f44f 7380 	mov.w	r3, #256	; 0x100
 800428c:	e016      	b.n	80042bc <UART_SetConfig+0x8c4>
 800428e:	2301      	movs	r3, #1
 8004290:	e014      	b.n	80042bc <UART_SetConfig+0x8c4>
 8004292:	2380      	movs	r3, #128	; 0x80
 8004294:	e012      	b.n	80042bc <UART_SetConfig+0x8c4>
 8004296:	2340      	movs	r3, #64	; 0x40
 8004298:	e010      	b.n	80042bc <UART_SetConfig+0x8c4>
 800429a:	2320      	movs	r3, #32
 800429c:	e00e      	b.n	80042bc <UART_SetConfig+0x8c4>
 800429e:	2310      	movs	r3, #16
 80042a0:	e00c      	b.n	80042bc <UART_SetConfig+0x8c4>
 80042a2:	230c      	movs	r3, #12
 80042a4:	e00a      	b.n	80042bc <UART_SetConfig+0x8c4>
 80042a6:	230a      	movs	r3, #10
 80042a8:	e008      	b.n	80042bc <UART_SetConfig+0x8c4>
 80042aa:	2308      	movs	r3, #8
 80042ac:	e006      	b.n	80042bc <UART_SetConfig+0x8c4>
 80042ae:	2306      	movs	r3, #6
 80042b0:	e004      	b.n	80042bc <UART_SetConfig+0x8c4>
 80042b2:	2304      	movs	r3, #4
 80042b4:	e002      	b.n	80042bc <UART_SetConfig+0x8c4>
 80042b6:	2302      	movs	r3, #2
 80042b8:	e000      	b.n	80042bc <UART_SetConfig+0x8c4>
 80042ba:	2301      	movs	r3, #1
 80042bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 80042c2:	e116      	b.n	80044f2 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d043      	beq.n	8004354 <UART_SetConfig+0x95c>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d03d      	beq.n	8004350 <UART_SetConfig+0x958>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d037      	beq.n	800434c <UART_SetConfig+0x954>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	2b03      	cmp	r3, #3
 80042e2:	d031      	beq.n	8004348 <UART_SetConfig+0x950>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d02b      	beq.n	8004344 <UART_SetConfig+0x94c>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	2b05      	cmp	r3, #5
 80042f2:	d025      	beq.n	8004340 <UART_SetConfig+0x948>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	2b06      	cmp	r3, #6
 80042fa:	d01f      	beq.n	800433c <UART_SetConfig+0x944>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	2b07      	cmp	r3, #7
 8004302:	d019      	beq.n	8004338 <UART_SetConfig+0x940>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	2b08      	cmp	r3, #8
 800430a:	d013      	beq.n	8004334 <UART_SetConfig+0x93c>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	2b09      	cmp	r3, #9
 8004312:	d00d      	beq.n	8004330 <UART_SetConfig+0x938>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	2b0a      	cmp	r3, #10
 800431a:	d007      	beq.n	800432c <UART_SetConfig+0x934>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	2b0b      	cmp	r3, #11
 8004322:	d101      	bne.n	8004328 <UART_SetConfig+0x930>
 8004324:	4b36      	ldr	r3, [pc, #216]	; (8004400 <UART_SetConfig+0xa08>)
 8004326:	e016      	b.n	8004356 <UART_SetConfig+0x95e>
 8004328:	4b34      	ldr	r3, [pc, #208]	; (80043fc <UART_SetConfig+0xa04>)
 800432a:	e014      	b.n	8004356 <UART_SetConfig+0x95e>
 800432c:	4b35      	ldr	r3, [pc, #212]	; (8004404 <UART_SetConfig+0xa0c>)
 800432e:	e012      	b.n	8004356 <UART_SetConfig+0x95e>
 8004330:	4b35      	ldr	r3, [pc, #212]	; (8004408 <UART_SetConfig+0xa10>)
 8004332:	e010      	b.n	8004356 <UART_SetConfig+0x95e>
 8004334:	4b35      	ldr	r3, [pc, #212]	; (800440c <UART_SetConfig+0xa14>)
 8004336:	e00e      	b.n	8004356 <UART_SetConfig+0x95e>
 8004338:	4b35      	ldr	r3, [pc, #212]	; (8004410 <UART_SetConfig+0xa18>)
 800433a:	e00c      	b.n	8004356 <UART_SetConfig+0x95e>
 800433c:	4b35      	ldr	r3, [pc, #212]	; (8004414 <UART_SetConfig+0xa1c>)
 800433e:	e00a      	b.n	8004356 <UART_SetConfig+0x95e>
 8004340:	4b35      	ldr	r3, [pc, #212]	; (8004418 <UART_SetConfig+0xa20>)
 8004342:	e008      	b.n	8004356 <UART_SetConfig+0x95e>
 8004344:	4b35      	ldr	r3, [pc, #212]	; (800441c <UART_SetConfig+0xa24>)
 8004346:	e006      	b.n	8004356 <UART_SetConfig+0x95e>
 8004348:	4b35      	ldr	r3, [pc, #212]	; (8004420 <UART_SetConfig+0xa28>)
 800434a:	e004      	b.n	8004356 <UART_SetConfig+0x95e>
 800434c:	4b35      	ldr	r3, [pc, #212]	; (8004424 <UART_SetConfig+0xa2c>)
 800434e:	e002      	b.n	8004356 <UART_SetConfig+0x95e>
 8004350:	4b35      	ldr	r3, [pc, #212]	; (8004428 <UART_SetConfig+0xa30>)
 8004352:	e000      	b.n	8004356 <UART_SetConfig+0x95e>
 8004354:	4b29      	ldr	r3, [pc, #164]	; (80043fc <UART_SetConfig+0xa04>)
 8004356:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004358:	e0cb      	b.n	80044f2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	2b00      	cmp	r3, #0
 8004360:	d046      	beq.n	80043f0 <UART_SetConfig+0x9f8>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	2b01      	cmp	r3, #1
 8004368:	d040      	beq.n	80043ec <UART_SetConfig+0x9f4>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	2b02      	cmp	r3, #2
 8004370:	d03a      	beq.n	80043e8 <UART_SetConfig+0x9f0>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	2b03      	cmp	r3, #3
 8004378:	d034      	beq.n	80043e4 <UART_SetConfig+0x9ec>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	2b04      	cmp	r3, #4
 8004380:	d02e      	beq.n	80043e0 <UART_SetConfig+0x9e8>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	2b05      	cmp	r3, #5
 8004388:	d028      	beq.n	80043dc <UART_SetConfig+0x9e4>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	2b06      	cmp	r3, #6
 8004390:	d022      	beq.n	80043d8 <UART_SetConfig+0x9e0>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	2b07      	cmp	r3, #7
 8004398:	d01c      	beq.n	80043d4 <UART_SetConfig+0x9dc>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d016      	beq.n	80043d0 <UART_SetConfig+0x9d8>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	2b09      	cmp	r3, #9
 80043a8:	d00f      	beq.n	80043ca <UART_SetConfig+0x9d2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	2b0a      	cmp	r3, #10
 80043b0:	d008      	beq.n	80043c4 <UART_SetConfig+0x9cc>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	2b0b      	cmp	r3, #11
 80043b8:	d102      	bne.n	80043c0 <UART_SetConfig+0x9c8>
 80043ba:	f643 5309 	movw	r3, #15625	; 0x3d09
 80043be:	e018      	b.n	80043f2 <UART_SetConfig+0x9fa>
 80043c0:	4b13      	ldr	r3, [pc, #76]	; (8004410 <UART_SetConfig+0xa18>)
 80043c2:	e016      	b.n	80043f2 <UART_SetConfig+0x9fa>
 80043c4:	f647 2312 	movw	r3, #31250	; 0x7a12
 80043c8:	e013      	b.n	80043f2 <UART_SetConfig+0x9fa>
 80043ca:	f24f 4324 	movw	r3, #62500	; 0xf424
 80043ce:	e010      	b.n	80043f2 <UART_SetConfig+0x9fa>
 80043d0:	4b16      	ldr	r3, [pc, #88]	; (800442c <UART_SetConfig+0xa34>)
 80043d2:	e00e      	b.n	80043f2 <UART_SetConfig+0x9fa>
 80043d4:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <UART_SetConfig+0xa08>)
 80043d6:	e00c      	b.n	80043f2 <UART_SetConfig+0x9fa>
 80043d8:	4b15      	ldr	r3, [pc, #84]	; (8004430 <UART_SetConfig+0xa38>)
 80043da:	e00a      	b.n	80043f2 <UART_SetConfig+0x9fa>
 80043dc:	4b15      	ldr	r3, [pc, #84]	; (8004434 <UART_SetConfig+0xa3c>)
 80043de:	e008      	b.n	80043f2 <UART_SetConfig+0x9fa>
 80043e0:	4b08      	ldr	r3, [pc, #32]	; (8004404 <UART_SetConfig+0xa0c>)
 80043e2:	e006      	b.n	80043f2 <UART_SetConfig+0x9fa>
 80043e4:	4b14      	ldr	r3, [pc, #80]	; (8004438 <UART_SetConfig+0xa40>)
 80043e6:	e004      	b.n	80043f2 <UART_SetConfig+0x9fa>
 80043e8:	4b07      	ldr	r3, [pc, #28]	; (8004408 <UART_SetConfig+0xa10>)
 80043ea:	e002      	b.n	80043f2 <UART_SetConfig+0x9fa>
 80043ec:	4b07      	ldr	r3, [pc, #28]	; (800440c <UART_SetConfig+0xa14>)
 80043ee:	e000      	b.n	80043f2 <UART_SetConfig+0x9fa>
 80043f0:	4b07      	ldr	r3, [pc, #28]	; (8004410 <UART_SetConfig+0xa18>)
 80043f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043f4:	e07d      	b.n	80044f2 <UART_SetConfig+0xafa>
 80043f6:	bf00      	nop
 80043f8:	58024400 	.word	0x58024400
 80043fc:	03d09000 	.word	0x03d09000
 8004400:	0003d090 	.word	0x0003d090
 8004404:	0007a120 	.word	0x0007a120
 8004408:	000f4240 	.word	0x000f4240
 800440c:	001e8480 	.word	0x001e8480
 8004410:	003d0900 	.word	0x003d0900
 8004414:	00516155 	.word	0x00516155
 8004418:	0061a800 	.word	0x0061a800
 800441c:	007a1200 	.word	0x007a1200
 8004420:	00a2c2aa 	.word	0x00a2c2aa
 8004424:	00f42400 	.word	0x00f42400
 8004428:	01e84800 	.word	0x01e84800
 800442c:	0001e848 	.word	0x0001e848
 8004430:	00051615 	.word	0x00051615
 8004434:	00061a80 	.word	0x00061a80
 8004438:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	2b00      	cmp	r3, #0
 8004442:	d04e      	beq.n	80044e2 <UART_SetConfig+0xaea>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	2b01      	cmp	r3, #1
 800444a:	d047      	beq.n	80044dc <UART_SetConfig+0xae4>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	2b02      	cmp	r3, #2
 8004452:	d040      	beq.n	80044d6 <UART_SetConfig+0xade>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	2b03      	cmp	r3, #3
 800445a:	d039      	beq.n	80044d0 <UART_SetConfig+0xad8>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	2b04      	cmp	r3, #4
 8004462:	d032      	beq.n	80044ca <UART_SetConfig+0xad2>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	2b05      	cmp	r3, #5
 800446a:	d02b      	beq.n	80044c4 <UART_SetConfig+0xacc>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	2b06      	cmp	r3, #6
 8004472:	d024      	beq.n	80044be <UART_SetConfig+0xac6>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	2b07      	cmp	r3, #7
 800447a:	d01d      	beq.n	80044b8 <UART_SetConfig+0xac0>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	2b08      	cmp	r3, #8
 8004482:	d016      	beq.n	80044b2 <UART_SetConfig+0xaba>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	2b09      	cmp	r3, #9
 800448a:	d00f      	beq.n	80044ac <UART_SetConfig+0xab4>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	2b0a      	cmp	r3, #10
 8004492:	d008      	beq.n	80044a6 <UART_SetConfig+0xaae>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	2b0b      	cmp	r3, #11
 800449a:	d101      	bne.n	80044a0 <UART_SetConfig+0xaa8>
 800449c:	2380      	movs	r3, #128	; 0x80
 800449e:	e022      	b.n	80044e6 <UART_SetConfig+0xaee>
 80044a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044a4:	e01f      	b.n	80044e6 <UART_SetConfig+0xaee>
 80044a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044aa:	e01c      	b.n	80044e6 <UART_SetConfig+0xaee>
 80044ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044b0:	e019      	b.n	80044e6 <UART_SetConfig+0xaee>
 80044b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044b6:	e016      	b.n	80044e6 <UART_SetConfig+0xaee>
 80044b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044bc:	e013      	b.n	80044e6 <UART_SetConfig+0xaee>
 80044be:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80044c2:	e010      	b.n	80044e6 <UART_SetConfig+0xaee>
 80044c4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80044c8:	e00d      	b.n	80044e6 <UART_SetConfig+0xaee>
 80044ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044ce:	e00a      	b.n	80044e6 <UART_SetConfig+0xaee>
 80044d0:	f241 5355 	movw	r3, #5461	; 0x1555
 80044d4:	e007      	b.n	80044e6 <UART_SetConfig+0xaee>
 80044d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044da:	e004      	b.n	80044e6 <UART_SetConfig+0xaee>
 80044dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044e0:	e001      	b.n	80044e6 <UART_SetConfig+0xaee>
 80044e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044e8:	e003      	b.n	80044f2 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80044f0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80044f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f001 83e8 	beq.w	8005cca <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	4613      	mov	r3, r2
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	4413      	add	r3, r2
 8004504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004506:	429a      	cmp	r2, r3
 8004508:	d305      	bcc.n	8004516 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004510:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004512:	429a      	cmp	r2, r3
 8004514:	d904      	bls.n	8004520 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800451c:	f001 bbd5 	b.w	8005cca <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8004520:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004524:	2b08      	cmp	r3, #8
 8004526:	f000 8154 	beq.w	80047d2 <UART_SetConfig+0xdda>
 800452a:	2b08      	cmp	r3, #8
 800452c:	dc06      	bgt.n	800453c <UART_SetConfig+0xb44>
 800452e:	2b02      	cmp	r3, #2
 8004530:	d00f      	beq.n	8004552 <UART_SetConfig+0xb5a>
 8004532:	2b04      	cmp	r3, #4
 8004534:	f000 80ac 	beq.w	8004690 <UART_SetConfig+0xc98>
 8004538:	f000 bc30 	b.w	8004d9c <UART_SetConfig+0x13a4>
 800453c:	2b20      	cmp	r3, #32
 800453e:	f000 832d 	beq.w	8004b9c <UART_SetConfig+0x11a4>
 8004542:	2b40      	cmp	r3, #64	; 0x40
 8004544:	f000 83a5 	beq.w	8004c92 <UART_SetConfig+0x129a>
 8004548:	2b10      	cmp	r3, #16
 800454a:	f000 81e3 	beq.w	8004914 <UART_SetConfig+0xf1c>
 800454e:	f000 bc25 	b.w	8004d9c <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004552:	f7fe fd3d 	bl	8002fd0 <HAL_RCCEx_GetD3PCLK1Freq>
 8004556:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455a:	4618      	mov	r0, r3
 800455c:	f04f 0100 	mov.w	r1, #0
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	2b00      	cmp	r3, #0
 8004566:	d067      	beq.n	8004638 <UART_SetConfig+0xc40>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	2b01      	cmp	r3, #1
 800456e:	d05e      	beq.n	800462e <UART_SetConfig+0xc36>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	2b02      	cmp	r3, #2
 8004576:	d055      	beq.n	8004624 <UART_SetConfig+0xc2c>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	2b03      	cmp	r3, #3
 800457e:	d04c      	beq.n	800461a <UART_SetConfig+0xc22>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	2b04      	cmp	r3, #4
 8004586:	d043      	beq.n	8004610 <UART_SetConfig+0xc18>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	2b05      	cmp	r3, #5
 800458e:	d03a      	beq.n	8004606 <UART_SetConfig+0xc0e>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	2b06      	cmp	r3, #6
 8004596:	d031      	beq.n	80045fc <UART_SetConfig+0xc04>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	2b07      	cmp	r3, #7
 800459e:	d028      	beq.n	80045f2 <UART_SetConfig+0xbfa>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d01f      	beq.n	80045e8 <UART_SetConfig+0xbf0>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	2b09      	cmp	r3, #9
 80045ae:	d016      	beq.n	80045de <UART_SetConfig+0xbe6>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	2b0a      	cmp	r3, #10
 80045b6:	d00d      	beq.n	80045d4 <UART_SetConfig+0xbdc>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	2b0b      	cmp	r3, #11
 80045be:	d104      	bne.n	80045ca <UART_SetConfig+0xbd2>
 80045c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045c4:	f04f 0400 	mov.w	r4, #0
 80045c8:	e03a      	b.n	8004640 <UART_SetConfig+0xc48>
 80045ca:	f04f 0301 	mov.w	r3, #1
 80045ce:	f04f 0400 	mov.w	r4, #0
 80045d2:	e035      	b.n	8004640 <UART_SetConfig+0xc48>
 80045d4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80045d8:	f04f 0400 	mov.w	r4, #0
 80045dc:	e030      	b.n	8004640 <UART_SetConfig+0xc48>
 80045de:	f04f 0340 	mov.w	r3, #64	; 0x40
 80045e2:	f04f 0400 	mov.w	r4, #0
 80045e6:	e02b      	b.n	8004640 <UART_SetConfig+0xc48>
 80045e8:	f04f 0320 	mov.w	r3, #32
 80045ec:	f04f 0400 	mov.w	r4, #0
 80045f0:	e026      	b.n	8004640 <UART_SetConfig+0xc48>
 80045f2:	f04f 0310 	mov.w	r3, #16
 80045f6:	f04f 0400 	mov.w	r4, #0
 80045fa:	e021      	b.n	8004640 <UART_SetConfig+0xc48>
 80045fc:	f04f 030c 	mov.w	r3, #12
 8004600:	f04f 0400 	mov.w	r4, #0
 8004604:	e01c      	b.n	8004640 <UART_SetConfig+0xc48>
 8004606:	f04f 030a 	mov.w	r3, #10
 800460a:	f04f 0400 	mov.w	r4, #0
 800460e:	e017      	b.n	8004640 <UART_SetConfig+0xc48>
 8004610:	f04f 0308 	mov.w	r3, #8
 8004614:	f04f 0400 	mov.w	r4, #0
 8004618:	e012      	b.n	8004640 <UART_SetConfig+0xc48>
 800461a:	f04f 0306 	mov.w	r3, #6
 800461e:	f04f 0400 	mov.w	r4, #0
 8004622:	e00d      	b.n	8004640 <UART_SetConfig+0xc48>
 8004624:	f04f 0304 	mov.w	r3, #4
 8004628:	f04f 0400 	mov.w	r4, #0
 800462c:	e008      	b.n	8004640 <UART_SetConfig+0xc48>
 800462e:	f04f 0302 	mov.w	r3, #2
 8004632:	f04f 0400 	mov.w	r4, #0
 8004636:	e003      	b.n	8004640 <UART_SetConfig+0xc48>
 8004638:	f04f 0301 	mov.w	r3, #1
 800463c:	f04f 0400 	mov.w	r4, #0
 8004640:	461a      	mov	r2, r3
 8004642:	4623      	mov	r3, r4
 8004644:	f7fb fe50 	bl	80002e8 <__aeabi_uldivmod>
 8004648:	4603      	mov	r3, r0
 800464a:	460c      	mov	r4, r1
 800464c:	4619      	mov	r1, r3
 800464e:	4622      	mov	r2, r4
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	f04f 0400 	mov.w	r4, #0
 8004658:	0214      	lsls	r4, r2, #8
 800465a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800465e:	020b      	lsls	r3, r1, #8
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6852      	ldr	r2, [r2, #4]
 8004664:	0852      	lsrs	r2, r2, #1
 8004666:	4611      	mov	r1, r2
 8004668:	f04f 0200 	mov.w	r2, #0
 800466c:	eb13 0b01 	adds.w	fp, r3, r1
 8004670:	eb44 0c02 	adc.w	ip, r4, r2
 8004674:	4658      	mov	r0, fp
 8004676:	4661      	mov	r1, ip
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f04f 0400 	mov.w	r4, #0
 8004680:	461a      	mov	r2, r3
 8004682:	4623      	mov	r3, r4
 8004684:	f7fb fe30 	bl	80002e8 <__aeabi_uldivmod>
 8004688:	4603      	mov	r3, r0
 800468a:	460c      	mov	r4, r1
 800468c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800468e:	e389      	b.n	8004da4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004690:	f107 0318 	add.w	r3, r7, #24
 8004694:	4618      	mov	r0, r3
 8004696:	f7fe fcb1 	bl	8002ffc <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	4618      	mov	r0, r3
 800469e:	f04f 0100 	mov.w	r1, #0
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d067      	beq.n	800477a <UART_SetConfig+0xd82>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d05e      	beq.n	8004770 <UART_SetConfig+0xd78>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d055      	beq.n	8004766 <UART_SetConfig+0xd6e>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	2b03      	cmp	r3, #3
 80046c0:	d04c      	beq.n	800475c <UART_SetConfig+0xd64>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d043      	beq.n	8004752 <UART_SetConfig+0xd5a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	2b05      	cmp	r3, #5
 80046d0:	d03a      	beq.n	8004748 <UART_SetConfig+0xd50>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	2b06      	cmp	r3, #6
 80046d8:	d031      	beq.n	800473e <UART_SetConfig+0xd46>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	2b07      	cmp	r3, #7
 80046e0:	d028      	beq.n	8004734 <UART_SetConfig+0xd3c>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	2b08      	cmp	r3, #8
 80046e8:	d01f      	beq.n	800472a <UART_SetConfig+0xd32>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	2b09      	cmp	r3, #9
 80046f0:	d016      	beq.n	8004720 <UART_SetConfig+0xd28>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	2b0a      	cmp	r3, #10
 80046f8:	d00d      	beq.n	8004716 <UART_SetConfig+0xd1e>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	2b0b      	cmp	r3, #11
 8004700:	d104      	bne.n	800470c <UART_SetConfig+0xd14>
 8004702:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004706:	f04f 0400 	mov.w	r4, #0
 800470a:	e03a      	b.n	8004782 <UART_SetConfig+0xd8a>
 800470c:	f04f 0301 	mov.w	r3, #1
 8004710:	f04f 0400 	mov.w	r4, #0
 8004714:	e035      	b.n	8004782 <UART_SetConfig+0xd8a>
 8004716:	f04f 0380 	mov.w	r3, #128	; 0x80
 800471a:	f04f 0400 	mov.w	r4, #0
 800471e:	e030      	b.n	8004782 <UART_SetConfig+0xd8a>
 8004720:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004724:	f04f 0400 	mov.w	r4, #0
 8004728:	e02b      	b.n	8004782 <UART_SetConfig+0xd8a>
 800472a:	f04f 0320 	mov.w	r3, #32
 800472e:	f04f 0400 	mov.w	r4, #0
 8004732:	e026      	b.n	8004782 <UART_SetConfig+0xd8a>
 8004734:	f04f 0310 	mov.w	r3, #16
 8004738:	f04f 0400 	mov.w	r4, #0
 800473c:	e021      	b.n	8004782 <UART_SetConfig+0xd8a>
 800473e:	f04f 030c 	mov.w	r3, #12
 8004742:	f04f 0400 	mov.w	r4, #0
 8004746:	e01c      	b.n	8004782 <UART_SetConfig+0xd8a>
 8004748:	f04f 030a 	mov.w	r3, #10
 800474c:	f04f 0400 	mov.w	r4, #0
 8004750:	e017      	b.n	8004782 <UART_SetConfig+0xd8a>
 8004752:	f04f 0308 	mov.w	r3, #8
 8004756:	f04f 0400 	mov.w	r4, #0
 800475a:	e012      	b.n	8004782 <UART_SetConfig+0xd8a>
 800475c:	f04f 0306 	mov.w	r3, #6
 8004760:	f04f 0400 	mov.w	r4, #0
 8004764:	e00d      	b.n	8004782 <UART_SetConfig+0xd8a>
 8004766:	f04f 0304 	mov.w	r3, #4
 800476a:	f04f 0400 	mov.w	r4, #0
 800476e:	e008      	b.n	8004782 <UART_SetConfig+0xd8a>
 8004770:	f04f 0302 	mov.w	r3, #2
 8004774:	f04f 0400 	mov.w	r4, #0
 8004778:	e003      	b.n	8004782 <UART_SetConfig+0xd8a>
 800477a:	f04f 0301 	mov.w	r3, #1
 800477e:	f04f 0400 	mov.w	r4, #0
 8004782:	461a      	mov	r2, r3
 8004784:	4623      	mov	r3, r4
 8004786:	f7fb fdaf 	bl	80002e8 <__aeabi_uldivmod>
 800478a:	4603      	mov	r3, r0
 800478c:	460c      	mov	r4, r1
 800478e:	4619      	mov	r1, r3
 8004790:	4622      	mov	r2, r4
 8004792:	f04f 0300 	mov.w	r3, #0
 8004796:	f04f 0400 	mov.w	r4, #0
 800479a:	0214      	lsls	r4, r2, #8
 800479c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80047a0:	020b      	lsls	r3, r1, #8
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6852      	ldr	r2, [r2, #4]
 80047a6:	0852      	lsrs	r2, r2, #1
 80047a8:	4611      	mov	r1, r2
 80047aa:	f04f 0200 	mov.w	r2, #0
 80047ae:	eb13 0b01 	adds.w	fp, r3, r1
 80047b2:	eb44 0c02 	adc.w	ip, r4, r2
 80047b6:	4658      	mov	r0, fp
 80047b8:	4661      	mov	r1, ip
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f04f 0400 	mov.w	r4, #0
 80047c2:	461a      	mov	r2, r3
 80047c4:	4623      	mov	r3, r4
 80047c6:	f7fb fd8f 	bl	80002e8 <__aeabi_uldivmod>
 80047ca:	4603      	mov	r3, r0
 80047cc:	460c      	mov	r4, r1
 80047ce:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80047d0:	e2e8      	b.n	8004da4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047d2:	f107 030c 	add.w	r3, r7, #12
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fe fd5c 	bl	8003294 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	4618      	mov	r0, r3
 80047e0:	f04f 0100 	mov.w	r1, #0
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d067      	beq.n	80048bc <UART_SetConfig+0xec4>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d05e      	beq.n	80048b2 <UART_SetConfig+0xeba>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d055      	beq.n	80048a8 <UART_SetConfig+0xeb0>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	2b03      	cmp	r3, #3
 8004802:	d04c      	beq.n	800489e <UART_SetConfig+0xea6>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	2b04      	cmp	r3, #4
 800480a:	d043      	beq.n	8004894 <UART_SetConfig+0xe9c>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	2b05      	cmp	r3, #5
 8004812:	d03a      	beq.n	800488a <UART_SetConfig+0xe92>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	2b06      	cmp	r3, #6
 800481a:	d031      	beq.n	8004880 <UART_SetConfig+0xe88>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	2b07      	cmp	r3, #7
 8004822:	d028      	beq.n	8004876 <UART_SetConfig+0xe7e>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	2b08      	cmp	r3, #8
 800482a:	d01f      	beq.n	800486c <UART_SetConfig+0xe74>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	2b09      	cmp	r3, #9
 8004832:	d016      	beq.n	8004862 <UART_SetConfig+0xe6a>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	2b0a      	cmp	r3, #10
 800483a:	d00d      	beq.n	8004858 <UART_SetConfig+0xe60>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	2b0b      	cmp	r3, #11
 8004842:	d104      	bne.n	800484e <UART_SetConfig+0xe56>
 8004844:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004848:	f04f 0400 	mov.w	r4, #0
 800484c:	e03a      	b.n	80048c4 <UART_SetConfig+0xecc>
 800484e:	f04f 0301 	mov.w	r3, #1
 8004852:	f04f 0400 	mov.w	r4, #0
 8004856:	e035      	b.n	80048c4 <UART_SetConfig+0xecc>
 8004858:	f04f 0380 	mov.w	r3, #128	; 0x80
 800485c:	f04f 0400 	mov.w	r4, #0
 8004860:	e030      	b.n	80048c4 <UART_SetConfig+0xecc>
 8004862:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004866:	f04f 0400 	mov.w	r4, #0
 800486a:	e02b      	b.n	80048c4 <UART_SetConfig+0xecc>
 800486c:	f04f 0320 	mov.w	r3, #32
 8004870:	f04f 0400 	mov.w	r4, #0
 8004874:	e026      	b.n	80048c4 <UART_SetConfig+0xecc>
 8004876:	f04f 0310 	mov.w	r3, #16
 800487a:	f04f 0400 	mov.w	r4, #0
 800487e:	e021      	b.n	80048c4 <UART_SetConfig+0xecc>
 8004880:	f04f 030c 	mov.w	r3, #12
 8004884:	f04f 0400 	mov.w	r4, #0
 8004888:	e01c      	b.n	80048c4 <UART_SetConfig+0xecc>
 800488a:	f04f 030a 	mov.w	r3, #10
 800488e:	f04f 0400 	mov.w	r4, #0
 8004892:	e017      	b.n	80048c4 <UART_SetConfig+0xecc>
 8004894:	f04f 0308 	mov.w	r3, #8
 8004898:	f04f 0400 	mov.w	r4, #0
 800489c:	e012      	b.n	80048c4 <UART_SetConfig+0xecc>
 800489e:	f04f 0306 	mov.w	r3, #6
 80048a2:	f04f 0400 	mov.w	r4, #0
 80048a6:	e00d      	b.n	80048c4 <UART_SetConfig+0xecc>
 80048a8:	f04f 0304 	mov.w	r3, #4
 80048ac:	f04f 0400 	mov.w	r4, #0
 80048b0:	e008      	b.n	80048c4 <UART_SetConfig+0xecc>
 80048b2:	f04f 0302 	mov.w	r3, #2
 80048b6:	f04f 0400 	mov.w	r4, #0
 80048ba:	e003      	b.n	80048c4 <UART_SetConfig+0xecc>
 80048bc:	f04f 0301 	mov.w	r3, #1
 80048c0:	f04f 0400 	mov.w	r4, #0
 80048c4:	461a      	mov	r2, r3
 80048c6:	4623      	mov	r3, r4
 80048c8:	f7fb fd0e 	bl	80002e8 <__aeabi_uldivmod>
 80048cc:	4603      	mov	r3, r0
 80048ce:	460c      	mov	r4, r1
 80048d0:	4619      	mov	r1, r3
 80048d2:	4622      	mov	r2, r4
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	f04f 0400 	mov.w	r4, #0
 80048dc:	0214      	lsls	r4, r2, #8
 80048de:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80048e2:	020b      	lsls	r3, r1, #8
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6852      	ldr	r2, [r2, #4]
 80048e8:	0852      	lsrs	r2, r2, #1
 80048ea:	4611      	mov	r1, r2
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	eb13 0b01 	adds.w	fp, r3, r1
 80048f4:	eb44 0c02 	adc.w	ip, r4, r2
 80048f8:	4658      	mov	r0, fp
 80048fa:	4661      	mov	r1, ip
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f04f 0400 	mov.w	r4, #0
 8004904:	461a      	mov	r2, r3
 8004906:	4623      	mov	r3, r4
 8004908:	f7fb fcee 	bl	80002e8 <__aeabi_uldivmod>
 800490c:	4603      	mov	r3, r0
 800490e:	460c      	mov	r4, r1
 8004910:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004912:	e247      	b.n	8004da4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004914:	4b96      	ldr	r3, [pc, #600]	; (8004b70 <UART_SetConfig+0x1178>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0320 	and.w	r3, r3, #32
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 80a3 	beq.w	8004a68 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004922:	4b93      	ldr	r3, [pc, #588]	; (8004b70 <UART_SetConfig+0x1178>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	08db      	lsrs	r3, r3, #3
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	4a91      	ldr	r2, [pc, #580]	; (8004b74 <UART_SetConfig+0x117c>)
 800492e:	fa22 f303 	lsr.w	r3, r2, r3
 8004932:	4618      	mov	r0, r3
 8004934:	f04f 0100 	mov.w	r1, #0
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	2b00      	cmp	r3, #0
 800493e:	d067      	beq.n	8004a10 <UART_SetConfig+0x1018>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	2b01      	cmp	r3, #1
 8004946:	d05e      	beq.n	8004a06 <UART_SetConfig+0x100e>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	2b02      	cmp	r3, #2
 800494e:	d055      	beq.n	80049fc <UART_SetConfig+0x1004>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	2b03      	cmp	r3, #3
 8004956:	d04c      	beq.n	80049f2 <UART_SetConfig+0xffa>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	2b04      	cmp	r3, #4
 800495e:	d043      	beq.n	80049e8 <UART_SetConfig+0xff0>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	2b05      	cmp	r3, #5
 8004966:	d03a      	beq.n	80049de <UART_SetConfig+0xfe6>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	2b06      	cmp	r3, #6
 800496e:	d031      	beq.n	80049d4 <UART_SetConfig+0xfdc>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	2b07      	cmp	r3, #7
 8004976:	d028      	beq.n	80049ca <UART_SetConfig+0xfd2>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	2b08      	cmp	r3, #8
 800497e:	d01f      	beq.n	80049c0 <UART_SetConfig+0xfc8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	2b09      	cmp	r3, #9
 8004986:	d016      	beq.n	80049b6 <UART_SetConfig+0xfbe>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	2b0a      	cmp	r3, #10
 800498e:	d00d      	beq.n	80049ac <UART_SetConfig+0xfb4>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	2b0b      	cmp	r3, #11
 8004996:	d104      	bne.n	80049a2 <UART_SetConfig+0xfaa>
 8004998:	f44f 7380 	mov.w	r3, #256	; 0x100
 800499c:	f04f 0400 	mov.w	r4, #0
 80049a0:	e03a      	b.n	8004a18 <UART_SetConfig+0x1020>
 80049a2:	f04f 0301 	mov.w	r3, #1
 80049a6:	f04f 0400 	mov.w	r4, #0
 80049aa:	e035      	b.n	8004a18 <UART_SetConfig+0x1020>
 80049ac:	f04f 0380 	mov.w	r3, #128	; 0x80
 80049b0:	f04f 0400 	mov.w	r4, #0
 80049b4:	e030      	b.n	8004a18 <UART_SetConfig+0x1020>
 80049b6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80049ba:	f04f 0400 	mov.w	r4, #0
 80049be:	e02b      	b.n	8004a18 <UART_SetConfig+0x1020>
 80049c0:	f04f 0320 	mov.w	r3, #32
 80049c4:	f04f 0400 	mov.w	r4, #0
 80049c8:	e026      	b.n	8004a18 <UART_SetConfig+0x1020>
 80049ca:	f04f 0310 	mov.w	r3, #16
 80049ce:	f04f 0400 	mov.w	r4, #0
 80049d2:	e021      	b.n	8004a18 <UART_SetConfig+0x1020>
 80049d4:	f04f 030c 	mov.w	r3, #12
 80049d8:	f04f 0400 	mov.w	r4, #0
 80049dc:	e01c      	b.n	8004a18 <UART_SetConfig+0x1020>
 80049de:	f04f 030a 	mov.w	r3, #10
 80049e2:	f04f 0400 	mov.w	r4, #0
 80049e6:	e017      	b.n	8004a18 <UART_SetConfig+0x1020>
 80049e8:	f04f 0308 	mov.w	r3, #8
 80049ec:	f04f 0400 	mov.w	r4, #0
 80049f0:	e012      	b.n	8004a18 <UART_SetConfig+0x1020>
 80049f2:	f04f 0306 	mov.w	r3, #6
 80049f6:	f04f 0400 	mov.w	r4, #0
 80049fa:	e00d      	b.n	8004a18 <UART_SetConfig+0x1020>
 80049fc:	f04f 0304 	mov.w	r3, #4
 8004a00:	f04f 0400 	mov.w	r4, #0
 8004a04:	e008      	b.n	8004a18 <UART_SetConfig+0x1020>
 8004a06:	f04f 0302 	mov.w	r3, #2
 8004a0a:	f04f 0400 	mov.w	r4, #0
 8004a0e:	e003      	b.n	8004a18 <UART_SetConfig+0x1020>
 8004a10:	f04f 0301 	mov.w	r3, #1
 8004a14:	f04f 0400 	mov.w	r4, #0
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4623      	mov	r3, r4
 8004a1c:	f7fb fc64 	bl	80002e8 <__aeabi_uldivmod>
 8004a20:	4603      	mov	r3, r0
 8004a22:	460c      	mov	r4, r1
 8004a24:	4619      	mov	r1, r3
 8004a26:	4622      	mov	r2, r4
 8004a28:	f04f 0300 	mov.w	r3, #0
 8004a2c:	f04f 0400 	mov.w	r4, #0
 8004a30:	0214      	lsls	r4, r2, #8
 8004a32:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004a36:	020b      	lsls	r3, r1, #8
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6852      	ldr	r2, [r2, #4]
 8004a3c:	0852      	lsrs	r2, r2, #1
 8004a3e:	4611      	mov	r1, r2
 8004a40:	f04f 0200 	mov.w	r2, #0
 8004a44:	eb13 0b01 	adds.w	fp, r3, r1
 8004a48:	eb44 0c02 	adc.w	ip, r4, r2
 8004a4c:	4658      	mov	r0, fp
 8004a4e:	4661      	mov	r1, ip
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f04f 0400 	mov.w	r4, #0
 8004a58:	461a      	mov	r2, r3
 8004a5a:	4623      	mov	r3, r4
 8004a5c:	f7fb fc44 	bl	80002e8 <__aeabi_uldivmod>
 8004a60:	4603      	mov	r3, r0
 8004a62:	460c      	mov	r4, r1
 8004a64:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8004a66:	e19d      	b.n	8004da4 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d05b      	beq.n	8004b28 <UART_SetConfig+0x1130>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d053      	beq.n	8004b20 <UART_SetConfig+0x1128>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d04b      	beq.n	8004b18 <UART_SetConfig+0x1120>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	2b03      	cmp	r3, #3
 8004a86:	d043      	beq.n	8004b10 <UART_SetConfig+0x1118>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d03b      	beq.n	8004b08 <UART_SetConfig+0x1110>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	2b05      	cmp	r3, #5
 8004a96:	d033      	beq.n	8004b00 <UART_SetConfig+0x1108>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	2b06      	cmp	r3, #6
 8004a9e:	d02b      	beq.n	8004af8 <UART_SetConfig+0x1100>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	2b07      	cmp	r3, #7
 8004aa6:	d023      	beq.n	8004af0 <UART_SetConfig+0x10f8>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d01b      	beq.n	8004ae8 <UART_SetConfig+0x10f0>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	2b09      	cmp	r3, #9
 8004ab6:	d013      	beq.n	8004ae0 <UART_SetConfig+0x10e8>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	2b0a      	cmp	r3, #10
 8004abe:	d00b      	beq.n	8004ad8 <UART_SetConfig+0x10e0>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	2b0b      	cmp	r3, #11
 8004ac6:	d103      	bne.n	8004ad0 <UART_SetConfig+0x10d8>
 8004ac8:	4b2a      	ldr	r3, [pc, #168]	; (8004b74 <UART_SetConfig+0x117c>)
 8004aca:	f04f 0400 	mov.w	r4, #0
 8004ace:	e02e      	b.n	8004b2e <UART_SetConfig+0x1136>
 8004ad0:	4b29      	ldr	r3, [pc, #164]	; (8004b78 <UART_SetConfig+0x1180>)
 8004ad2:	f04f 0403 	mov.w	r4, #3
 8004ad6:	e02a      	b.n	8004b2e <UART_SetConfig+0x1136>
 8004ad8:	4b28      	ldr	r3, [pc, #160]	; (8004b7c <UART_SetConfig+0x1184>)
 8004ada:	f04f 0400 	mov.w	r4, #0
 8004ade:	e026      	b.n	8004b2e <UART_SetConfig+0x1136>
 8004ae0:	4b27      	ldr	r3, [pc, #156]	; (8004b80 <UART_SetConfig+0x1188>)
 8004ae2:	f04f 0400 	mov.w	r4, #0
 8004ae6:	e022      	b.n	8004b2e <UART_SetConfig+0x1136>
 8004ae8:	4b26      	ldr	r3, [pc, #152]	; (8004b84 <UART_SetConfig+0x118c>)
 8004aea:	f04f 0400 	mov.w	r4, #0
 8004aee:	e01e      	b.n	8004b2e <UART_SetConfig+0x1136>
 8004af0:	4b25      	ldr	r3, [pc, #148]	; (8004b88 <UART_SetConfig+0x1190>)
 8004af2:	f04f 0400 	mov.w	r4, #0
 8004af6:	e01a      	b.n	8004b2e <UART_SetConfig+0x1136>
 8004af8:	a419      	add	r4, pc, #100	; (adr r4, 8004b60 <UART_SetConfig+0x1168>)
 8004afa:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004afe:	e016      	b.n	8004b2e <UART_SetConfig+0x1136>
 8004b00:	4b22      	ldr	r3, [pc, #136]	; (8004b8c <UART_SetConfig+0x1194>)
 8004b02:	f04f 0400 	mov.w	r4, #0
 8004b06:	e012      	b.n	8004b2e <UART_SetConfig+0x1136>
 8004b08:	4b21      	ldr	r3, [pc, #132]	; (8004b90 <UART_SetConfig+0x1198>)
 8004b0a:	f04f 0400 	mov.w	r4, #0
 8004b0e:	e00e      	b.n	8004b2e <UART_SetConfig+0x1136>
 8004b10:	a415      	add	r4, pc, #84	; (adr r4, 8004b68 <UART_SetConfig+0x1170>)
 8004b12:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004b16:	e00a      	b.n	8004b2e <UART_SetConfig+0x1136>
 8004b18:	4b1e      	ldr	r3, [pc, #120]	; (8004b94 <UART_SetConfig+0x119c>)
 8004b1a:	f04f 0400 	mov.w	r4, #0
 8004b1e:	e006      	b.n	8004b2e <UART_SetConfig+0x1136>
 8004b20:	4b1d      	ldr	r3, [pc, #116]	; (8004b98 <UART_SetConfig+0x11a0>)
 8004b22:	f04f 0401 	mov.w	r4, #1
 8004b26:	e002      	b.n	8004b2e <UART_SetConfig+0x1136>
 8004b28:	4b13      	ldr	r3, [pc, #76]	; (8004b78 <UART_SetConfig+0x1180>)
 8004b2a:	f04f 0403 	mov.w	r4, #3
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6852      	ldr	r2, [r2, #4]
 8004b32:	0852      	lsrs	r2, r2, #1
 8004b34:	4611      	mov	r1, r2
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	eb13 0b01 	adds.w	fp, r3, r1
 8004b3e:	eb44 0c02 	adc.w	ip, r4, r2
 8004b42:	4658      	mov	r0, fp
 8004b44:	4661      	mov	r1, ip
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f04f 0400 	mov.w	r4, #0
 8004b4e:	461a      	mov	r2, r3
 8004b50:	4623      	mov	r3, r4
 8004b52:	f7fb fbc9 	bl	80002e8 <__aeabi_uldivmod>
 8004b56:	4603      	mov	r3, r0
 8004b58:	460c      	mov	r4, r1
 8004b5a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004b5c:	e122      	b.n	8004da4 <UART_SetConfig+0x13ac>
 8004b5e:	bf00      	nop
 8004b60:	51615500 	.word	0x51615500
 8004b64:	00000000 	.word	0x00000000
 8004b68:	a2c2aa00 	.word	0xa2c2aa00
 8004b6c:	00000000 	.word	0x00000000
 8004b70:	58024400 	.word	0x58024400
 8004b74:	03d09000 	.word	0x03d09000
 8004b78:	d0900000 	.word	0xd0900000
 8004b7c:	07a12000 	.word	0x07a12000
 8004b80:	0f424000 	.word	0x0f424000
 8004b84:	1e848000 	.word	0x1e848000
 8004b88:	3d090000 	.word	0x3d090000
 8004b8c:	61a80000 	.word	0x61a80000
 8004b90:	7a120000 	.word	0x7a120000
 8004b94:	f4240000 	.word	0xf4240000
 8004b98:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d05b      	beq.n	8004c5c <UART_SetConfig+0x1264>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d053      	beq.n	8004c54 <UART_SetConfig+0x125c>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d04b      	beq.n	8004c4c <UART_SetConfig+0x1254>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	d043      	beq.n	8004c44 <UART_SetConfig+0x124c>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	2b04      	cmp	r3, #4
 8004bc2:	d03b      	beq.n	8004c3c <UART_SetConfig+0x1244>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	2b05      	cmp	r3, #5
 8004bca:	d033      	beq.n	8004c34 <UART_SetConfig+0x123c>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	2b06      	cmp	r3, #6
 8004bd2:	d02b      	beq.n	8004c2c <UART_SetConfig+0x1234>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	2b07      	cmp	r3, #7
 8004bda:	d023      	beq.n	8004c24 <UART_SetConfig+0x122c>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d01b      	beq.n	8004c1c <UART_SetConfig+0x1224>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	2b09      	cmp	r3, #9
 8004bea:	d013      	beq.n	8004c14 <UART_SetConfig+0x121c>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	2b0a      	cmp	r3, #10
 8004bf2:	d00b      	beq.n	8004c0c <UART_SetConfig+0x1214>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	2b0b      	cmp	r3, #11
 8004bfa:	d103      	bne.n	8004c04 <UART_SetConfig+0x120c>
 8004bfc:	4bc0      	ldr	r3, [pc, #768]	; (8004f00 <UART_SetConfig+0x1508>)
 8004bfe:	f04f 0400 	mov.w	r4, #0
 8004c02:	e02e      	b.n	8004c62 <UART_SetConfig+0x126a>
 8004c04:	4bbf      	ldr	r3, [pc, #764]	; (8004f04 <UART_SetConfig+0x150c>)
 8004c06:	f04f 0400 	mov.w	r4, #0
 8004c0a:	e02a      	b.n	8004c62 <UART_SetConfig+0x126a>
 8004c0c:	4bbe      	ldr	r3, [pc, #760]	; (8004f08 <UART_SetConfig+0x1510>)
 8004c0e:	f04f 0400 	mov.w	r4, #0
 8004c12:	e026      	b.n	8004c62 <UART_SetConfig+0x126a>
 8004c14:	4bbd      	ldr	r3, [pc, #756]	; (8004f0c <UART_SetConfig+0x1514>)
 8004c16:	f04f 0400 	mov.w	r4, #0
 8004c1a:	e022      	b.n	8004c62 <UART_SetConfig+0x126a>
 8004c1c:	4bbc      	ldr	r3, [pc, #752]	; (8004f10 <UART_SetConfig+0x1518>)
 8004c1e:	f04f 0400 	mov.w	r4, #0
 8004c22:	e01e      	b.n	8004c62 <UART_SetConfig+0x126a>
 8004c24:	4bbb      	ldr	r3, [pc, #748]	; (8004f14 <UART_SetConfig+0x151c>)
 8004c26:	f04f 0400 	mov.w	r4, #0
 8004c2a:	e01a      	b.n	8004c62 <UART_SetConfig+0x126a>
 8004c2c:	a4b0      	add	r4, pc, #704	; (adr r4, 8004ef0 <UART_SetConfig+0x14f8>)
 8004c2e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004c32:	e016      	b.n	8004c62 <UART_SetConfig+0x126a>
 8004c34:	4bb8      	ldr	r3, [pc, #736]	; (8004f18 <UART_SetConfig+0x1520>)
 8004c36:	f04f 0400 	mov.w	r4, #0
 8004c3a:	e012      	b.n	8004c62 <UART_SetConfig+0x126a>
 8004c3c:	4bb7      	ldr	r3, [pc, #732]	; (8004f1c <UART_SetConfig+0x1524>)
 8004c3e:	f04f 0400 	mov.w	r4, #0
 8004c42:	e00e      	b.n	8004c62 <UART_SetConfig+0x126a>
 8004c44:	a4ac      	add	r4, pc, #688	; (adr r4, 8004ef8 <UART_SetConfig+0x1500>)
 8004c46:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004c4a:	e00a      	b.n	8004c62 <UART_SetConfig+0x126a>
 8004c4c:	4bb4      	ldr	r3, [pc, #720]	; (8004f20 <UART_SetConfig+0x1528>)
 8004c4e:	f04f 0400 	mov.w	r4, #0
 8004c52:	e006      	b.n	8004c62 <UART_SetConfig+0x126a>
 8004c54:	4bb3      	ldr	r3, [pc, #716]	; (8004f24 <UART_SetConfig+0x152c>)
 8004c56:	f04f 0400 	mov.w	r4, #0
 8004c5a:	e002      	b.n	8004c62 <UART_SetConfig+0x126a>
 8004c5c:	4ba9      	ldr	r3, [pc, #676]	; (8004f04 <UART_SetConfig+0x150c>)
 8004c5e:	f04f 0400 	mov.w	r4, #0
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6852      	ldr	r2, [r2, #4]
 8004c66:	0852      	lsrs	r2, r2, #1
 8004c68:	4611      	mov	r1, r2
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	eb13 0b01 	adds.w	fp, r3, r1
 8004c72:	eb44 0c02 	adc.w	ip, r4, r2
 8004c76:	4658      	mov	r0, fp
 8004c78:	4661      	mov	r1, ip
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f04f 0400 	mov.w	r4, #0
 8004c82:	461a      	mov	r2, r3
 8004c84:	4623      	mov	r3, r4
 8004c86:	f7fb fb2f 	bl	80002e8 <__aeabi_uldivmod>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	460c      	mov	r4, r1
 8004c8e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004c90:	e088      	b.n	8004da4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d064      	beq.n	8004d64 <UART_SetConfig+0x136c>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d05b      	beq.n	8004d5a <UART_SetConfig+0x1362>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d052      	beq.n	8004d50 <UART_SetConfig+0x1358>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	2b03      	cmp	r3, #3
 8004cb0:	d04a      	beq.n	8004d48 <UART_SetConfig+0x1350>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d041      	beq.n	8004d3e <UART_SetConfig+0x1346>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	2b05      	cmp	r3, #5
 8004cc0:	d039      	beq.n	8004d36 <UART_SetConfig+0x133e>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	2b06      	cmp	r3, #6
 8004cc8:	d031      	beq.n	8004d2e <UART_SetConfig+0x1336>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	2b07      	cmp	r3, #7
 8004cd0:	d028      	beq.n	8004d24 <UART_SetConfig+0x132c>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d01f      	beq.n	8004d1a <UART_SetConfig+0x1322>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	2b09      	cmp	r3, #9
 8004ce0:	d016      	beq.n	8004d10 <UART_SetConfig+0x1318>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	2b0a      	cmp	r3, #10
 8004ce8:	d00d      	beq.n	8004d06 <UART_SetConfig+0x130e>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	2b0b      	cmp	r3, #11
 8004cf0:	d104      	bne.n	8004cfc <UART_SetConfig+0x1304>
 8004cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cf6:	f04f 0400 	mov.w	r4, #0
 8004cfa:	e037      	b.n	8004d6c <UART_SetConfig+0x1374>
 8004cfc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004d00:	f04f 0400 	mov.w	r4, #0
 8004d04:	e032      	b.n	8004d6c <UART_SetConfig+0x1374>
 8004d06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d0a:	f04f 0400 	mov.w	r4, #0
 8004d0e:	e02d      	b.n	8004d6c <UART_SetConfig+0x1374>
 8004d10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d14:	f04f 0400 	mov.w	r4, #0
 8004d18:	e028      	b.n	8004d6c <UART_SetConfig+0x1374>
 8004d1a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004d1e:	f04f 0400 	mov.w	r4, #0
 8004d22:	e023      	b.n	8004d6c <UART_SetConfig+0x1374>
 8004d24:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004d28:	f04f 0400 	mov.w	r4, #0
 8004d2c:	e01e      	b.n	8004d6c <UART_SetConfig+0x1374>
 8004d2e:	4b7e      	ldr	r3, [pc, #504]	; (8004f28 <UART_SetConfig+0x1530>)
 8004d30:	f04f 0400 	mov.w	r4, #0
 8004d34:	e01a      	b.n	8004d6c <UART_SetConfig+0x1374>
 8004d36:	4b7d      	ldr	r3, [pc, #500]	; (8004f2c <UART_SetConfig+0x1534>)
 8004d38:	f04f 0400 	mov.w	r4, #0
 8004d3c:	e016      	b.n	8004d6c <UART_SetConfig+0x1374>
 8004d3e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004d42:	f04f 0400 	mov.w	r4, #0
 8004d46:	e011      	b.n	8004d6c <UART_SetConfig+0x1374>
 8004d48:	4b79      	ldr	r3, [pc, #484]	; (8004f30 <UART_SetConfig+0x1538>)
 8004d4a:	f04f 0400 	mov.w	r4, #0
 8004d4e:	e00d      	b.n	8004d6c <UART_SetConfig+0x1374>
 8004d50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004d54:	f04f 0400 	mov.w	r4, #0
 8004d58:	e008      	b.n	8004d6c <UART_SetConfig+0x1374>
 8004d5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004d5e:	f04f 0400 	mov.w	r4, #0
 8004d62:	e003      	b.n	8004d6c <UART_SetConfig+0x1374>
 8004d64:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004d68:	f04f 0400 	mov.w	r4, #0
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6852      	ldr	r2, [r2, #4]
 8004d70:	0852      	lsrs	r2, r2, #1
 8004d72:	4611      	mov	r1, r2
 8004d74:	f04f 0200 	mov.w	r2, #0
 8004d78:	eb13 0b01 	adds.w	fp, r3, r1
 8004d7c:	eb44 0c02 	adc.w	ip, r4, r2
 8004d80:	4658      	mov	r0, fp
 8004d82:	4661      	mov	r1, ip
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f04f 0400 	mov.w	r4, #0
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	4623      	mov	r3, r4
 8004d90:	f7fb faaa 	bl	80002e8 <__aeabi_uldivmod>
 8004d94:	4603      	mov	r3, r0
 8004d96:	460c      	mov	r4, r1
 8004d98:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004d9a:	e003      	b.n	8004da4 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8004da2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004daa:	d309      	bcc.n	8004dc0 <UART_SetConfig+0x13c8>
 8004dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004db2:	d205      	bcs.n	8004dc0 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dba:	60da      	str	r2, [r3, #12]
 8004dbc:	f000 bf85 	b.w	8005cca <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dc6:	f000 bf80 	b.w	8005cca <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dd2:	f040 83da 	bne.w	800558a <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8004dd6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004dda:	2b40      	cmp	r3, #64	; 0x40
 8004ddc:	f200 83b3 	bhi.w	8005546 <UART_SetConfig+0x1b4e>
 8004de0:	a201      	add	r2, pc, #4	; (adr r2, 8004de8 <UART_SetConfig+0x13f0>)
 8004de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de6:	bf00      	nop
 8004de8:	08004f35 	.word	0x08004f35
 8004dec:	08004fed 	.word	0x08004fed
 8004df0:	08005547 	.word	0x08005547
 8004df4:	08005547 	.word	0x08005547
 8004df8:	080050a5 	.word	0x080050a5
 8004dfc:	08005547 	.word	0x08005547
 8004e00:	08005547 	.word	0x08005547
 8004e04:	08005547 	.word	0x08005547
 8004e08:	08005161 	.word	0x08005161
 8004e0c:	08005547 	.word	0x08005547
 8004e10:	08005547 	.word	0x08005547
 8004e14:	08005547 	.word	0x08005547
 8004e18:	08005547 	.word	0x08005547
 8004e1c:	08005547 	.word	0x08005547
 8004e20:	08005547 	.word	0x08005547
 8004e24:	08005547 	.word	0x08005547
 8004e28:	0800521d 	.word	0x0800521d
 8004e2c:	08005547 	.word	0x08005547
 8004e30:	08005547 	.word	0x08005547
 8004e34:	08005547 	.word	0x08005547
 8004e38:	08005547 	.word	0x08005547
 8004e3c:	08005547 	.word	0x08005547
 8004e40:	08005547 	.word	0x08005547
 8004e44:	08005547 	.word	0x08005547
 8004e48:	08005547 	.word	0x08005547
 8004e4c:	08005547 	.word	0x08005547
 8004e50:	08005547 	.word	0x08005547
 8004e54:	08005547 	.word	0x08005547
 8004e58:	08005547 	.word	0x08005547
 8004e5c:	08005547 	.word	0x08005547
 8004e60:	08005547 	.word	0x08005547
 8004e64:	08005547 	.word	0x08005547
 8004e68:	0800538f 	.word	0x0800538f
 8004e6c:	08005547 	.word	0x08005547
 8004e70:	08005547 	.word	0x08005547
 8004e74:	08005547 	.word	0x08005547
 8004e78:	08005547 	.word	0x08005547
 8004e7c:	08005547 	.word	0x08005547
 8004e80:	08005547 	.word	0x08005547
 8004e84:	08005547 	.word	0x08005547
 8004e88:	08005547 	.word	0x08005547
 8004e8c:	08005547 	.word	0x08005547
 8004e90:	08005547 	.word	0x08005547
 8004e94:	08005547 	.word	0x08005547
 8004e98:	08005547 	.word	0x08005547
 8004e9c:	08005547 	.word	0x08005547
 8004ea0:	08005547 	.word	0x08005547
 8004ea4:	08005547 	.word	0x08005547
 8004ea8:	08005547 	.word	0x08005547
 8004eac:	08005547 	.word	0x08005547
 8004eb0:	08005547 	.word	0x08005547
 8004eb4:	08005547 	.word	0x08005547
 8004eb8:	08005547 	.word	0x08005547
 8004ebc:	08005547 	.word	0x08005547
 8004ec0:	08005547 	.word	0x08005547
 8004ec4:	08005547 	.word	0x08005547
 8004ec8:	08005547 	.word	0x08005547
 8004ecc:	08005547 	.word	0x08005547
 8004ed0:	08005547 	.word	0x08005547
 8004ed4:	08005547 	.word	0x08005547
 8004ed8:	08005547 	.word	0x08005547
 8004edc:	08005547 	.word	0x08005547
 8004ee0:	08005547 	.word	0x08005547
 8004ee4:	08005547 	.word	0x08005547
 8004ee8:	08005485 	.word	0x08005485
 8004eec:	f3af 8000 	nop.w
 8004ef0:	05161500 	.word	0x05161500
 8004ef4:	00000000 	.word	0x00000000
 8004ef8:	0a2c2a00 	.word	0x0a2c2a00
 8004efc:	00000000 	.word	0x00000000
 8004f00:	003d0900 	.word	0x003d0900
 8004f04:	3d090000 	.word	0x3d090000
 8004f08:	007a1200 	.word	0x007a1200
 8004f0c:	00f42400 	.word	0x00f42400
 8004f10:	01e84800 	.word	0x01e84800
 8004f14:	03d09000 	.word	0x03d09000
 8004f18:	061a8000 	.word	0x061a8000
 8004f1c:	07a12000 	.word	0x07a12000
 8004f20:	0f424000 	.word	0x0f424000
 8004f24:	1e848000 	.word	0x1e848000
 8004f28:	000aaa00 	.word	0x000aaa00
 8004f2c:	000ccc00 	.word	0x000ccc00
 8004f30:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f34:	f7fd f930 	bl	8002198 <HAL_RCC_GetPCLK1Freq>
 8004f38:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d044      	beq.n	8004fcc <UART_SetConfig+0x15d4>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d03e      	beq.n	8004fc8 <UART_SetConfig+0x15d0>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d038      	beq.n	8004fc4 <UART_SetConfig+0x15cc>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	2b03      	cmp	r3, #3
 8004f58:	d032      	beq.n	8004fc0 <UART_SetConfig+0x15c8>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	d02c      	beq.n	8004fbc <UART_SetConfig+0x15c4>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	2b05      	cmp	r3, #5
 8004f68:	d026      	beq.n	8004fb8 <UART_SetConfig+0x15c0>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	2b06      	cmp	r3, #6
 8004f70:	d020      	beq.n	8004fb4 <UART_SetConfig+0x15bc>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	2b07      	cmp	r3, #7
 8004f78:	d01a      	beq.n	8004fb0 <UART_SetConfig+0x15b8>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	2b08      	cmp	r3, #8
 8004f80:	d014      	beq.n	8004fac <UART_SetConfig+0x15b4>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	2b09      	cmp	r3, #9
 8004f88:	d00e      	beq.n	8004fa8 <UART_SetConfig+0x15b0>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	2b0a      	cmp	r3, #10
 8004f90:	d008      	beq.n	8004fa4 <UART_SetConfig+0x15ac>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	2b0b      	cmp	r3, #11
 8004f98:	d102      	bne.n	8004fa0 <UART_SetConfig+0x15a8>
 8004f9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f9e:	e016      	b.n	8004fce <UART_SetConfig+0x15d6>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e014      	b.n	8004fce <UART_SetConfig+0x15d6>
 8004fa4:	2380      	movs	r3, #128	; 0x80
 8004fa6:	e012      	b.n	8004fce <UART_SetConfig+0x15d6>
 8004fa8:	2340      	movs	r3, #64	; 0x40
 8004faa:	e010      	b.n	8004fce <UART_SetConfig+0x15d6>
 8004fac:	2320      	movs	r3, #32
 8004fae:	e00e      	b.n	8004fce <UART_SetConfig+0x15d6>
 8004fb0:	2310      	movs	r3, #16
 8004fb2:	e00c      	b.n	8004fce <UART_SetConfig+0x15d6>
 8004fb4:	230c      	movs	r3, #12
 8004fb6:	e00a      	b.n	8004fce <UART_SetConfig+0x15d6>
 8004fb8:	230a      	movs	r3, #10
 8004fba:	e008      	b.n	8004fce <UART_SetConfig+0x15d6>
 8004fbc:	2308      	movs	r3, #8
 8004fbe:	e006      	b.n	8004fce <UART_SetConfig+0x15d6>
 8004fc0:	2306      	movs	r3, #6
 8004fc2:	e004      	b.n	8004fce <UART_SetConfig+0x15d6>
 8004fc4:	2304      	movs	r3, #4
 8004fc6:	e002      	b.n	8004fce <UART_SetConfig+0x15d6>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	e000      	b.n	8004fce <UART_SetConfig+0x15d6>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd4:	005a      	lsls	r2, r3, #1
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	085b      	lsrs	r3, r3, #1
 8004fdc:	441a      	add	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fea:	e2b0      	b.n	800554e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fec:	f7fd f8ea 	bl	80021c4 <HAL_RCC_GetPCLK2Freq>
 8004ff0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d044      	beq.n	8005084 <UART_SetConfig+0x168c>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d03e      	beq.n	8005080 <UART_SetConfig+0x1688>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	2b02      	cmp	r3, #2
 8005008:	d038      	beq.n	800507c <UART_SetConfig+0x1684>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	2b03      	cmp	r3, #3
 8005010:	d032      	beq.n	8005078 <UART_SetConfig+0x1680>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	2b04      	cmp	r3, #4
 8005018:	d02c      	beq.n	8005074 <UART_SetConfig+0x167c>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	2b05      	cmp	r3, #5
 8005020:	d026      	beq.n	8005070 <UART_SetConfig+0x1678>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	2b06      	cmp	r3, #6
 8005028:	d020      	beq.n	800506c <UART_SetConfig+0x1674>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	2b07      	cmp	r3, #7
 8005030:	d01a      	beq.n	8005068 <UART_SetConfig+0x1670>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	2b08      	cmp	r3, #8
 8005038:	d014      	beq.n	8005064 <UART_SetConfig+0x166c>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	2b09      	cmp	r3, #9
 8005040:	d00e      	beq.n	8005060 <UART_SetConfig+0x1668>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005046:	2b0a      	cmp	r3, #10
 8005048:	d008      	beq.n	800505c <UART_SetConfig+0x1664>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	2b0b      	cmp	r3, #11
 8005050:	d102      	bne.n	8005058 <UART_SetConfig+0x1660>
 8005052:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005056:	e016      	b.n	8005086 <UART_SetConfig+0x168e>
 8005058:	2301      	movs	r3, #1
 800505a:	e014      	b.n	8005086 <UART_SetConfig+0x168e>
 800505c:	2380      	movs	r3, #128	; 0x80
 800505e:	e012      	b.n	8005086 <UART_SetConfig+0x168e>
 8005060:	2340      	movs	r3, #64	; 0x40
 8005062:	e010      	b.n	8005086 <UART_SetConfig+0x168e>
 8005064:	2320      	movs	r3, #32
 8005066:	e00e      	b.n	8005086 <UART_SetConfig+0x168e>
 8005068:	2310      	movs	r3, #16
 800506a:	e00c      	b.n	8005086 <UART_SetConfig+0x168e>
 800506c:	230c      	movs	r3, #12
 800506e:	e00a      	b.n	8005086 <UART_SetConfig+0x168e>
 8005070:	230a      	movs	r3, #10
 8005072:	e008      	b.n	8005086 <UART_SetConfig+0x168e>
 8005074:	2308      	movs	r3, #8
 8005076:	e006      	b.n	8005086 <UART_SetConfig+0x168e>
 8005078:	2306      	movs	r3, #6
 800507a:	e004      	b.n	8005086 <UART_SetConfig+0x168e>
 800507c:	2304      	movs	r3, #4
 800507e:	e002      	b.n	8005086 <UART_SetConfig+0x168e>
 8005080:	2302      	movs	r3, #2
 8005082:	e000      	b.n	8005086 <UART_SetConfig+0x168e>
 8005084:	2301      	movs	r3, #1
 8005086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005088:	fbb2 f3f3 	udiv	r3, r2, r3
 800508c:	005a      	lsls	r2, r3, #1
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	085b      	lsrs	r3, r3, #1
 8005094:	441a      	add	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	fbb2 f3f3 	udiv	r3, r2, r3
 800509e:	b29b      	uxth	r3, r3
 80050a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80050a2:	e254      	b.n	800554e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050a4:	f107 0318 	add.w	r3, r7, #24
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7fd ffa7 	bl	8002ffc <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050ae:	69fa      	ldr	r2, [r7, #28]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d044      	beq.n	8005142 <UART_SetConfig+0x174a>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d03e      	beq.n	800513e <UART_SetConfig+0x1746>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d038      	beq.n	800513a <UART_SetConfig+0x1742>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	2b03      	cmp	r3, #3
 80050ce:	d032      	beq.n	8005136 <UART_SetConfig+0x173e>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	2b04      	cmp	r3, #4
 80050d6:	d02c      	beq.n	8005132 <UART_SetConfig+0x173a>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	2b05      	cmp	r3, #5
 80050de:	d026      	beq.n	800512e <UART_SetConfig+0x1736>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	2b06      	cmp	r3, #6
 80050e6:	d020      	beq.n	800512a <UART_SetConfig+0x1732>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	2b07      	cmp	r3, #7
 80050ee:	d01a      	beq.n	8005126 <UART_SetConfig+0x172e>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	2b08      	cmp	r3, #8
 80050f6:	d014      	beq.n	8005122 <UART_SetConfig+0x172a>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	2b09      	cmp	r3, #9
 80050fe:	d00e      	beq.n	800511e <UART_SetConfig+0x1726>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	2b0a      	cmp	r3, #10
 8005106:	d008      	beq.n	800511a <UART_SetConfig+0x1722>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	2b0b      	cmp	r3, #11
 800510e:	d102      	bne.n	8005116 <UART_SetConfig+0x171e>
 8005110:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005114:	e016      	b.n	8005144 <UART_SetConfig+0x174c>
 8005116:	2301      	movs	r3, #1
 8005118:	e014      	b.n	8005144 <UART_SetConfig+0x174c>
 800511a:	2380      	movs	r3, #128	; 0x80
 800511c:	e012      	b.n	8005144 <UART_SetConfig+0x174c>
 800511e:	2340      	movs	r3, #64	; 0x40
 8005120:	e010      	b.n	8005144 <UART_SetConfig+0x174c>
 8005122:	2320      	movs	r3, #32
 8005124:	e00e      	b.n	8005144 <UART_SetConfig+0x174c>
 8005126:	2310      	movs	r3, #16
 8005128:	e00c      	b.n	8005144 <UART_SetConfig+0x174c>
 800512a:	230c      	movs	r3, #12
 800512c:	e00a      	b.n	8005144 <UART_SetConfig+0x174c>
 800512e:	230a      	movs	r3, #10
 8005130:	e008      	b.n	8005144 <UART_SetConfig+0x174c>
 8005132:	2308      	movs	r3, #8
 8005134:	e006      	b.n	8005144 <UART_SetConfig+0x174c>
 8005136:	2306      	movs	r3, #6
 8005138:	e004      	b.n	8005144 <UART_SetConfig+0x174c>
 800513a:	2304      	movs	r3, #4
 800513c:	e002      	b.n	8005144 <UART_SetConfig+0x174c>
 800513e:	2302      	movs	r3, #2
 8005140:	e000      	b.n	8005144 <UART_SetConfig+0x174c>
 8005142:	2301      	movs	r3, #1
 8005144:	fbb2 f3f3 	udiv	r3, r2, r3
 8005148:	005a      	lsls	r2, r3, #1
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	085b      	lsrs	r3, r3, #1
 8005150:	441a      	add	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	fbb2 f3f3 	udiv	r3, r2, r3
 800515a:	b29b      	uxth	r3, r3
 800515c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800515e:	e1f6      	b.n	800554e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005160:	f107 030c 	add.w	r3, r7, #12
 8005164:	4618      	mov	r0, r3
 8005166:	f7fe f895 	bl	8003294 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	2b00      	cmp	r3, #0
 8005172:	d044      	beq.n	80051fe <UART_SetConfig+0x1806>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	2b01      	cmp	r3, #1
 800517a:	d03e      	beq.n	80051fa <UART_SetConfig+0x1802>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	2b02      	cmp	r3, #2
 8005182:	d038      	beq.n	80051f6 <UART_SetConfig+0x17fe>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	2b03      	cmp	r3, #3
 800518a:	d032      	beq.n	80051f2 <UART_SetConfig+0x17fa>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	2b04      	cmp	r3, #4
 8005192:	d02c      	beq.n	80051ee <UART_SetConfig+0x17f6>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	2b05      	cmp	r3, #5
 800519a:	d026      	beq.n	80051ea <UART_SetConfig+0x17f2>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	2b06      	cmp	r3, #6
 80051a2:	d020      	beq.n	80051e6 <UART_SetConfig+0x17ee>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	2b07      	cmp	r3, #7
 80051aa:	d01a      	beq.n	80051e2 <UART_SetConfig+0x17ea>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d014      	beq.n	80051de <UART_SetConfig+0x17e6>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	2b09      	cmp	r3, #9
 80051ba:	d00e      	beq.n	80051da <UART_SetConfig+0x17e2>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	2b0a      	cmp	r3, #10
 80051c2:	d008      	beq.n	80051d6 <UART_SetConfig+0x17de>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	2b0b      	cmp	r3, #11
 80051ca:	d102      	bne.n	80051d2 <UART_SetConfig+0x17da>
 80051cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051d0:	e016      	b.n	8005200 <UART_SetConfig+0x1808>
 80051d2:	2301      	movs	r3, #1
 80051d4:	e014      	b.n	8005200 <UART_SetConfig+0x1808>
 80051d6:	2380      	movs	r3, #128	; 0x80
 80051d8:	e012      	b.n	8005200 <UART_SetConfig+0x1808>
 80051da:	2340      	movs	r3, #64	; 0x40
 80051dc:	e010      	b.n	8005200 <UART_SetConfig+0x1808>
 80051de:	2320      	movs	r3, #32
 80051e0:	e00e      	b.n	8005200 <UART_SetConfig+0x1808>
 80051e2:	2310      	movs	r3, #16
 80051e4:	e00c      	b.n	8005200 <UART_SetConfig+0x1808>
 80051e6:	230c      	movs	r3, #12
 80051e8:	e00a      	b.n	8005200 <UART_SetConfig+0x1808>
 80051ea:	230a      	movs	r3, #10
 80051ec:	e008      	b.n	8005200 <UART_SetConfig+0x1808>
 80051ee:	2308      	movs	r3, #8
 80051f0:	e006      	b.n	8005200 <UART_SetConfig+0x1808>
 80051f2:	2306      	movs	r3, #6
 80051f4:	e004      	b.n	8005200 <UART_SetConfig+0x1808>
 80051f6:	2304      	movs	r3, #4
 80051f8:	e002      	b.n	8005200 <UART_SetConfig+0x1808>
 80051fa:	2302      	movs	r3, #2
 80051fc:	e000      	b.n	8005200 <UART_SetConfig+0x1808>
 80051fe:	2301      	movs	r3, #1
 8005200:	fbb2 f3f3 	udiv	r3, r2, r3
 8005204:	005a      	lsls	r2, r3, #1
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	085b      	lsrs	r3, r3, #1
 800520c:	441a      	add	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	fbb2 f3f3 	udiv	r3, r2, r3
 8005216:	b29b      	uxth	r3, r3
 8005218:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800521a:	e198      	b.n	800554e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800521c:	4b87      	ldr	r3, [pc, #540]	; (800543c <UART_SetConfig+0x1a44>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0320 	and.w	r3, r3, #32
 8005224:	2b00      	cmp	r3, #0
 8005226:	d05e      	beq.n	80052e6 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005228:	4b84      	ldr	r3, [pc, #528]	; (800543c <UART_SetConfig+0x1a44>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	08db      	lsrs	r3, r3, #3
 800522e:	f003 0303 	and.w	r3, r3, #3
 8005232:	4a83      	ldr	r2, [pc, #524]	; (8005440 <UART_SetConfig+0x1a48>)
 8005234:	40da      	lsrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	2b00      	cmp	r3, #0
 800523c:	d044      	beq.n	80052c8 <UART_SetConfig+0x18d0>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	2b01      	cmp	r3, #1
 8005244:	d03e      	beq.n	80052c4 <UART_SetConfig+0x18cc>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	2b02      	cmp	r3, #2
 800524c:	d038      	beq.n	80052c0 <UART_SetConfig+0x18c8>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	2b03      	cmp	r3, #3
 8005254:	d032      	beq.n	80052bc <UART_SetConfig+0x18c4>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	2b04      	cmp	r3, #4
 800525c:	d02c      	beq.n	80052b8 <UART_SetConfig+0x18c0>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	2b05      	cmp	r3, #5
 8005264:	d026      	beq.n	80052b4 <UART_SetConfig+0x18bc>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	2b06      	cmp	r3, #6
 800526c:	d020      	beq.n	80052b0 <UART_SetConfig+0x18b8>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	2b07      	cmp	r3, #7
 8005274:	d01a      	beq.n	80052ac <UART_SetConfig+0x18b4>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	2b08      	cmp	r3, #8
 800527c:	d014      	beq.n	80052a8 <UART_SetConfig+0x18b0>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	2b09      	cmp	r3, #9
 8005284:	d00e      	beq.n	80052a4 <UART_SetConfig+0x18ac>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	2b0a      	cmp	r3, #10
 800528c:	d008      	beq.n	80052a0 <UART_SetConfig+0x18a8>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	2b0b      	cmp	r3, #11
 8005294:	d102      	bne.n	800529c <UART_SetConfig+0x18a4>
 8005296:	f44f 7380 	mov.w	r3, #256	; 0x100
 800529a:	e016      	b.n	80052ca <UART_SetConfig+0x18d2>
 800529c:	2301      	movs	r3, #1
 800529e:	e014      	b.n	80052ca <UART_SetConfig+0x18d2>
 80052a0:	2380      	movs	r3, #128	; 0x80
 80052a2:	e012      	b.n	80052ca <UART_SetConfig+0x18d2>
 80052a4:	2340      	movs	r3, #64	; 0x40
 80052a6:	e010      	b.n	80052ca <UART_SetConfig+0x18d2>
 80052a8:	2320      	movs	r3, #32
 80052aa:	e00e      	b.n	80052ca <UART_SetConfig+0x18d2>
 80052ac:	2310      	movs	r3, #16
 80052ae:	e00c      	b.n	80052ca <UART_SetConfig+0x18d2>
 80052b0:	230c      	movs	r3, #12
 80052b2:	e00a      	b.n	80052ca <UART_SetConfig+0x18d2>
 80052b4:	230a      	movs	r3, #10
 80052b6:	e008      	b.n	80052ca <UART_SetConfig+0x18d2>
 80052b8:	2308      	movs	r3, #8
 80052ba:	e006      	b.n	80052ca <UART_SetConfig+0x18d2>
 80052bc:	2306      	movs	r3, #6
 80052be:	e004      	b.n	80052ca <UART_SetConfig+0x18d2>
 80052c0:	2304      	movs	r3, #4
 80052c2:	e002      	b.n	80052ca <UART_SetConfig+0x18d2>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e000      	b.n	80052ca <UART_SetConfig+0x18d2>
 80052c8:	2301      	movs	r3, #1
 80052ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ce:	005a      	lsls	r2, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	085b      	lsrs	r3, r3, #1
 80052d6:	441a      	add	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80052e4:	e133      	b.n	800554e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d043      	beq.n	8005376 <UART_SetConfig+0x197e>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d03d      	beq.n	8005372 <UART_SetConfig+0x197a>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d037      	beq.n	800536e <UART_SetConfig+0x1976>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005302:	2b03      	cmp	r3, #3
 8005304:	d031      	beq.n	800536a <UART_SetConfig+0x1972>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	2b04      	cmp	r3, #4
 800530c:	d02b      	beq.n	8005366 <UART_SetConfig+0x196e>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	2b05      	cmp	r3, #5
 8005314:	d025      	beq.n	8005362 <UART_SetConfig+0x196a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	2b06      	cmp	r3, #6
 800531c:	d01f      	beq.n	800535e <UART_SetConfig+0x1966>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	2b07      	cmp	r3, #7
 8005324:	d019      	beq.n	800535a <UART_SetConfig+0x1962>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	2b08      	cmp	r3, #8
 800532c:	d013      	beq.n	8005356 <UART_SetConfig+0x195e>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	2b09      	cmp	r3, #9
 8005334:	d00d      	beq.n	8005352 <UART_SetConfig+0x195a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	2b0a      	cmp	r3, #10
 800533c:	d007      	beq.n	800534e <UART_SetConfig+0x1956>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005342:	2b0b      	cmp	r3, #11
 8005344:	d101      	bne.n	800534a <UART_SetConfig+0x1952>
 8005346:	4b3f      	ldr	r3, [pc, #252]	; (8005444 <UART_SetConfig+0x1a4c>)
 8005348:	e016      	b.n	8005378 <UART_SetConfig+0x1980>
 800534a:	4b3f      	ldr	r3, [pc, #252]	; (8005448 <UART_SetConfig+0x1a50>)
 800534c:	e014      	b.n	8005378 <UART_SetConfig+0x1980>
 800534e:	4b3f      	ldr	r3, [pc, #252]	; (800544c <UART_SetConfig+0x1a54>)
 8005350:	e012      	b.n	8005378 <UART_SetConfig+0x1980>
 8005352:	4b3f      	ldr	r3, [pc, #252]	; (8005450 <UART_SetConfig+0x1a58>)
 8005354:	e010      	b.n	8005378 <UART_SetConfig+0x1980>
 8005356:	4b3f      	ldr	r3, [pc, #252]	; (8005454 <UART_SetConfig+0x1a5c>)
 8005358:	e00e      	b.n	8005378 <UART_SetConfig+0x1980>
 800535a:	4b3f      	ldr	r3, [pc, #252]	; (8005458 <UART_SetConfig+0x1a60>)
 800535c:	e00c      	b.n	8005378 <UART_SetConfig+0x1980>
 800535e:	4b3f      	ldr	r3, [pc, #252]	; (800545c <UART_SetConfig+0x1a64>)
 8005360:	e00a      	b.n	8005378 <UART_SetConfig+0x1980>
 8005362:	4b3f      	ldr	r3, [pc, #252]	; (8005460 <UART_SetConfig+0x1a68>)
 8005364:	e008      	b.n	8005378 <UART_SetConfig+0x1980>
 8005366:	4b3f      	ldr	r3, [pc, #252]	; (8005464 <UART_SetConfig+0x1a6c>)
 8005368:	e006      	b.n	8005378 <UART_SetConfig+0x1980>
 800536a:	4b3f      	ldr	r3, [pc, #252]	; (8005468 <UART_SetConfig+0x1a70>)
 800536c:	e004      	b.n	8005378 <UART_SetConfig+0x1980>
 800536e:	4b3f      	ldr	r3, [pc, #252]	; (800546c <UART_SetConfig+0x1a74>)
 8005370:	e002      	b.n	8005378 <UART_SetConfig+0x1980>
 8005372:	4b33      	ldr	r3, [pc, #204]	; (8005440 <UART_SetConfig+0x1a48>)
 8005374:	e000      	b.n	8005378 <UART_SetConfig+0x1980>
 8005376:	4b34      	ldr	r3, [pc, #208]	; (8005448 <UART_SetConfig+0x1a50>)
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6852      	ldr	r2, [r2, #4]
 800537c:	0852      	lsrs	r2, r2, #1
 800537e:	441a      	add	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	fbb2 f3f3 	udiv	r3, r2, r3
 8005388:	b29b      	uxth	r3, r3
 800538a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800538c:	e0df      	b.n	800554e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	2b00      	cmp	r3, #0
 8005394:	d045      	beq.n	8005422 <UART_SetConfig+0x1a2a>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	2b01      	cmp	r3, #1
 800539c:	d03f      	beq.n	800541e <UART_SetConfig+0x1a26>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d039      	beq.n	800541a <UART_SetConfig+0x1a22>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	2b03      	cmp	r3, #3
 80053ac:	d033      	beq.n	8005416 <UART_SetConfig+0x1a1e>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d02d      	beq.n	8005412 <UART_SetConfig+0x1a1a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	2b05      	cmp	r3, #5
 80053bc:	d027      	beq.n	800540e <UART_SetConfig+0x1a16>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	2b06      	cmp	r3, #6
 80053c4:	d021      	beq.n	800540a <UART_SetConfig+0x1a12>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	2b07      	cmp	r3, #7
 80053cc:	d01b      	beq.n	8005406 <UART_SetConfig+0x1a0e>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	2b08      	cmp	r3, #8
 80053d4:	d015      	beq.n	8005402 <UART_SetConfig+0x1a0a>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	2b09      	cmp	r3, #9
 80053dc:	d00f      	beq.n	80053fe <UART_SetConfig+0x1a06>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	2b0a      	cmp	r3, #10
 80053e4:	d008      	beq.n	80053f8 <UART_SetConfig+0x1a00>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	2b0b      	cmp	r3, #11
 80053ec:	d102      	bne.n	80053f4 <UART_SetConfig+0x19fc>
 80053ee:	f647 2312 	movw	r3, #31250	; 0x7a12
 80053f2:	e017      	b.n	8005424 <UART_SetConfig+0x1a2c>
 80053f4:	4b18      	ldr	r3, [pc, #96]	; (8005458 <UART_SetConfig+0x1a60>)
 80053f6:	e015      	b.n	8005424 <UART_SetConfig+0x1a2c>
 80053f8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80053fc:	e012      	b.n	8005424 <UART_SetConfig+0x1a2c>
 80053fe:	4b1c      	ldr	r3, [pc, #112]	; (8005470 <UART_SetConfig+0x1a78>)
 8005400:	e010      	b.n	8005424 <UART_SetConfig+0x1a2c>
 8005402:	4b1c      	ldr	r3, [pc, #112]	; (8005474 <UART_SetConfig+0x1a7c>)
 8005404:	e00e      	b.n	8005424 <UART_SetConfig+0x1a2c>
 8005406:	4b0f      	ldr	r3, [pc, #60]	; (8005444 <UART_SetConfig+0x1a4c>)
 8005408:	e00c      	b.n	8005424 <UART_SetConfig+0x1a2c>
 800540a:	4b1b      	ldr	r3, [pc, #108]	; (8005478 <UART_SetConfig+0x1a80>)
 800540c:	e00a      	b.n	8005424 <UART_SetConfig+0x1a2c>
 800540e:	4b1b      	ldr	r3, [pc, #108]	; (800547c <UART_SetConfig+0x1a84>)
 8005410:	e008      	b.n	8005424 <UART_SetConfig+0x1a2c>
 8005412:	4b0e      	ldr	r3, [pc, #56]	; (800544c <UART_SetConfig+0x1a54>)
 8005414:	e006      	b.n	8005424 <UART_SetConfig+0x1a2c>
 8005416:	4b1a      	ldr	r3, [pc, #104]	; (8005480 <UART_SetConfig+0x1a88>)
 8005418:	e004      	b.n	8005424 <UART_SetConfig+0x1a2c>
 800541a:	4b0d      	ldr	r3, [pc, #52]	; (8005450 <UART_SetConfig+0x1a58>)
 800541c:	e002      	b.n	8005424 <UART_SetConfig+0x1a2c>
 800541e:	4b0d      	ldr	r3, [pc, #52]	; (8005454 <UART_SetConfig+0x1a5c>)
 8005420:	e000      	b.n	8005424 <UART_SetConfig+0x1a2c>
 8005422:	4b0d      	ldr	r3, [pc, #52]	; (8005458 <UART_SetConfig+0x1a60>)
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6852      	ldr	r2, [r2, #4]
 8005428:	0852      	lsrs	r2, r2, #1
 800542a:	441a      	add	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	fbb2 f3f3 	udiv	r3, r2, r3
 8005434:	b29b      	uxth	r3, r3
 8005436:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005438:	e089      	b.n	800554e <UART_SetConfig+0x1b56>
 800543a:	bf00      	nop
 800543c:	58024400 	.word	0x58024400
 8005440:	03d09000 	.word	0x03d09000
 8005444:	0007a120 	.word	0x0007a120
 8005448:	07a12000 	.word	0x07a12000
 800544c:	000f4240 	.word	0x000f4240
 8005450:	001e8480 	.word	0x001e8480
 8005454:	003d0900 	.word	0x003d0900
 8005458:	007a1200 	.word	0x007a1200
 800545c:	00a2c2aa 	.word	0x00a2c2aa
 8005460:	00c35000 	.word	0x00c35000
 8005464:	00f42400 	.word	0x00f42400
 8005468:	01458554 	.word	0x01458554
 800546c:	01e84800 	.word	0x01e84800
 8005470:	0001e848 	.word	0x0001e848
 8005474:	0003d090 	.word	0x0003d090
 8005478:	000a2c2a 	.word	0x000a2c2a
 800547c:	000c3500 	.word	0x000c3500
 8005480:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	2b00      	cmp	r3, #0
 800548a:	d04f      	beq.n	800552c <UART_SetConfig+0x1b34>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	2b01      	cmp	r3, #1
 8005492:	d048      	beq.n	8005526 <UART_SetConfig+0x1b2e>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	2b02      	cmp	r3, #2
 800549a:	d041      	beq.n	8005520 <UART_SetConfig+0x1b28>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	2b03      	cmp	r3, #3
 80054a2:	d03a      	beq.n	800551a <UART_SetConfig+0x1b22>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	d033      	beq.n	8005514 <UART_SetConfig+0x1b1c>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	2b05      	cmp	r3, #5
 80054b2:	d02c      	beq.n	800550e <UART_SetConfig+0x1b16>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	2b06      	cmp	r3, #6
 80054ba:	d025      	beq.n	8005508 <UART_SetConfig+0x1b10>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	2b07      	cmp	r3, #7
 80054c2:	d01e      	beq.n	8005502 <UART_SetConfig+0x1b0a>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	d017      	beq.n	80054fc <UART_SetConfig+0x1b04>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	2b09      	cmp	r3, #9
 80054d2:	d010      	beq.n	80054f6 <UART_SetConfig+0x1afe>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	2b0a      	cmp	r3, #10
 80054da:	d009      	beq.n	80054f0 <UART_SetConfig+0x1af8>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	2b0b      	cmp	r3, #11
 80054e2:	d102      	bne.n	80054ea <UART_SetConfig+0x1af2>
 80054e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054e8:	e022      	b.n	8005530 <UART_SetConfig+0x1b38>
 80054ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80054ee:	e01f      	b.n	8005530 <UART_SetConfig+0x1b38>
 80054f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054f4:	e01c      	b.n	8005530 <UART_SetConfig+0x1b38>
 80054f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054fa:	e019      	b.n	8005530 <UART_SetConfig+0x1b38>
 80054fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005500:	e016      	b.n	8005530 <UART_SetConfig+0x1b38>
 8005502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005506:	e013      	b.n	8005530 <UART_SetConfig+0x1b38>
 8005508:	f241 5354 	movw	r3, #5460	; 0x1554
 800550c:	e010      	b.n	8005530 <UART_SetConfig+0x1b38>
 800550e:	f641 1398 	movw	r3, #6552	; 0x1998
 8005512:	e00d      	b.n	8005530 <UART_SetConfig+0x1b38>
 8005514:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005518:	e00a      	b.n	8005530 <UART_SetConfig+0x1b38>
 800551a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800551e:	e007      	b.n	8005530 <UART_SetConfig+0x1b38>
 8005520:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005524:	e004      	b.n	8005530 <UART_SetConfig+0x1b38>
 8005526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800552a:	e001      	b.n	8005530 <UART_SetConfig+0x1b38>
 800552c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	6852      	ldr	r2, [r2, #4]
 8005534:	0852      	lsrs	r2, r2, #1
 8005536:	441a      	add	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005540:	b29b      	uxth	r3, r3
 8005542:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005544:	e003      	b.n	800554e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800554c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800554e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005550:	2b0f      	cmp	r3, #15
 8005552:	d916      	bls.n	8005582 <UART_SetConfig+0x1b8a>
 8005554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800555a:	d212      	bcs.n	8005582 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800555c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800555e:	b29b      	uxth	r3, r3
 8005560:	f023 030f 	bic.w	r3, r3, #15
 8005564:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005568:	085b      	lsrs	r3, r3, #1
 800556a:	b29b      	uxth	r3, r3
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	b29a      	uxth	r2, r3
 8005572:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005574:	4313      	orrs	r3, r2
 8005576:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800557e:	60da      	str	r2, [r3, #12]
 8005580:	e3a3      	b.n	8005cca <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005588:	e39f      	b.n	8005cca <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800558a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800558e:	2b40      	cmp	r3, #64	; 0x40
 8005590:	f200 8388 	bhi.w	8005ca4 <UART_SetConfig+0x22ac>
 8005594:	a201      	add	r2, pc, #4	; (adr r2, 800559c <UART_SetConfig+0x1ba4>)
 8005596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559a:	bf00      	nop
 800559c:	080056a1 	.word	0x080056a1
 80055a0:	08005757 	.word	0x08005757
 80055a4:	08005ca5 	.word	0x08005ca5
 80055a8:	08005ca5 	.word	0x08005ca5
 80055ac:	0800580d 	.word	0x0800580d
 80055b0:	08005ca5 	.word	0x08005ca5
 80055b4:	08005ca5 	.word	0x08005ca5
 80055b8:	08005ca5 	.word	0x08005ca5
 80055bc:	080058c7 	.word	0x080058c7
 80055c0:	08005ca5 	.word	0x08005ca5
 80055c4:	08005ca5 	.word	0x08005ca5
 80055c8:	08005ca5 	.word	0x08005ca5
 80055cc:	08005ca5 	.word	0x08005ca5
 80055d0:	08005ca5 	.word	0x08005ca5
 80055d4:	08005ca5 	.word	0x08005ca5
 80055d8:	08005ca5 	.word	0x08005ca5
 80055dc:	08005981 	.word	0x08005981
 80055e0:	08005ca5 	.word	0x08005ca5
 80055e4:	08005ca5 	.word	0x08005ca5
 80055e8:	08005ca5 	.word	0x08005ca5
 80055ec:	08005ca5 	.word	0x08005ca5
 80055f0:	08005ca5 	.word	0x08005ca5
 80055f4:	08005ca5 	.word	0x08005ca5
 80055f8:	08005ca5 	.word	0x08005ca5
 80055fc:	08005ca5 	.word	0x08005ca5
 8005600:	08005ca5 	.word	0x08005ca5
 8005604:	08005ca5 	.word	0x08005ca5
 8005608:	08005ca5 	.word	0x08005ca5
 800560c:	08005ca5 	.word	0x08005ca5
 8005610:	08005ca5 	.word	0x08005ca5
 8005614:	08005ca5 	.word	0x08005ca5
 8005618:	08005ca5 	.word	0x08005ca5
 800561c:	08005af1 	.word	0x08005af1
 8005620:	08005ca5 	.word	0x08005ca5
 8005624:	08005ca5 	.word	0x08005ca5
 8005628:	08005ca5 	.word	0x08005ca5
 800562c:	08005ca5 	.word	0x08005ca5
 8005630:	08005ca5 	.word	0x08005ca5
 8005634:	08005ca5 	.word	0x08005ca5
 8005638:	08005ca5 	.word	0x08005ca5
 800563c:	08005ca5 	.word	0x08005ca5
 8005640:	08005ca5 	.word	0x08005ca5
 8005644:	08005ca5 	.word	0x08005ca5
 8005648:	08005ca5 	.word	0x08005ca5
 800564c:	08005ca5 	.word	0x08005ca5
 8005650:	08005ca5 	.word	0x08005ca5
 8005654:	08005ca5 	.word	0x08005ca5
 8005658:	08005ca5 	.word	0x08005ca5
 800565c:	08005ca5 	.word	0x08005ca5
 8005660:	08005ca5 	.word	0x08005ca5
 8005664:	08005ca5 	.word	0x08005ca5
 8005668:	08005ca5 	.word	0x08005ca5
 800566c:	08005ca5 	.word	0x08005ca5
 8005670:	08005ca5 	.word	0x08005ca5
 8005674:	08005ca5 	.word	0x08005ca5
 8005678:	08005ca5 	.word	0x08005ca5
 800567c:	08005ca5 	.word	0x08005ca5
 8005680:	08005ca5 	.word	0x08005ca5
 8005684:	08005ca5 	.word	0x08005ca5
 8005688:	08005ca5 	.word	0x08005ca5
 800568c:	08005ca5 	.word	0x08005ca5
 8005690:	08005ca5 	.word	0x08005ca5
 8005694:	08005ca5 	.word	0x08005ca5
 8005698:	08005ca5 	.word	0x08005ca5
 800569c:	08005be5 	.word	0x08005be5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056a0:	f7fc fd7a 	bl	8002198 <HAL_RCC_GetPCLK1Freq>
 80056a4:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d044      	beq.n	8005738 <UART_SetConfig+0x1d40>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d03e      	beq.n	8005734 <UART_SetConfig+0x1d3c>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d038      	beq.n	8005730 <UART_SetConfig+0x1d38>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	d032      	beq.n	800572c <UART_SetConfig+0x1d34>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	2b04      	cmp	r3, #4
 80056cc:	d02c      	beq.n	8005728 <UART_SetConfig+0x1d30>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	2b05      	cmp	r3, #5
 80056d4:	d026      	beq.n	8005724 <UART_SetConfig+0x1d2c>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	2b06      	cmp	r3, #6
 80056dc:	d020      	beq.n	8005720 <UART_SetConfig+0x1d28>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	2b07      	cmp	r3, #7
 80056e4:	d01a      	beq.n	800571c <UART_SetConfig+0x1d24>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	2b08      	cmp	r3, #8
 80056ec:	d014      	beq.n	8005718 <UART_SetConfig+0x1d20>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	2b09      	cmp	r3, #9
 80056f4:	d00e      	beq.n	8005714 <UART_SetConfig+0x1d1c>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	2b0a      	cmp	r3, #10
 80056fc:	d008      	beq.n	8005710 <UART_SetConfig+0x1d18>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005702:	2b0b      	cmp	r3, #11
 8005704:	d102      	bne.n	800570c <UART_SetConfig+0x1d14>
 8005706:	f44f 7380 	mov.w	r3, #256	; 0x100
 800570a:	e016      	b.n	800573a <UART_SetConfig+0x1d42>
 800570c:	2301      	movs	r3, #1
 800570e:	e014      	b.n	800573a <UART_SetConfig+0x1d42>
 8005710:	2380      	movs	r3, #128	; 0x80
 8005712:	e012      	b.n	800573a <UART_SetConfig+0x1d42>
 8005714:	2340      	movs	r3, #64	; 0x40
 8005716:	e010      	b.n	800573a <UART_SetConfig+0x1d42>
 8005718:	2320      	movs	r3, #32
 800571a:	e00e      	b.n	800573a <UART_SetConfig+0x1d42>
 800571c:	2310      	movs	r3, #16
 800571e:	e00c      	b.n	800573a <UART_SetConfig+0x1d42>
 8005720:	230c      	movs	r3, #12
 8005722:	e00a      	b.n	800573a <UART_SetConfig+0x1d42>
 8005724:	230a      	movs	r3, #10
 8005726:	e008      	b.n	800573a <UART_SetConfig+0x1d42>
 8005728:	2308      	movs	r3, #8
 800572a:	e006      	b.n	800573a <UART_SetConfig+0x1d42>
 800572c:	2306      	movs	r3, #6
 800572e:	e004      	b.n	800573a <UART_SetConfig+0x1d42>
 8005730:	2304      	movs	r3, #4
 8005732:	e002      	b.n	800573a <UART_SetConfig+0x1d42>
 8005734:	2302      	movs	r3, #2
 8005736:	e000      	b.n	800573a <UART_SetConfig+0x1d42>
 8005738:	2301      	movs	r3, #1
 800573a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800573c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	085b      	lsrs	r3, r3, #1
 8005746:	441a      	add	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005750:	b29b      	uxth	r3, r3
 8005752:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005754:	e2aa      	b.n	8005cac <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005756:	f7fc fd35 	bl	80021c4 <HAL_RCC_GetPCLK2Freq>
 800575a:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	2b00      	cmp	r3, #0
 8005762:	d044      	beq.n	80057ee <UART_SetConfig+0x1df6>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	2b01      	cmp	r3, #1
 800576a:	d03e      	beq.n	80057ea <UART_SetConfig+0x1df2>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	2b02      	cmp	r3, #2
 8005772:	d038      	beq.n	80057e6 <UART_SetConfig+0x1dee>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005778:	2b03      	cmp	r3, #3
 800577a:	d032      	beq.n	80057e2 <UART_SetConfig+0x1dea>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	2b04      	cmp	r3, #4
 8005782:	d02c      	beq.n	80057de <UART_SetConfig+0x1de6>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	2b05      	cmp	r3, #5
 800578a:	d026      	beq.n	80057da <UART_SetConfig+0x1de2>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	2b06      	cmp	r3, #6
 8005792:	d020      	beq.n	80057d6 <UART_SetConfig+0x1dde>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005798:	2b07      	cmp	r3, #7
 800579a:	d01a      	beq.n	80057d2 <UART_SetConfig+0x1dda>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d014      	beq.n	80057ce <UART_SetConfig+0x1dd6>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	2b09      	cmp	r3, #9
 80057aa:	d00e      	beq.n	80057ca <UART_SetConfig+0x1dd2>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	2b0a      	cmp	r3, #10
 80057b2:	d008      	beq.n	80057c6 <UART_SetConfig+0x1dce>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	2b0b      	cmp	r3, #11
 80057ba:	d102      	bne.n	80057c2 <UART_SetConfig+0x1dca>
 80057bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057c0:	e016      	b.n	80057f0 <UART_SetConfig+0x1df8>
 80057c2:	2301      	movs	r3, #1
 80057c4:	e014      	b.n	80057f0 <UART_SetConfig+0x1df8>
 80057c6:	2380      	movs	r3, #128	; 0x80
 80057c8:	e012      	b.n	80057f0 <UART_SetConfig+0x1df8>
 80057ca:	2340      	movs	r3, #64	; 0x40
 80057cc:	e010      	b.n	80057f0 <UART_SetConfig+0x1df8>
 80057ce:	2320      	movs	r3, #32
 80057d0:	e00e      	b.n	80057f0 <UART_SetConfig+0x1df8>
 80057d2:	2310      	movs	r3, #16
 80057d4:	e00c      	b.n	80057f0 <UART_SetConfig+0x1df8>
 80057d6:	230c      	movs	r3, #12
 80057d8:	e00a      	b.n	80057f0 <UART_SetConfig+0x1df8>
 80057da:	230a      	movs	r3, #10
 80057dc:	e008      	b.n	80057f0 <UART_SetConfig+0x1df8>
 80057de:	2308      	movs	r3, #8
 80057e0:	e006      	b.n	80057f0 <UART_SetConfig+0x1df8>
 80057e2:	2306      	movs	r3, #6
 80057e4:	e004      	b.n	80057f0 <UART_SetConfig+0x1df8>
 80057e6:	2304      	movs	r3, #4
 80057e8:	e002      	b.n	80057f0 <UART_SetConfig+0x1df8>
 80057ea:	2302      	movs	r3, #2
 80057ec:	e000      	b.n	80057f0 <UART_SetConfig+0x1df8>
 80057ee:	2301      	movs	r3, #1
 80057f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	085b      	lsrs	r3, r3, #1
 80057fc:	441a      	add	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	fbb2 f3f3 	udiv	r3, r2, r3
 8005806:	b29b      	uxth	r3, r3
 8005808:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800580a:	e24f      	b.n	8005cac <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800580c:	f107 0318 	add.w	r3, r7, #24
 8005810:	4618      	mov	r0, r3
 8005812:	f7fd fbf3 	bl	8002ffc <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005816:	69fa      	ldr	r2, [r7, #28]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	2b00      	cmp	r3, #0
 800581e:	d044      	beq.n	80058aa <UART_SetConfig+0x1eb2>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	2b01      	cmp	r3, #1
 8005826:	d03e      	beq.n	80058a6 <UART_SetConfig+0x1eae>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	2b02      	cmp	r3, #2
 800582e:	d038      	beq.n	80058a2 <UART_SetConfig+0x1eaa>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	2b03      	cmp	r3, #3
 8005836:	d032      	beq.n	800589e <UART_SetConfig+0x1ea6>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	2b04      	cmp	r3, #4
 800583e:	d02c      	beq.n	800589a <UART_SetConfig+0x1ea2>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005844:	2b05      	cmp	r3, #5
 8005846:	d026      	beq.n	8005896 <UART_SetConfig+0x1e9e>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	2b06      	cmp	r3, #6
 800584e:	d020      	beq.n	8005892 <UART_SetConfig+0x1e9a>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	2b07      	cmp	r3, #7
 8005856:	d01a      	beq.n	800588e <UART_SetConfig+0x1e96>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	2b08      	cmp	r3, #8
 800585e:	d014      	beq.n	800588a <UART_SetConfig+0x1e92>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	2b09      	cmp	r3, #9
 8005866:	d00e      	beq.n	8005886 <UART_SetConfig+0x1e8e>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	2b0a      	cmp	r3, #10
 800586e:	d008      	beq.n	8005882 <UART_SetConfig+0x1e8a>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	2b0b      	cmp	r3, #11
 8005876:	d102      	bne.n	800587e <UART_SetConfig+0x1e86>
 8005878:	f44f 7380 	mov.w	r3, #256	; 0x100
 800587c:	e016      	b.n	80058ac <UART_SetConfig+0x1eb4>
 800587e:	2301      	movs	r3, #1
 8005880:	e014      	b.n	80058ac <UART_SetConfig+0x1eb4>
 8005882:	2380      	movs	r3, #128	; 0x80
 8005884:	e012      	b.n	80058ac <UART_SetConfig+0x1eb4>
 8005886:	2340      	movs	r3, #64	; 0x40
 8005888:	e010      	b.n	80058ac <UART_SetConfig+0x1eb4>
 800588a:	2320      	movs	r3, #32
 800588c:	e00e      	b.n	80058ac <UART_SetConfig+0x1eb4>
 800588e:	2310      	movs	r3, #16
 8005890:	e00c      	b.n	80058ac <UART_SetConfig+0x1eb4>
 8005892:	230c      	movs	r3, #12
 8005894:	e00a      	b.n	80058ac <UART_SetConfig+0x1eb4>
 8005896:	230a      	movs	r3, #10
 8005898:	e008      	b.n	80058ac <UART_SetConfig+0x1eb4>
 800589a:	2308      	movs	r3, #8
 800589c:	e006      	b.n	80058ac <UART_SetConfig+0x1eb4>
 800589e:	2306      	movs	r3, #6
 80058a0:	e004      	b.n	80058ac <UART_SetConfig+0x1eb4>
 80058a2:	2304      	movs	r3, #4
 80058a4:	e002      	b.n	80058ac <UART_SetConfig+0x1eb4>
 80058a6:	2302      	movs	r3, #2
 80058a8:	e000      	b.n	80058ac <UART_SetConfig+0x1eb4>
 80058aa:	2301      	movs	r3, #1
 80058ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	085b      	lsrs	r3, r3, #1
 80058b6:	441a      	add	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058c4:	e1f2      	b.n	8005cac <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058c6:	f107 030c 	add.w	r3, r7, #12
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fd fce2 	bl	8003294 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d044      	beq.n	8005964 <UART_SetConfig+0x1f6c>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d03e      	beq.n	8005960 <UART_SetConfig+0x1f68>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d038      	beq.n	800595c <UART_SetConfig+0x1f64>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	2b03      	cmp	r3, #3
 80058f0:	d032      	beq.n	8005958 <UART_SetConfig+0x1f60>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f6:	2b04      	cmp	r3, #4
 80058f8:	d02c      	beq.n	8005954 <UART_SetConfig+0x1f5c>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	2b05      	cmp	r3, #5
 8005900:	d026      	beq.n	8005950 <UART_SetConfig+0x1f58>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	2b06      	cmp	r3, #6
 8005908:	d020      	beq.n	800594c <UART_SetConfig+0x1f54>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	2b07      	cmp	r3, #7
 8005910:	d01a      	beq.n	8005948 <UART_SetConfig+0x1f50>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	2b08      	cmp	r3, #8
 8005918:	d014      	beq.n	8005944 <UART_SetConfig+0x1f4c>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	2b09      	cmp	r3, #9
 8005920:	d00e      	beq.n	8005940 <UART_SetConfig+0x1f48>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	2b0a      	cmp	r3, #10
 8005928:	d008      	beq.n	800593c <UART_SetConfig+0x1f44>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	2b0b      	cmp	r3, #11
 8005930:	d102      	bne.n	8005938 <UART_SetConfig+0x1f40>
 8005932:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005936:	e016      	b.n	8005966 <UART_SetConfig+0x1f6e>
 8005938:	2301      	movs	r3, #1
 800593a:	e014      	b.n	8005966 <UART_SetConfig+0x1f6e>
 800593c:	2380      	movs	r3, #128	; 0x80
 800593e:	e012      	b.n	8005966 <UART_SetConfig+0x1f6e>
 8005940:	2340      	movs	r3, #64	; 0x40
 8005942:	e010      	b.n	8005966 <UART_SetConfig+0x1f6e>
 8005944:	2320      	movs	r3, #32
 8005946:	e00e      	b.n	8005966 <UART_SetConfig+0x1f6e>
 8005948:	2310      	movs	r3, #16
 800594a:	e00c      	b.n	8005966 <UART_SetConfig+0x1f6e>
 800594c:	230c      	movs	r3, #12
 800594e:	e00a      	b.n	8005966 <UART_SetConfig+0x1f6e>
 8005950:	230a      	movs	r3, #10
 8005952:	e008      	b.n	8005966 <UART_SetConfig+0x1f6e>
 8005954:	2308      	movs	r3, #8
 8005956:	e006      	b.n	8005966 <UART_SetConfig+0x1f6e>
 8005958:	2306      	movs	r3, #6
 800595a:	e004      	b.n	8005966 <UART_SetConfig+0x1f6e>
 800595c:	2304      	movs	r3, #4
 800595e:	e002      	b.n	8005966 <UART_SetConfig+0x1f6e>
 8005960:	2302      	movs	r3, #2
 8005962:	e000      	b.n	8005966 <UART_SetConfig+0x1f6e>
 8005964:	2301      	movs	r3, #1
 8005966:	fbb2 f2f3 	udiv	r2, r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	085b      	lsrs	r3, r3, #1
 8005970:	441a      	add	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	fbb2 f3f3 	udiv	r3, r2, r3
 800597a:	b29b      	uxth	r3, r3
 800597c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800597e:	e195      	b.n	8005cac <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005980:	4b87      	ldr	r3, [pc, #540]	; (8005ba0 <UART_SetConfig+0x21a8>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0320 	and.w	r3, r3, #32
 8005988:	2b00      	cmp	r3, #0
 800598a:	d05d      	beq.n	8005a48 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800598c:	4b84      	ldr	r3, [pc, #528]	; (8005ba0 <UART_SetConfig+0x21a8>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	08db      	lsrs	r3, r3, #3
 8005992:	f003 0303 	and.w	r3, r3, #3
 8005996:	4a83      	ldr	r2, [pc, #524]	; (8005ba4 <UART_SetConfig+0x21ac>)
 8005998:	40da      	lsrs	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d044      	beq.n	8005a2c <UART_SetConfig+0x2034>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d03e      	beq.n	8005a28 <UART_SetConfig+0x2030>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d038      	beq.n	8005a24 <UART_SetConfig+0x202c>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	d032      	beq.n	8005a20 <UART_SetConfig+0x2028>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	2b04      	cmp	r3, #4
 80059c0:	d02c      	beq.n	8005a1c <UART_SetConfig+0x2024>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	2b05      	cmp	r3, #5
 80059c8:	d026      	beq.n	8005a18 <UART_SetConfig+0x2020>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	2b06      	cmp	r3, #6
 80059d0:	d020      	beq.n	8005a14 <UART_SetConfig+0x201c>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d6:	2b07      	cmp	r3, #7
 80059d8:	d01a      	beq.n	8005a10 <UART_SetConfig+0x2018>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	2b08      	cmp	r3, #8
 80059e0:	d014      	beq.n	8005a0c <UART_SetConfig+0x2014>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	2b09      	cmp	r3, #9
 80059e8:	d00e      	beq.n	8005a08 <UART_SetConfig+0x2010>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	2b0a      	cmp	r3, #10
 80059f0:	d008      	beq.n	8005a04 <UART_SetConfig+0x200c>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	2b0b      	cmp	r3, #11
 80059f8:	d102      	bne.n	8005a00 <UART_SetConfig+0x2008>
 80059fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059fe:	e016      	b.n	8005a2e <UART_SetConfig+0x2036>
 8005a00:	2301      	movs	r3, #1
 8005a02:	e014      	b.n	8005a2e <UART_SetConfig+0x2036>
 8005a04:	2380      	movs	r3, #128	; 0x80
 8005a06:	e012      	b.n	8005a2e <UART_SetConfig+0x2036>
 8005a08:	2340      	movs	r3, #64	; 0x40
 8005a0a:	e010      	b.n	8005a2e <UART_SetConfig+0x2036>
 8005a0c:	2320      	movs	r3, #32
 8005a0e:	e00e      	b.n	8005a2e <UART_SetConfig+0x2036>
 8005a10:	2310      	movs	r3, #16
 8005a12:	e00c      	b.n	8005a2e <UART_SetConfig+0x2036>
 8005a14:	230c      	movs	r3, #12
 8005a16:	e00a      	b.n	8005a2e <UART_SetConfig+0x2036>
 8005a18:	230a      	movs	r3, #10
 8005a1a:	e008      	b.n	8005a2e <UART_SetConfig+0x2036>
 8005a1c:	2308      	movs	r3, #8
 8005a1e:	e006      	b.n	8005a2e <UART_SetConfig+0x2036>
 8005a20:	2306      	movs	r3, #6
 8005a22:	e004      	b.n	8005a2e <UART_SetConfig+0x2036>
 8005a24:	2304      	movs	r3, #4
 8005a26:	e002      	b.n	8005a2e <UART_SetConfig+0x2036>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e000      	b.n	8005a2e <UART_SetConfig+0x2036>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	085b      	lsrs	r3, r3, #1
 8005a38:	441a      	add	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8005a46:	e131      	b.n	8005cac <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d043      	beq.n	8005ad8 <UART_SetConfig+0x20e0>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d03d      	beq.n	8005ad4 <UART_SetConfig+0x20dc>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d037      	beq.n	8005ad0 <UART_SetConfig+0x20d8>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	2b03      	cmp	r3, #3
 8005a66:	d031      	beq.n	8005acc <UART_SetConfig+0x20d4>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	2b04      	cmp	r3, #4
 8005a6e:	d02b      	beq.n	8005ac8 <UART_SetConfig+0x20d0>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	2b05      	cmp	r3, #5
 8005a76:	d025      	beq.n	8005ac4 <UART_SetConfig+0x20cc>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	2b06      	cmp	r3, #6
 8005a7e:	d01f      	beq.n	8005ac0 <UART_SetConfig+0x20c8>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	2b07      	cmp	r3, #7
 8005a86:	d019      	beq.n	8005abc <UART_SetConfig+0x20c4>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	2b08      	cmp	r3, #8
 8005a8e:	d013      	beq.n	8005ab8 <UART_SetConfig+0x20c0>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	2b09      	cmp	r3, #9
 8005a96:	d00d      	beq.n	8005ab4 <UART_SetConfig+0x20bc>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	2b0a      	cmp	r3, #10
 8005a9e:	d007      	beq.n	8005ab0 <UART_SetConfig+0x20b8>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	2b0b      	cmp	r3, #11
 8005aa6:	d101      	bne.n	8005aac <UART_SetConfig+0x20b4>
 8005aa8:	4b3f      	ldr	r3, [pc, #252]	; (8005ba8 <UART_SetConfig+0x21b0>)
 8005aaa:	e016      	b.n	8005ada <UART_SetConfig+0x20e2>
 8005aac:	4b3d      	ldr	r3, [pc, #244]	; (8005ba4 <UART_SetConfig+0x21ac>)
 8005aae:	e014      	b.n	8005ada <UART_SetConfig+0x20e2>
 8005ab0:	4b3e      	ldr	r3, [pc, #248]	; (8005bac <UART_SetConfig+0x21b4>)
 8005ab2:	e012      	b.n	8005ada <UART_SetConfig+0x20e2>
 8005ab4:	4b3e      	ldr	r3, [pc, #248]	; (8005bb0 <UART_SetConfig+0x21b8>)
 8005ab6:	e010      	b.n	8005ada <UART_SetConfig+0x20e2>
 8005ab8:	4b3e      	ldr	r3, [pc, #248]	; (8005bb4 <UART_SetConfig+0x21bc>)
 8005aba:	e00e      	b.n	8005ada <UART_SetConfig+0x20e2>
 8005abc:	4b3e      	ldr	r3, [pc, #248]	; (8005bb8 <UART_SetConfig+0x21c0>)
 8005abe:	e00c      	b.n	8005ada <UART_SetConfig+0x20e2>
 8005ac0:	4b3e      	ldr	r3, [pc, #248]	; (8005bbc <UART_SetConfig+0x21c4>)
 8005ac2:	e00a      	b.n	8005ada <UART_SetConfig+0x20e2>
 8005ac4:	4b3e      	ldr	r3, [pc, #248]	; (8005bc0 <UART_SetConfig+0x21c8>)
 8005ac6:	e008      	b.n	8005ada <UART_SetConfig+0x20e2>
 8005ac8:	4b3e      	ldr	r3, [pc, #248]	; (8005bc4 <UART_SetConfig+0x21cc>)
 8005aca:	e006      	b.n	8005ada <UART_SetConfig+0x20e2>
 8005acc:	4b3e      	ldr	r3, [pc, #248]	; (8005bc8 <UART_SetConfig+0x21d0>)
 8005ace:	e004      	b.n	8005ada <UART_SetConfig+0x20e2>
 8005ad0:	4b3e      	ldr	r3, [pc, #248]	; (8005bcc <UART_SetConfig+0x21d4>)
 8005ad2:	e002      	b.n	8005ada <UART_SetConfig+0x20e2>
 8005ad4:	4b3e      	ldr	r3, [pc, #248]	; (8005bd0 <UART_SetConfig+0x21d8>)
 8005ad6:	e000      	b.n	8005ada <UART_SetConfig+0x20e2>
 8005ad8:	4b32      	ldr	r3, [pc, #200]	; (8005ba4 <UART_SetConfig+0x21ac>)
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6852      	ldr	r2, [r2, #4]
 8005ade:	0852      	lsrs	r2, r2, #1
 8005ae0:	441a      	add	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005aee:	e0dd      	b.n	8005cac <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d046      	beq.n	8005b86 <UART_SetConfig+0x218e>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d040      	beq.n	8005b82 <UART_SetConfig+0x218a>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d03a      	beq.n	8005b7e <UART_SetConfig+0x2186>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	2b03      	cmp	r3, #3
 8005b0e:	d034      	beq.n	8005b7a <UART_SetConfig+0x2182>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	d02e      	beq.n	8005b76 <UART_SetConfig+0x217e>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	2b05      	cmp	r3, #5
 8005b1e:	d028      	beq.n	8005b72 <UART_SetConfig+0x217a>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	2b06      	cmp	r3, #6
 8005b26:	d022      	beq.n	8005b6e <UART_SetConfig+0x2176>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2c:	2b07      	cmp	r3, #7
 8005b2e:	d01c      	beq.n	8005b6a <UART_SetConfig+0x2172>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d016      	beq.n	8005b66 <UART_SetConfig+0x216e>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3c:	2b09      	cmp	r3, #9
 8005b3e:	d00f      	beq.n	8005b60 <UART_SetConfig+0x2168>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b44:	2b0a      	cmp	r3, #10
 8005b46:	d008      	beq.n	8005b5a <UART_SetConfig+0x2162>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	2b0b      	cmp	r3, #11
 8005b4e:	d102      	bne.n	8005b56 <UART_SetConfig+0x215e>
 8005b50:	f643 5309 	movw	r3, #15625	; 0x3d09
 8005b54:	e018      	b.n	8005b88 <UART_SetConfig+0x2190>
 8005b56:	4b18      	ldr	r3, [pc, #96]	; (8005bb8 <UART_SetConfig+0x21c0>)
 8005b58:	e016      	b.n	8005b88 <UART_SetConfig+0x2190>
 8005b5a:	f647 2312 	movw	r3, #31250	; 0x7a12
 8005b5e:	e013      	b.n	8005b88 <UART_SetConfig+0x2190>
 8005b60:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005b64:	e010      	b.n	8005b88 <UART_SetConfig+0x2190>
 8005b66:	4b1b      	ldr	r3, [pc, #108]	; (8005bd4 <UART_SetConfig+0x21dc>)
 8005b68:	e00e      	b.n	8005b88 <UART_SetConfig+0x2190>
 8005b6a:	4b0f      	ldr	r3, [pc, #60]	; (8005ba8 <UART_SetConfig+0x21b0>)
 8005b6c:	e00c      	b.n	8005b88 <UART_SetConfig+0x2190>
 8005b6e:	4b1a      	ldr	r3, [pc, #104]	; (8005bd8 <UART_SetConfig+0x21e0>)
 8005b70:	e00a      	b.n	8005b88 <UART_SetConfig+0x2190>
 8005b72:	4b1a      	ldr	r3, [pc, #104]	; (8005bdc <UART_SetConfig+0x21e4>)
 8005b74:	e008      	b.n	8005b88 <UART_SetConfig+0x2190>
 8005b76:	4b0d      	ldr	r3, [pc, #52]	; (8005bac <UART_SetConfig+0x21b4>)
 8005b78:	e006      	b.n	8005b88 <UART_SetConfig+0x2190>
 8005b7a:	4b19      	ldr	r3, [pc, #100]	; (8005be0 <UART_SetConfig+0x21e8>)
 8005b7c:	e004      	b.n	8005b88 <UART_SetConfig+0x2190>
 8005b7e:	4b0c      	ldr	r3, [pc, #48]	; (8005bb0 <UART_SetConfig+0x21b8>)
 8005b80:	e002      	b.n	8005b88 <UART_SetConfig+0x2190>
 8005b82:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <UART_SetConfig+0x21bc>)
 8005b84:	e000      	b.n	8005b88 <UART_SetConfig+0x2190>
 8005b86:	4b0c      	ldr	r3, [pc, #48]	; (8005bb8 <UART_SetConfig+0x21c0>)
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6852      	ldr	r2, [r2, #4]
 8005b8c:	0852      	lsrs	r2, r2, #1
 8005b8e:	441a      	add	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b9c:	e086      	b.n	8005cac <UART_SetConfig+0x22b4>
 8005b9e:	bf00      	nop
 8005ba0:	58024400 	.word	0x58024400
 8005ba4:	03d09000 	.word	0x03d09000
 8005ba8:	0003d090 	.word	0x0003d090
 8005bac:	0007a120 	.word	0x0007a120
 8005bb0:	000f4240 	.word	0x000f4240
 8005bb4:	001e8480 	.word	0x001e8480
 8005bb8:	003d0900 	.word	0x003d0900
 8005bbc:	00516155 	.word	0x00516155
 8005bc0:	0061a800 	.word	0x0061a800
 8005bc4:	007a1200 	.word	0x007a1200
 8005bc8:	00a2c2aa 	.word	0x00a2c2aa
 8005bcc:	00f42400 	.word	0x00f42400
 8005bd0:	01e84800 	.word	0x01e84800
 8005bd4:	0001e848 	.word	0x0001e848
 8005bd8:	00051615 	.word	0x00051615
 8005bdc:	00061a80 	.word	0x00061a80
 8005be0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d04e      	beq.n	8005c8a <UART_SetConfig+0x2292>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d047      	beq.n	8005c84 <UART_SetConfig+0x228c>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d040      	beq.n	8005c7e <UART_SetConfig+0x2286>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	2b03      	cmp	r3, #3
 8005c02:	d039      	beq.n	8005c78 <UART_SetConfig+0x2280>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	d032      	beq.n	8005c72 <UART_SetConfig+0x227a>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	2b05      	cmp	r3, #5
 8005c12:	d02b      	beq.n	8005c6c <UART_SetConfig+0x2274>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c18:	2b06      	cmp	r3, #6
 8005c1a:	d024      	beq.n	8005c66 <UART_SetConfig+0x226e>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	2b07      	cmp	r3, #7
 8005c22:	d01d      	beq.n	8005c60 <UART_SetConfig+0x2268>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	2b08      	cmp	r3, #8
 8005c2a:	d016      	beq.n	8005c5a <UART_SetConfig+0x2262>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	2b09      	cmp	r3, #9
 8005c32:	d00f      	beq.n	8005c54 <UART_SetConfig+0x225c>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	2b0a      	cmp	r3, #10
 8005c3a:	d008      	beq.n	8005c4e <UART_SetConfig+0x2256>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c40:	2b0b      	cmp	r3, #11
 8005c42:	d101      	bne.n	8005c48 <UART_SetConfig+0x2250>
 8005c44:	2380      	movs	r3, #128	; 0x80
 8005c46:	e022      	b.n	8005c8e <UART_SetConfig+0x2296>
 8005c48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c4c:	e01f      	b.n	8005c8e <UART_SetConfig+0x2296>
 8005c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c52:	e01c      	b.n	8005c8e <UART_SetConfig+0x2296>
 8005c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c58:	e019      	b.n	8005c8e <UART_SetConfig+0x2296>
 8005c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c5e:	e016      	b.n	8005c8e <UART_SetConfig+0x2296>
 8005c60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c64:	e013      	b.n	8005c8e <UART_SetConfig+0x2296>
 8005c66:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005c6a:	e010      	b.n	8005c8e <UART_SetConfig+0x2296>
 8005c6c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005c70:	e00d      	b.n	8005c8e <UART_SetConfig+0x2296>
 8005c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c76:	e00a      	b.n	8005c8e <UART_SetConfig+0x2296>
 8005c78:	f241 5355 	movw	r3, #5461	; 0x1555
 8005c7c:	e007      	b.n	8005c8e <UART_SetConfig+0x2296>
 8005c7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c82:	e004      	b.n	8005c8e <UART_SetConfig+0x2296>
 8005c84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c88:	e001      	b.n	8005c8e <UART_SetConfig+0x2296>
 8005c8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	6852      	ldr	r2, [r2, #4]
 8005c92:	0852      	lsrs	r2, r2, #1
 8005c94:	441a      	add	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ca2:	e003      	b.n	8005cac <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8005caa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cae:	2b0f      	cmp	r3, #15
 8005cb0:	d908      	bls.n	8005cc4 <UART_SetConfig+0x22cc>
 8005cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cb8:	d204      	bcs.n	8005cc4 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cc0:	60da      	str	r2, [r3, #12]
 8005cc2:	e002      	b.n	8005cca <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005ce6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3740      	adds	r7, #64	; 0x40
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08005cf4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00a      	beq.n	8005d1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d44:	f003 0304 	and.w	r3, r3, #4
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00a      	beq.n	8005d62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d66:	f003 0308 	and.w	r3, r3, #8
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00a      	beq.n	8005d84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d88:	f003 0310 	and.w	r3, r3, #16
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00a      	beq.n	8005da6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005daa:	f003 0320 	and.w	r3, r3, #32
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00a      	beq.n	8005dc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d01a      	beq.n	8005e0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005df2:	d10a      	bne.n	8005e0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	605a      	str	r2, [r3, #4]
  }
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af02      	add	r7, sp, #8
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005e48:	f7fa ff82 	bl	8000d50 <HAL_GetTick>
 8005e4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0308 	and.w	r3, r3, #8
 8005e58:	2b08      	cmp	r3, #8
 8005e5a:	d10e      	bne.n	8005e7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f82c 	bl	8005ec8 <UART_WaitOnFlagUntilTimeout>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e022      	b.n	8005ec0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0304 	and.w	r3, r3, #4
 8005e84:	2b04      	cmp	r3, #4
 8005e86:	d10e      	bne.n	8005ea6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f816 	bl	8005ec8 <UART_WaitOnFlagUntilTimeout>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e00c      	b.n	8005ec0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	603b      	str	r3, [r7, #0]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ed8:	e062      	b.n	8005fa0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee0:	d05e      	beq.n	8005fa0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ee2:	f7fa ff35 	bl	8000d50 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d302      	bcc.n	8005ef8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d11d      	bne.n	8005f34 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f06:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689a      	ldr	r2, [r3, #8]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0201 	bic.w	r2, r2, #1
 8005f16:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2220      	movs	r2, #32
 8005f24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e045      	b.n	8005fc0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0304 	and.w	r3, r3, #4
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d02e      	beq.n	8005fa0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	69db      	ldr	r3, [r3, #28]
 8005f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f50:	d126      	bne.n	8005fa0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f5a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f6a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 0201 	bic.w	r2, r2, #1
 8005f7a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2220      	movs	r2, #32
 8005f88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e00f      	b.n	8005fc0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	69da      	ldr	r2, [r3, #28]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	4013      	ands	r3, r2
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	bf0c      	ite	eq
 8005fb0:	2301      	moveq	r3, #1
 8005fb2:	2300      	movne	r3, #0
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	79fb      	ldrb	r3, [r7, #7]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d08d      	beq.n	8005eda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d101      	bne.n	8005fde <HAL_UARTEx_DisableFifoMode+0x16>
 8005fda:	2302      	movs	r3, #2
 8005fdc:	e027      	b.n	800602e <HAL_UARTEx_DisableFifoMode+0x66>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2224      	movs	r2, #36	; 0x24
 8005fea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0201 	bic.w	r2, r2, #1
 8006004:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800600c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2220      	movs	r2, #32
 8006020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b084      	sub	sp, #16
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800604a:	2b01      	cmp	r3, #1
 800604c:	d101      	bne.n	8006052 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800604e:	2302      	movs	r3, #2
 8006050:	e02d      	b.n	80060ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2224      	movs	r2, #36	; 0x24
 800605e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0201 	bic.w	r2, r2, #1
 8006078:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f850 	bl	8006134 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2220      	movs	r2, #32
 80060a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b084      	sub	sp, #16
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d101      	bne.n	80060ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80060ca:	2302      	movs	r3, #2
 80060cc:	e02d      	b.n	800612a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2224      	movs	r2, #36	; 0x24
 80060da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0201 	bic.w	r2, r2, #1
 80060f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f812 	bl	8006134 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2220      	movs	r2, #32
 800611c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
	...

08006134 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006134:	b480      	push	{r7}
 8006136:	b089      	sub	sp, #36	; 0x24
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800613c:	4a2f      	ldr	r2, [pc, #188]	; (80061fc <UARTEx_SetNbDataToProcess+0xc8>)
 800613e:	f107 0314 	add.w	r3, r7, #20
 8006142:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006146:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800614a:	4a2d      	ldr	r2, [pc, #180]	; (8006200 <UARTEx_SetNbDataToProcess+0xcc>)
 800614c:	f107 030c 	add.w	r3, r7, #12
 8006150:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006154:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800615c:	2b00      	cmp	r3, #0
 800615e:	d108      	bne.n	8006172 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006170:	e03d      	b.n	80061ee <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006172:	2308      	movs	r3, #8
 8006174:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006176:	2308      	movs	r3, #8
 8006178:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	0e5b      	lsrs	r3, r3, #25
 8006182:	b2db      	uxtb	r3, r3
 8006184:	f003 0307 	and.w	r3, r3, #7
 8006188:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	0f5b      	lsrs	r3, r3, #29
 8006192:	b2db      	uxtb	r3, r3
 8006194:	f003 0307 	and.w	r3, r3, #7
 8006198:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800619a:	7fbb      	ldrb	r3, [r7, #30]
 800619c:	7f3a      	ldrb	r2, [r7, #28]
 800619e:	f107 0120 	add.w	r1, r7, #32
 80061a2:	440a      	add	r2, r1
 80061a4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80061a8:	fb02 f303 	mul.w	r3, r2, r3
 80061ac:	7f3a      	ldrb	r2, [r7, #28]
 80061ae:	f107 0120 	add.w	r1, r7, #32
 80061b2:	440a      	add	r2, r1
 80061b4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80061b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80061bc:	b29a      	uxth	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80061c4:	7ffb      	ldrb	r3, [r7, #31]
 80061c6:	7f7a      	ldrb	r2, [r7, #29]
 80061c8:	f107 0120 	add.w	r1, r7, #32
 80061cc:	440a      	add	r2, r1
 80061ce:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80061d2:	fb02 f303 	mul.w	r3, r2, r3
 80061d6:	7f7a      	ldrb	r2, [r7, #29]
 80061d8:	f107 0120 	add.w	r1, r7, #32
 80061dc:	440a      	add	r2, r1
 80061de:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80061e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80061ee:	bf00      	nop
 80061f0:	3724      	adds	r7, #36	; 0x24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	08006298 	.word	0x08006298
 8006200:	080062a0 	.word	0x080062a0

08006204 <__libc_init_array>:
 8006204:	b570      	push	{r4, r5, r6, lr}
 8006206:	4e0d      	ldr	r6, [pc, #52]	; (800623c <__libc_init_array+0x38>)
 8006208:	4c0d      	ldr	r4, [pc, #52]	; (8006240 <__libc_init_array+0x3c>)
 800620a:	1ba4      	subs	r4, r4, r6
 800620c:	10a4      	asrs	r4, r4, #2
 800620e:	2500      	movs	r5, #0
 8006210:	42a5      	cmp	r5, r4
 8006212:	d109      	bne.n	8006228 <__libc_init_array+0x24>
 8006214:	4e0b      	ldr	r6, [pc, #44]	; (8006244 <__libc_init_array+0x40>)
 8006216:	4c0c      	ldr	r4, [pc, #48]	; (8006248 <__libc_init_array+0x44>)
 8006218:	f000 f820 	bl	800625c <_init>
 800621c:	1ba4      	subs	r4, r4, r6
 800621e:	10a4      	asrs	r4, r4, #2
 8006220:	2500      	movs	r5, #0
 8006222:	42a5      	cmp	r5, r4
 8006224:	d105      	bne.n	8006232 <__libc_init_array+0x2e>
 8006226:	bd70      	pop	{r4, r5, r6, pc}
 8006228:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800622c:	4798      	blx	r3
 800622e:	3501      	adds	r5, #1
 8006230:	e7ee      	b.n	8006210 <__libc_init_array+0xc>
 8006232:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006236:	4798      	blx	r3
 8006238:	3501      	adds	r5, #1
 800623a:	e7f2      	b.n	8006222 <__libc_init_array+0x1e>
 800623c:	080062c0 	.word	0x080062c0
 8006240:	080062c0 	.word	0x080062c0
 8006244:	080062c0 	.word	0x080062c0
 8006248:	080062c4 	.word	0x080062c4

0800624c <memset>:
 800624c:	4402      	add	r2, r0
 800624e:	4603      	mov	r3, r0
 8006250:	4293      	cmp	r3, r2
 8006252:	d100      	bne.n	8006256 <memset+0xa>
 8006254:	4770      	bx	lr
 8006256:	f803 1b01 	strb.w	r1, [r3], #1
 800625a:	e7f9      	b.n	8006250 <memset+0x4>

0800625c <_init>:
 800625c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625e:	bf00      	nop
 8006260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006262:	bc08      	pop	{r3}
 8006264:	469e      	mov	lr, r3
 8006266:	4770      	bx	lr

08006268 <_fini>:
 8006268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800626a:	bf00      	nop
 800626c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800626e:	bc08      	pop	{r3}
 8006270:	469e      	mov	lr, r3
 8006272:	4770      	bx	lr
